{
    "name": "cpln",
    "displayName": "Control Plane",
    "description": "A Pulumi package for creating and managing Control Plane (cpln) resources.",
    "keywords": [
        "pulumi",
        "cpln",
        "category/infrastructure"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`cpln` Terraform Provider](https://github.com/controlplane-com/terraform-provider-cpln).",
    "repository": "https://github.com/pulumiverse/pulumi-cpln",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/pulumi-cpln/main/docs/logo.png",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-cpln/sdk/go/cpln",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/cpln",
            "packageDescription": "A Pulumi package for creating and managing Control Plane (cpln) resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/controlplane-com/terraform-provider-cpln)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-cpln` repo](https://github.com/pulumiverse/pulumi-cpln/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-cpln` repo](https://github.com/controlplane-com/terraform-provider-cpln/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_cpln",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/controlplane-com/terraform-provider-cpln)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-cpln` repo](https://github.com/pulumiverse/pulumi-cpln/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-cpln` repo](https://github.com/controlplane-com/terraform-provider-cpln/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "endpoint": {
                "type": "string"
            },
            "org": {
                "type": "string"
            },
            "profile": {
                "type": "string"
            },
            "refreshToken": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        },
        "defaults": [
            "org"
        ]
    },
    "types": {
        "cpln:index/CloudAccountAws:CloudAccountAws": {
            "properties": {
                "roleArn": {
                    "type": "string",
                    "description": "Amazon Resource Name (ARN) Role.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "cpln:index/CloudAccountAzure:CloudAccountAzure": {
            "properties": {
                "secretLink": {
                    "type": "string",
                    "description": "Full link to an Azure secret. (e.g., /org/ORG_NAME/secret/AZURE_SECRET).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "secretLink"
            ]
        },
        "cpln:index/CloudAccountGcp:CloudAccountGcp": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "description": "GCP project ID. Obtained from the GCP cloud console.\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "cpln:index/CloudAccountNgs:CloudAccountNgs": {
            "properties": {
                "secretLink": {
                    "type": "string",
                    "description": "Full link to a NATS Account Secret secret. (e.g., /org/ORG_NAME/secret/NATS_ACCOUNT_SECRET).\n",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "secretLink"
            ]
        },
        "cpln:index/DomainRouteHeaders:DomainRouteHeaders": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "request": {
                    "$ref": "#/types/cpln:index/DomainRouteHeadersRequest:DomainRouteHeadersRequest",
                    "description": "Manipulates HTTP headers.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainRouteHeadersRequest:DomainRouteHeadersRequest": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "set": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Sets or overrides headers to all http requests for this route.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainSpec:DomainSpec": {
            "properties": {
                "acceptAllHosts": {
                    "type": "boolean",
                    "description": "Allows domain to accept wildcards. The associated GVC must have dedicated load balancing enabled.\n"
                },
                "dnsMode": {
                    "type": "string",
                    "description": "In `cname` dnsMode, Control Plane will configure workloads to accept traffic for the domain but will not manage DNS records for the domain. End users must configure CNAME records in their own DNS pointed to the canonical workload endpoint. Currently `cname` dnsMode requires that a TLS server certificate be configured when subdomain based routing is used. In `ns` dnsMode, Control Plane will manage the subdomains and create all necessary DNS records. End users configure NS records to forward DNS requests to the Control Plane managed DNS servers. Valid values: `cname`, `ns`. Default: `cname`.\n"
                },
                "gvcLink": {
                    "type": "string",
                    "description": "This value is set to a target GVC (using a full link) for use by subdomain based routing. Each workload in the GVC will receive a subdomain in the form ${workload.name}.${domain.name}. **Do not include if path based routing is used.**\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainSpecPort:DomainSpecPort"
                    },
                    "description": "Domain port specifications.\n"
                }
            },
            "type": "object",
            "required": [
                "ports"
            ]
        },
        "cpln:index/DomainSpecPort:DomainSpecPort": {
            "properties": {
                "cors": {
                    "$ref": "#/types/cpln:index/DomainSpecPortCors:DomainSpecPortCors",
                    "description": "A security feature implemented by web browsers to allow resources on a web page to be requested from another domain outside the domain from which the resource originated.\n"
                },
                "number": {
                    "type": "integer",
                    "description": "Port to expose externally. Values: `80`, `443`. Default: `443`.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Allowed protocol. Valid values: `http`, `http2`, `tcp`. Default: `http2`.\n"
                },
                "tls": {
                    "$ref": "#/types/cpln:index/DomainSpecPortTls:DomainSpecPortTls"
                }
            },
            "type": "object",
            "required": [
                "tls"
            ]
        },
        "cpln:index/DomainSpecPortCors:DomainSpecPortCors": {
            "properties": {
                "allowCredentials": {
                    "type": "boolean",
                    "description": "Determines whether the client-side code (typically running in a web browser) is allowed to include credentials (such as cookies, HTTP authentication, or client-side SSL certificates) in cross-origin requests.\n"
                },
                "allowHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the custom HTTP headers that are allowed in a cross-origin request to a specific resource.\n"
                },
                "allowMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Specifies the HTTP methods (such as `GET`, `POST`, `PUT`, `DELETE`, etc.) that are allowed for a cross-origin request to a specific resource.\n"
                },
                "allowOrigins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainSpecPortCorsAllowOrigin:DomainSpecPortCorsAllowOrigin"
                    },
                    "description": "Determines which origins are allowed to access a particular resource on a server from a web browser.\n"
                },
                "exposeHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The HTTP headers that a server allows to be exposed to the client in response to a cross-origin request. These headers provide additional information about the server's capabilities or requirements, aiding in proper handling of the request by the client's browser or application.\n"
                },
                "maxAge": {
                    "type": "string",
                    "description": "Maximum amount of time that a preflight request result can be cached by the client browser. Input is expected as a duration string (i.e, 24h, 20m, etc.).\n"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainSpecPortCorsAllowOrigin:DomainSpecPortCorsAllowOrigin": {
            "properties": {
                "exact": {
                    "type": "string",
                    "description": "Value of allowed origin.\n"
                }
            },
            "type": "object",
            "required": [
                "exact"
            ]
        },
        "cpln:index/DomainSpecPortTls:DomainSpecPortTls": {
            "properties": {
                "cipherSuites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowed cipher suites. Refer to the [Domain Reference](https://docs.controlplane.com/reference/domain#cipher-suites) for details.\n"
                },
                "clientCertificate": {
                    "$ref": "#/types/cpln:index/DomainSpecPortTlsClientCertificate:DomainSpecPortTlsClientCertificate",
                    "description": "The certificate authority PEM, stored as a TLS Secret, used to verify the authority of the client certificate. The only verification performed checks that the CN of the PEM matches the Domain (i.e., CN=*.DOMAIN).\n"
                },
                "minProtocolVersion": {
                    "type": "string",
                    "description": "Minimum TLS version to accept. Minimum is `1.0`. Default: `1.2`.\n"
                },
                "serverCertificate": {
                    "$ref": "#/types/cpln:index/DomainSpecPortTlsServerCertificate:DomainSpecPortTlsServerCertificate",
                    "description": "Custom Server Certificate.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainSpecPortTlsClientCertificate:DomainSpecPortTlsClientCertificate": {
            "properties": {
                "secretLink": {
                    "type": "string",
                    "description": "Full link to a TLS secret.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainSpecPortTlsServerCertificate:DomainSpecPortTlsServerCertificate": {
            "properties": {
                "secretLink": {
                    "type": "string",
                    "description": "Full link to a TLS secret.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainStatus:DomainStatus": {
            "properties": {
                "dnsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainStatusDnsConfig:DomainStatusDnsConfig"
                    },
                    "description": "List of required DNS record entries.\n"
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainStatusEndpoint:DomainStatusEndpoint"
                    },
                    "description": "List of configured domain endpoints.\n"
                },
                "fingerprint": {
                    "type": "string"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainStatusLocation:DomainStatusLocation"
                    },
                    "description": "Contains the cloud provider name, region, and certificate status.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of Domain. Possible values: `initializing`, `ready`, `pendingDnsConfig`, `pendingCertificate`, `usedByGvc`.\n"
                },
                "warning": {
                    "type": "string",
                    "description": "Warning message.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainStatusDnsConfig:DomainStatusDnsConfig": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The host in DNS terminology refers to the domain or subdomain that the DNS record is associated with. It's essentially the name that is being queried or managed. For example, in a DNS record for `www.example.com`, `www` is a host in the domain `example.com`.\n"
                },
                "ttl": {
                    "type": "integer",
                    "description": "Time to live (TTL) is a value that signifies how long (in seconds) a DNS record should be cached by a resolver or a browser before a new request should be sent to refresh the data. Lower TTL values mean records are updated more frequently, which is beneficial for dynamic DNS configurations or during DNS migrations. Higher TTL values reduce the load on DNS servers and improve the speed of name resolution for end users by relying on cached data.\n"
                },
                "type": {
                    "type": "string",
                    "description": "The DNS record type specifies the type of data the DNS record contains. Valid values: `CNAME`, `NS`, `TXT`.\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of a DNS record contains the data the record is meant to convey, based on the type of the record.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainStatusEndpoint:DomainStatusEndpoint": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "URL of endpoint.\n"
                },
                "workloadLink": {
                    "type": "string",
                    "description": "Full link to associated workload.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainStatusLocation:DomainStatusLocation": {
            "properties": {
                "certificateStatus": {
                    "type": "string",
                    "description": "The current validity or status of the SSL/TLS certificate.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the location.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/GroupIdentityMatcher:GroupIdentityMatcher": {
            "properties": {
                "expression": {
                    "type": "string",
                    "description": "Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful for managing the grouping of users logged in with SAML providers.\n"
                },
                "language": {
                    "type": "string",
                    "description": "Language of the expression. Either `jmespath` or `javascript`. Default: `jmespath`.\n"
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "cpln:index/GroupMemberQuery:GroupMemberQuery": {
            "properties": {
                "fetch": {
                    "type": "string",
                    "description": "Type of fetch. Specify either: `links` or `items`. Default: `items`.\n"
                },
                "spec": {
                    "$ref": "#/types/cpln:index/GroupMemberQuerySpec:GroupMemberQuerySpec"
                }
            },
            "type": "object"
        },
        "cpln:index/GroupMemberQuerySpec:GroupMemberQuerySpec": {
            "properties": {
                "match": {
                    "type": "string",
                    "description": "Type of match. Available values: `all`, `any`, `none`. Default: `all`.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/GroupMemberQuerySpecTerm:GroupMemberQuerySpecTerm"
                    },
                    "description": "Terms can only contain one of the following attributes: `property`, `rel`, `tag`.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/GroupMemberQuerySpecTerm:GroupMemberQuerySpecTerm": {
            "properties": {
                "op": {
                    "type": "string",
                    "description": "Type of query operation. Available values: `=`, `\u003e`, `\u003e=`, `\u003c`, `\u003c=`, `!=`, `exists`, `!exists`. Default: `=`.\n"
                },
                "property": {
                    "type": "string",
                    "description": "Property to use for query evaluation.\n"
                },
                "rel": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "Tag key to use for query evaluation.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Testing value for query evaluation.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/GvcControlplaneTracing:GvcControlplaneTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of custom tags.\n"
                },
                "sampling": {
                    "type": "number",
                    "description": "Determines what percentage of requests should be traced.\n"
                }
            },
            "type": "object",
            "required": [
                "sampling"
            ]
        },
        "cpln:index/GvcLightstepTracing:GvcLightstepTracing": {
            "properties": {
                "credentials": {
                    "type": "string",
                    "description": "Full link to referenced Opaque Secret.\n"
                },
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of custom tags.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.\n"
                },
                "sampling": {
                    "type": "number",
                    "description": "Determines what percentage of requests should be traced.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/GvcLoadBalancer:GvcLoadBalancer": {
            "properties": {
                "dedicated": {
                    "type": "boolean",
                    "description": "Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.\n"
                },
                "redirect": {
                    "$ref": "#/types/cpln:index/GvcLoadBalancerRedirect:GvcLoadBalancerRedirect",
                    "description": "Specify the url to be redirected to for different http status codes.\n"
                },
                "trustedProxies": {
                    "type": "integer",
                    "description": "Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/GvcLoadBalancerRedirect:GvcLoadBalancerRedirect": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "class": {
                    "$ref": "#/types/cpln:index/GvcLoadBalancerRedirectClass:GvcLoadBalancerRedirectClass",
                    "description": "Specify the redirect url for all status codes in a class.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/GvcLoadBalancerRedirectClass:GvcLoadBalancerRedirectClass": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "status5xx": {
                    "type": "string",
                    "description": "Specify the redirect url for any 500 level status code.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/GvcOtelTracing:GvcOtelTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of custom tags.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.\n"
                },
                "sampling": {
                    "type": "number",
                    "description": "Determines what percentage of requests should be traced.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/GvcSidecar:GvcSidecar": {
            "properties": {
                "envoy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "envoy"
            ]
        },
        "cpln:index/IdentityAwsAccessPolicy:IdentityAwsAccessPolicy": {
            "properties": {
                "cloudAccountLink": {
                    "type": "string",
                    "description": "Full link to referenced cloud account.\n"
                },
                "policyRefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of policies.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Role name.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudAccountLink"
            ]
        },
        "cpln:index/IdentityAzureAccessPolicy:IdentityAzureAccessPolicy": {
            "properties": {
                "cloudAccountLink": {
                    "type": "string",
                    "description": "Full link to referenced cloud account.\n"
                },
                "roleAssignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityAzureAccessPolicyRoleAssignment:IdentityAzureAccessPolicyRoleAssignment"
                    },
                    "description": "The process of assigning specific roles or permissions to an entity, such as a user or a service principal, within the system.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudAccountLink"
            ]
        },
        "cpln:index/IdentityAzureAccessPolicyRoleAssignment:IdentityAzureAccessPolicyRoleAssignment": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of assigned roles.\n"
                },
                "scope": {
                    "type": "string",
                    "description": "Scope of roles.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/IdentityGcpAccessPolicy:IdentityGcpAccessPolicy": {
            "properties": {
                "bindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityGcpAccessPolicyBinding:IdentityGcpAccessPolicyBinding"
                    },
                    "description": "The association or connection between a particular identity, such as a user or a group, and a set of permissions or roles within the system.\n"
                },
                "cloudAccountLink": {
                    "type": "string",
                    "description": "Full link to referenced cloud account.\n"
                },
                "scopes": {
                    "type": "string",
                    "description": "Comma delimited list of GCP scope URLs.\n"
                },
                "serviceAccount": {
                    "type": "string",
                    "description": "Name of existing GCP service account.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudAccountLink"
            ]
        },
        "cpln:index/IdentityGcpAccessPolicyBinding:IdentityGcpAccessPolicyBinding": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "resource": {
                    "type": "string",
                    "description": "Name of resource for binding.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allowed roles.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/IdentityNativeNetworkResource:IdentityNativeNetworkResource": {
            "properties": {
                "awsPrivateLink": {
                    "$ref": "#/types/cpln:index/IdentityNativeNetworkResourceAwsPrivateLink:IdentityNativeNetworkResourceAwsPrivateLink",
                    "description": "A feature provided by AWS that enables private connectivity between private VPCs and compute running at Control Plane without traversing the public internet.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully qualified domain name.\n"
                },
                "gcpServiceConnect": {
                    "$ref": "#/types/cpln:index/IdentityNativeNetworkResourceGcpServiceConnect:IdentityNativeNetworkResourceGcpServiceConnect",
                    "description": "Capability provided by GCP that allows private communication between private VPC networks and compute running at Control Plane.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Native Network Resource.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Ports to expose. At least one port is required.\n"
                }
            },
            "type": "object",
            "required": [
                "fqdn",
                "name",
                "ports"
            ]
        },
        "cpln:index/IdentityNativeNetworkResourceAwsPrivateLink:IdentityNativeNetworkResourceAwsPrivateLink": {
            "properties": {
                "endpointServiceName": {
                    "type": "string",
                    "description": "Endpoint service name.\n"
                }
            },
            "type": "object",
            "required": [
                "endpointServiceName"
            ]
        },
        "cpln:index/IdentityNativeNetworkResourceGcpServiceConnect:IdentityNativeNetworkResourceGcpServiceConnect": {
            "properties": {
                "targetService": {
                    "type": "string",
                    "description": "Target service name.\n"
                }
            },
            "type": "object",
            "required": [
                "targetService"
            ]
        },
        "cpln:index/IdentityNetworkResource:IdentityNetworkResource": {
            "properties": {
                "agentLink": {
                    "type": "string",
                    "description": "Full link to referenced Agent.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully qualified domain name.\n"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of IP addresses.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Network Resource.\n"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Ports to expose.\n"
                },
                "resolverIp": {
                    "type": "string",
                    "description": "Resolver IP.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "ports"
            ]
        },
        "cpln:index/IdentityNgsAccessPolicy:IdentityNgsAccessPolicy": {
            "properties": {
                "cloudAccountLink": {
                    "type": "string",
                    "description": "Full link to referenced cloud account.\n"
                },
                "data": {
                    "type": "integer",
                    "description": "Max number of bytes a connection can send. Default: -1\n"
                },
                "payload": {
                    "type": "integer",
                    "description": "Max message payload. Default: -1\n"
                },
                "pub": {
                    "$ref": "#/types/cpln:index/IdentityNgsAccessPolicyPub:IdentityNgsAccessPolicyPub",
                    "description": "Pub Permission.\n"
                },
                "resp": {
                    "$ref": "#/types/cpln:index/IdentityNgsAccessPolicyResp:IdentityNgsAccessPolicyResp",
                    "description": "Reponses.\n"
                },
                "sub": {
                    "$ref": "#/types/cpln:index/IdentityNgsAccessPolicySub:IdentityNgsAccessPolicySub",
                    "description": "Sub Permission.\n"
                },
                "subs": {
                    "type": "integer",
                    "description": "Max number of subscriptions per connection. Default: -1\n"
                }
            },
            "type": "object",
            "required": [
                "cloudAccountLink"
            ]
        },
        "cpln:index/IdentityNgsAccessPolicyPub:IdentityNgsAccessPolicyPub": {
            "properties": {
                "allows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allow subjects.\n"
                },
                "denies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of deny subjects.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/IdentityNgsAccessPolicyResp:IdentityNgsAccessPolicyResp": {
            "properties": {
                "max": {
                    "type": "integer",
                    "description": "Number of responses allowed on the replyTo subject, -1 means no limit. Default: -1\n"
                },
                "ttl": {
                    "type": "string",
                    "description": "Deadline to send replies on the replyTo subject [#ms(millis) | #s(econds) | m(inutes) | h(ours)]. -1 means no restriction.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/IdentityNgsAccessPolicySub:IdentityNgsAccessPolicySub": {
            "properties": {
                "allows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of allow subjects.\n"
                },
                "denies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of deny subjects.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/IpSetLocation:IpSetLocation": {
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The self link of a location.\n"
                },
                "retentionPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "retentionPolicy"
            ]
        },
        "cpln:index/IpSetStatus:IpSetStatus": {
            "properties": {
                "error": {
                    "type": "string"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IpSetStatusIpAddress:IpSetStatusIpAddress"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "error",
                        "ipAddresses"
                    ]
                }
            }
        },
        "cpln:index/IpSetStatusIpAddress:IpSetStatusIpAddress": {
            "properties": {
                "created": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "created",
                        "id",
                        "ip",
                        "name",
                        "state"
                    ]
                }
            }
        },
        "cpln:index/LocationGeo:LocationGeo": {
            "properties": {
                "city": {
                    "type": "string",
                    "description": "City.\n"
                },
                "continent": {
                    "type": "string",
                    "description": "Continent.\n"
                },
                "country": {
                    "type": "string",
                    "description": "Country.\n"
                },
                "lat": {
                    "type": "number",
                    "description": "Latitude.\n"
                },
                "lon": {
                    "type": "number",
                    "description": "Longitude.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOns:Mk8sAddOns": {
            "properties": {
                "awsEcr": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsAwsEcr:Mk8sAddOnsAwsEcr"
                },
                "awsEfs": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsAwsEfs:Mk8sAddOnsAwsEfs"
                },
                "awsElb": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsAwsElb:Mk8sAddOnsAwsElb"
                },
                "awsWorkloadIdentity": {
                    "type": "boolean"
                },
                "azureAcr": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsAzureAcr:Mk8sAddOnsAzureAcr"
                },
                "azureWorkloadIdentity": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsAzureWorkloadIdentity:Mk8sAddOnsAzureWorkloadIdentity"
                },
                "dashboard": {
                    "type": "boolean"
                },
                "localPathStorage": {
                    "type": "boolean"
                },
                "logs": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsLogs:Mk8sAddOnsLogs"
                },
                "metrics": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsMetrics:Mk8sAddOnsMetrics"
                },
                "nvidia": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsNvidia:Mk8sAddOnsNvidia"
                },
                "sysbox": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsAwsEcr:Mk8sAddOnsAwsEcr": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Role to use when authorizing ECR pulls. Optional on AWS, in which case it will use the instance role to pull.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsAwsEfs:Mk8sAddOnsAwsEfs": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Use this role for EFS interaction.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsAwsElb:Mk8sAddOnsAwsElb": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Role to use when authorizing calls to EC2 ELB. Optional on AWS, when not provided it will create the recommended role.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsAzureAcr:Mk8sAddOnsAzureAcr": {
            "properties": {
                "clientId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId"
            ]
        },
        "cpln:index/Mk8sAddOnsAzureWorkloadIdentity:Mk8sAddOnsAzureWorkloadIdentity": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "tenantId": {
                    "type": "string",
                    "description": "Tenant ID to use for workload identity.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsLogs:Mk8sAddOnsLogs": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "auditEnabled": {
                    "type": "boolean",
                    "description": "Collect k8s audit log as log events.\n"
                },
                "excludeNamespaces": {
                    "type": "string"
                },
                "includeNamespaces": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsMetrics:Mk8sAddOnsMetrics": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "apiServer": {
                    "type": "boolean",
                    "description": "Enable scraping apiserver stats.\n"
                },
                "cadvisor": {
                    "type": "boolean",
                    "description": "Enable CNI-level container stats.\n"
                },
                "coreDns": {
                    "type": "boolean",
                    "description": "Enable scraping of core-dns service.\n"
                },
                "kubeState": {
                    "type": "boolean",
                    "description": "Enable kube-state metrics.\n"
                },
                "kubelet": {
                    "type": "boolean",
                    "description": "Enable scraping kubelet stats.\n"
                },
                "nodeExporter": {
                    "type": "boolean",
                    "description": "Enable collecting node-level stats (disk, network, filesystem, etc).\n"
                },
                "scrapeAnnotated": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsMetricsScrapeAnnotated:Mk8sAddOnsMetricsScrapeAnnotated",
                    "description": "Scrape pods annotated with prometheus.io/scrape=true.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsMetricsScrapeAnnotated:Mk8sAddOnsMetricsScrapeAnnotated": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "excludeNamespaces": {
                    "type": "string"
                },
                "includeNamespaces": {
                    "type": "string"
                },
                "intervalSeconds": {
                    "type": "integer"
                },
                "retainLabels": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsNvidia:Mk8sAddOnsNvidia": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "taintGpuNodes": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAwsProvider:Mk8sAwsProvider": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProviderAutoscaler:Mk8sAwsProviderAutoscaler"
                },
                "awsTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra tags to attach to all created objects.\n"
                },
                "deployRoleArn": {
                    "type": "string",
                    "description": "Control Plane will set up the cluster by assuming this role.\n"
                },
                "deployRoleChains": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sAwsProviderDeployRoleChain:Mk8sAwsProviderDeployRoleChain"
                    }
                },
                "diskEncryptionKeyArn": {
                    "type": "string",
                    "description": "KMS key used to encrypt volumes. Supports SSM.\n"
                },
                "extraNodePolicies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "image": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProviderImage:Mk8sAwsProviderImage",
                    "description": "Default image for all nodes.\n"
                },
                "keyPair": {
                    "type": "string",
                    "description": "Name of keyPair. Supports SSM\n"
                },
                "networking": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProviderNetworking:Mk8sAwsProviderNetworking"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sAwsProviderNodePool:Mk8sAwsProviderNodePool"
                    },
                    "description": "List of node pools.\n"
                },
                "preInstallScript": {
                    "type": "string",
                    "description": "Optional shell script that will be run before K8s is installed. Supports SSM.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region where the cluster nodes will live.\n"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.\n"
                },
                "skipCreateRoles": {
                    "type": "boolean",
                    "description": "If true, Control Plane will not create any roles.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc where nodes will be deployed. Supports SSM.\n"
                }
            },
            "type": "object",
            "required": [
                "deployRoleArn",
                "image",
                "networking",
                "region",
                "vpcId"
            ]
        },
        "cpln:index/Mk8sAwsProviderAutoscaler:Mk8sAwsProviderAutoscaler": {
            "properties": {
                "expanders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unneededTime": {
                    "type": "string"
                },
                "unreadyTime": {
                    "type": "string"
                },
                "utilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "expanders"
            ]
        },
        "cpln:index/Mk8sAwsProviderDeployRoleChain:Mk8sAwsProviderDeployRoleChain": {
            "properties": {
                "externalId": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                },
                "sessionNamePrefix": {
                    "type": "string",
                    "description": "Control Plane will append random.\n"
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "cpln:index/Mk8sAwsProviderImage:Mk8sAwsProviderImage": {
            "properties": {
                "exact": {
                    "type": "string",
                    "description": "Support SSM.\n"
                },
                "recommended": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAwsProviderNetworking:Mk8sAwsProviderNetworking": {
            "properties": {
                "podNetwork": {
                    "type": "string",
                    "description": "The CIDR of the pod network.\n"
                },
                "serviceNetwork": {
                    "type": "string",
                    "description": "The CIDR of the service network.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAwsProviderNodePool:Mk8sAwsProviderNodePool": {
            "properties": {
                "bootDiskSize": {
                    "type": "integer",
                    "description": "Size in GB.\n"
                },
                "extraSecurityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "instanceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "maxSize": {
                    "type": "integer"
                },
                "minSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "onDemandBaseCapacity": {
                    "type": "integer"
                },
                "onDemandPercentageAboveBaseCapacity": {
                    "type": "integer"
                },
                "overrideImage": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProviderNodePoolOverrideImage:Mk8sAwsProviderNodePoolOverrideImage",
                    "description": "Default image for all nodes.\n"
                },
                "spotAllocationStrategy": {
                    "type": "string"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sAwsProviderNodePoolTaint:Mk8sAwsProviderNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "instanceTypes",
                "name",
                "overrideImage",
                "subnetIds"
            ]
        },
        "cpln:index/Mk8sAwsProviderNodePoolOverrideImage:Mk8sAwsProviderNodePoolOverrideImage": {
            "properties": {
                "exact": {
                    "type": "string",
                    "description": "Support SSM.\n"
                },
                "recommended": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAwsProviderNodePoolTaint:Mk8sAwsProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sDigitalOceanProvider:Mk8sDigitalOceanProvider": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/cpln:index/Mk8sDigitalOceanProviderAutoscaler:Mk8sDigitalOceanProviderAutoscaler"
                },
                "digitalOceanTags": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra tags to attach to droplets.\n"
                },
                "extraSshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra SSH keys to provision for user root that are not registered in the DigitalOcean.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Default image for all nodes.\n"
                },
                "networking": {
                    "$ref": "#/types/cpln:index/Mk8sDigitalOceanProviderNetworking:Mk8sDigitalOceanProviderNetworking"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sDigitalOceanProviderNodePool:Mk8sDigitalOceanProviderNodePool"
                    },
                    "description": "List of node pools.\n"
                },
                "preInstallScript": {
                    "type": "string",
                    "description": "Optional shell script that will be run before K8s is installed. Supports SSM.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region to deploy nodes to.\n"
                },
                "reservedIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Optional set of IPs to assign as extra IPs for nodes of the cluster.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "SSH key name for accessing deployed nodes.\n"
                },
                "tokenSecretLink": {
                    "type": "string",
                    "description": "Link to a secret holding personal access token.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "ID of the Hetzner network to deploy nodes to.\n"
                }
            },
            "type": "object",
            "required": [
                "image",
                "networking",
                "region",
                "sshKeys",
                "tokenSecretLink",
                "vpcId"
            ]
        },
        "cpln:index/Mk8sDigitalOceanProviderAutoscaler:Mk8sDigitalOceanProviderAutoscaler": {
            "properties": {
                "expanders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unneededTime": {
                    "type": "string"
                },
                "unreadyTime": {
                    "type": "string"
                },
                "utilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "expanders"
            ]
        },
        "cpln:index/Mk8sDigitalOceanProviderNetworking:Mk8sDigitalOceanProviderNetworking": {
            "properties": {
                "podNetwork": {
                    "type": "string",
                    "description": "The CIDR of the pod network.\n"
                },
                "serviceNetwork": {
                    "type": "string",
                    "description": "The CIDR of the service network.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sDigitalOceanProviderNodePool:Mk8sDigitalOceanProviderNodePool": {
            "properties": {
                "dropletSize": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "maxSize": {
                    "type": "integer"
                },
                "minSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "overrideImage": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sDigitalOceanProviderNodePoolTaint:Mk8sDigitalOceanProviderNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "dropletSize",
                "name"
            ]
        },
        "cpln:index/Mk8sDigitalOceanProviderNodePoolTaint:Mk8sDigitalOceanProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sEphemeralProvider:Mk8sEphemeralProvider": {
            "properties": {
                "location": {
                    "type": "string",
                    "description": "Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.\n"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sEphemeralProviderNodePool:Mk8sEphemeralProviderNodePool"
                    },
                    "description": "List of node pools.\n"
                }
            },
            "type": "object",
            "required": [
                "location"
            ]
        },
        "cpln:index/Mk8sEphemeralProviderNodePool:Mk8sEphemeralProviderNodePool": {
            "properties": {
                "arch": {
                    "type": "string",
                    "description": "CPU architecture of the nodes.\n"
                },
                "count": {
                    "type": "integer",
                    "description": "Number of nodes to deploy.\n"
                },
                "cpu": {
                    "type": "string",
                    "description": "Allocated CPU.\n"
                },
                "flavor": {
                    "type": "string",
                    "description": "Linux distro to use for ephemeral nodes.\n"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "memory": {
                    "type": "string",
                    "description": "Allocated memory.\n"
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sEphemeralProviderNodePoolTaint:Mk8sEphemeralProviderNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "arch",
                "count",
                "cpu",
                "flavor",
                "memory",
                "name"
            ]
        },
        "cpln:index/Mk8sEphemeralProviderNodePoolTaint:Mk8sEphemeralProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sFirewall:Mk8sFirewall": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "sourceCidr": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourceCidr"
            ]
        },
        "cpln:index/Mk8sGenericProvider:Mk8sGenericProvider": {
            "properties": {
                "location": {
                    "type": "string",
                    "description": "Control Plane location that will host the K8s components. Prefer one that is closest to where the nodes are running.\n"
                },
                "networking": {
                    "$ref": "#/types/cpln:index/Mk8sGenericProviderNetworking:Mk8sGenericProviderNetworking"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sGenericProviderNodePool:Mk8sGenericProviderNodePool"
                    },
                    "description": "List of node pools.\n"
                }
            },
            "type": "object",
            "required": [
                "location",
                "networking"
            ]
        },
        "cpln:index/Mk8sGenericProviderNetworking:Mk8sGenericProviderNetworking": {
            "properties": {
                "podNetwork": {
                    "type": "string",
                    "description": "The CIDR of the pod network.\n"
                },
                "serviceNetwork": {
                    "type": "string",
                    "description": "The CIDR of the service network.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sGenericProviderNodePool:Mk8sGenericProviderNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sGenericProviderNodePoolTaint:Mk8sGenericProviderNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "cpln:index/Mk8sGenericProviderNodePoolTaint:Mk8sGenericProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sHetznerProvider:Mk8sHetznerProvider": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/cpln:index/Mk8sHetznerProviderAutoscaler:Mk8sHetznerProviderAutoscaler"
                },
                "dedicatedServerNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sHetznerProviderDedicatedServerNodePool:Mk8sHetznerProviderDedicatedServerNodePool"
                    },
                    "description": "Node pools that can configure dedicated Hetzner servers.\n"
                },
                "firewallId": {
                    "type": "string",
                    "description": "Optional firewall rule to attach to all nodes.\n"
                },
                "floatingIpSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "If supplied, nodes will get assigned a random floating ip matching the selector.\n"
                },
                "hetznerLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra labels to attach to servers.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Default image for all nodes.\n"
                },
                "networkId": {
                    "type": "string",
                    "description": "ID of the Hetzner network to deploy nodes to.\n"
                },
                "networking": {
                    "$ref": "#/types/cpln:index/Mk8sHetznerProviderNetworking:Mk8sHetznerProviderNetworking"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sHetznerProviderNodePool:Mk8sHetznerProviderNodePool"
                    },
                    "description": "List of node pools.\n"
                },
                "preInstallScript": {
                    "type": "string",
                    "description": "Optional shell script that will be run before K8s is installed. Supports SSM.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Hetzner region to deploy nodes to.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "SSH key name for accessing deployed nodes.\n"
                },
                "tokenSecretLink": {
                    "type": "string",
                    "description": "Link to a secret holding Hetzner access key.\n"
                }
            },
            "type": "object",
            "required": [
                "networkId",
                "networking",
                "region",
                "tokenSecretLink"
            ]
        },
        "cpln:index/Mk8sHetznerProviderAutoscaler:Mk8sHetznerProviderAutoscaler": {
            "properties": {
                "expanders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unneededTime": {
                    "type": "string"
                },
                "unreadyTime": {
                    "type": "string"
                },
                "utilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "expanders"
            ]
        },
        "cpln:index/Mk8sHetznerProviderDedicatedServerNodePool:Mk8sHetznerProviderDedicatedServerNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sHetznerProviderDedicatedServerNodePoolTaint:Mk8sHetznerProviderDedicatedServerNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "cpln:index/Mk8sHetznerProviderDedicatedServerNodePoolTaint:Mk8sHetznerProviderDedicatedServerNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sHetznerProviderNetworking:Mk8sHetznerProviderNetworking": {
            "properties": {
                "podNetwork": {
                    "type": "string",
                    "description": "The CIDR of the pod network.\n"
                },
                "serviceNetwork": {
                    "type": "string",
                    "description": "The CIDR of the service network.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sHetznerProviderNodePool:Mk8sHetznerProviderNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "maxSize": {
                    "type": "integer"
                },
                "minSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "overrideImage": {
                    "type": "string"
                },
                "serverType": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sHetznerProviderNodePoolTaint:Mk8sHetznerProviderNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "serverType"
            ]
        },
        "cpln:index/Mk8sHetznerProviderNodePoolTaint:Mk8sHetznerProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sLambdalabsProvider:Mk8sLambdalabsProvider": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/cpln:index/Mk8sLambdalabsProviderAutoscaler:Mk8sLambdalabsProviderAutoscaler"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sLambdalabsProviderNodePool:Mk8sLambdalabsProviderNodePool"
                    },
                    "description": "List of node pools.\n"
                },
                "preInstallScript": {
                    "type": "string",
                    "description": "Optional shell script that will be run before K8s is installed. Supports SSM.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region where the cluster nodes will live.\n"
                },
                "sshKey": {
                    "type": "string",
                    "description": "SSH key name for accessing deployed nodes.\n"
                },
                "tokenSecretLink": {
                    "type": "string",
                    "description": "Link to a secret holding Lambdalabs access key.\n"
                },
                "unmanagedNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sLambdalabsProviderUnmanagedNodePool:Mk8sLambdalabsProviderUnmanagedNodePool"
                    }
                }
            },
            "type": "object",
            "required": [
                "region",
                "sshKey",
                "tokenSecretLink"
            ]
        },
        "cpln:index/Mk8sLambdalabsProviderAutoscaler:Mk8sLambdalabsProviderAutoscaler": {
            "properties": {
                "expanders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unneededTime": {
                    "type": "string"
                },
                "unreadyTime": {
                    "type": "string"
                },
                "utilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "expanders"
            ]
        },
        "cpln:index/Mk8sLambdalabsProviderNodePool:Mk8sLambdalabsProviderNodePool": {
            "properties": {
                "instanceType": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "maxSize": {
                    "type": "integer"
                },
                "minSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sLambdalabsProviderNodePoolTaint:Mk8sLambdalabsProviderNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "instanceType",
                "name"
            ]
        },
        "cpln:index/Mk8sLambdalabsProviderNodePoolTaint:Mk8sLambdalabsProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sLambdalabsProviderUnmanagedNodePool:Mk8sLambdalabsProviderUnmanagedNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sLambdalabsProviderUnmanagedNodePoolTaint:Mk8sLambdalabsProviderUnmanagedNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "cpln:index/Mk8sLambdalabsProviderUnmanagedNodePoolTaint:Mk8sLambdalabsProviderUnmanagedNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sLinodeProvider:Mk8sLinodeProvider": {
            "properties": {
                "authorizedKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "authorizedUsers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "autoscaler": {
                    "$ref": "#/types/cpln:index/Mk8sLinodeProviderAutoscaler:Mk8sLinodeProviderAutoscaler"
                },
                "firewallId": {
                    "type": "string",
                    "description": "Optional firewall rule to attach to all nodes.\n"
                },
                "image": {
                    "type": "string",
                    "description": "Default image for all nodes.\n"
                },
                "networking": {
                    "$ref": "#/types/cpln:index/Mk8sLinodeProviderNetworking:Mk8sLinodeProviderNetworking"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sLinodeProviderNodePool:Mk8sLinodeProviderNodePool"
                    },
                    "description": "List of node pools.\n"
                },
                "preInstallScript": {
                    "type": "string",
                    "description": "Optional shell script that will be run before K8s is installed. Supports SSM.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region where the cluster nodes will live.\n"
                },
                "tokenSecretLink": {
                    "type": "string",
                    "description": "Link to a secret holding Linode access key.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "The vpc where nodes will be deployed. Supports SSM.\n"
                }
            },
            "type": "object",
            "required": [
                "image",
                "networking",
                "region",
                "tokenSecretLink",
                "vpcId"
            ]
        },
        "cpln:index/Mk8sLinodeProviderAutoscaler:Mk8sLinodeProviderAutoscaler": {
            "properties": {
                "expanders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unneededTime": {
                    "type": "string"
                },
                "unreadyTime": {
                    "type": "string"
                },
                "utilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "expanders"
            ]
        },
        "cpln:index/Mk8sLinodeProviderNetworking:Mk8sLinodeProviderNetworking": {
            "properties": {
                "podNetwork": {
                    "type": "string",
                    "description": "The CIDR of the pod network.\n"
                },
                "serviceNetwork": {
                    "type": "string",
                    "description": "The CIDR of the service network.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sLinodeProviderNodePool:Mk8sLinodeProviderNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "maxSize": {
                    "type": "integer"
                },
                "minSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "overrideImage": {
                    "type": "string"
                },
                "serverType": {
                    "type": "string"
                },
                "subnetId": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sLinodeProviderNodePoolTaint:Mk8sLinodeProviderNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "serverType",
                "subnetId"
            ]
        },
        "cpln:index/Mk8sLinodeProviderNodePoolTaint:Mk8sLinodeProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sOblivusProvider:Mk8sOblivusProvider": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/cpln:index/Mk8sOblivusProviderAutoscaler:Mk8sOblivusProviderAutoscaler"
                },
                "datacenter": {
                    "type": "string"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sOblivusProviderNodePool:Mk8sOblivusProviderNodePool"
                    },
                    "description": "List of node pools.\n"
                },
                "preInstallScript": {
                    "type": "string",
                    "description": "Optional shell script that will be run before K8s is installed. Supports SSM.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tokenSecretLink": {
                    "type": "string",
                    "description": "Link to a secret holding Oblivus access key.\n"
                },
                "unmanagedNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sOblivusProviderUnmanagedNodePool:Mk8sOblivusProviderUnmanagedNodePool"
                    }
                }
            },
            "type": "object",
            "required": [
                "datacenter",
                "tokenSecretLink"
            ]
        },
        "cpln:index/Mk8sOblivusProviderAutoscaler:Mk8sOblivusProviderAutoscaler": {
            "properties": {
                "expanders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unneededTime": {
                    "type": "string"
                },
                "unreadyTime": {
                    "type": "string"
                },
                "utilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "expanders"
            ]
        },
        "cpln:index/Mk8sOblivusProviderNodePool:Mk8sOblivusProviderNodePool": {
            "properties": {
                "flavor": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "maxSize": {
                    "type": "integer"
                },
                "minSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sOblivusProviderNodePoolTaint:Mk8sOblivusProviderNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "flavor",
                "name"
            ]
        },
        "cpln:index/Mk8sOblivusProviderNodePoolTaint:Mk8sOblivusProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sOblivusProviderUnmanagedNodePool:Mk8sOblivusProviderUnmanagedNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sOblivusProviderUnmanagedNodePoolTaint:Mk8sOblivusProviderUnmanagedNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "cpln:index/Mk8sOblivusProviderUnmanagedNodePoolTaint:Mk8sOblivusProviderUnmanagedNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sPaperspaceProvider:Mk8sPaperspaceProvider": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/cpln:index/Mk8sPaperspaceProviderAutoscaler:Mk8sPaperspaceProviderAutoscaler"
                },
                "networkId": {
                    "type": "string"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sPaperspaceProviderNodePool:Mk8sPaperspaceProviderNodePool"
                    },
                    "description": "List of node pools.\n"
                },
                "preInstallScript": {
                    "type": "string",
                    "description": "Optional shell script that will be run before K8s is installed. Supports SSM.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region where the cluster nodes will live.\n"
                },
                "sharedDrives": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "tokenSecretLink": {
                    "type": "string",
                    "description": "Link to a secret holding Paperspace access key.\n"
                },
                "unmanagedNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sPaperspaceProviderUnmanagedNodePool:Mk8sPaperspaceProviderUnmanagedNodePool"
                    }
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "networkId",
                "region",
                "tokenSecretLink"
            ]
        },
        "cpln:index/Mk8sPaperspaceProviderAutoscaler:Mk8sPaperspaceProviderAutoscaler": {
            "properties": {
                "expanders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unneededTime": {
                    "type": "string"
                },
                "unreadyTime": {
                    "type": "string"
                },
                "utilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "expanders"
            ]
        },
        "cpln:index/Mk8sPaperspaceProviderNodePool:Mk8sPaperspaceProviderNodePool": {
            "properties": {
                "bootDiskSize": {
                    "type": "integer"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "machineType": {
                    "type": "string"
                },
                "maxSize": {
                    "type": "integer"
                },
                "minSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "publicIpType": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sPaperspaceProviderNodePoolTaint:Mk8sPaperspaceProviderNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "machineType",
                "name",
                "publicIpType"
            ]
        },
        "cpln:index/Mk8sPaperspaceProviderNodePoolTaint:Mk8sPaperspaceProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sPaperspaceProviderUnmanagedNodePool:Mk8sPaperspaceProviderUnmanagedNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sPaperspaceProviderUnmanagedNodePoolTaint:Mk8sPaperspaceProviderUnmanagedNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "cpln:index/Mk8sPaperspaceProviderUnmanagedNodePoolTaint:Mk8sPaperspaceProviderUnmanagedNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sStatus:Mk8sStatus": {
            "properties": {
                "addOns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOn:Mk8sStatusAddOn"
                    }
                },
                "homeLocation": {
                    "type": "string"
                },
                "oidcProviderUrl": {
                    "type": "string"
                },
                "serverUrl": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addOns",
                        "homeLocation",
                        "oidcProviderUrl",
                        "serverUrl"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOn:Mk8sStatusAddOn": {
            "properties": {
                "awsEcrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnAwsEcr:Mk8sStatusAddOnAwsEcr"
                    }
                },
                "awsEfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnAwsEf:Mk8sStatusAddOnAwsEf"
                    }
                },
                "awsElbs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnAwsElb:Mk8sStatusAddOnAwsElb"
                    }
                },
                "awsWorkloadIdentities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnAwsWorkloadIdentity:Mk8sStatusAddOnAwsWorkloadIdentity"
                    }
                },
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnDashboard:Mk8sStatusAddOnDashboard"
                    }
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnLog:Mk8sStatusAddOnLog"
                    }
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnMetric:Mk8sStatusAddOnMetric"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "awsEcrs",
                        "awsEfs",
                        "awsElbs",
                        "awsWorkloadIdentities",
                        "dashboards",
                        "logs",
                        "metrics"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnAwsEcr:Mk8sStatusAddOnAwsEcr": {
            "properties": {
                "trustPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "trustPolicy"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnAwsEf:Mk8sStatusAddOnAwsEf": {
            "properties": {
                "trustPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "trustPolicy"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnAwsElb:Mk8sStatusAddOnAwsElb": {
            "properties": {
                "trustPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "trustPolicy"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnAwsWorkloadIdentity:Mk8sStatusAddOnAwsWorkloadIdentity": {
            "properties": {
                "oidcProviderConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig:Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig"
                    }
                },
                "trustPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "oidcProviderConfigs",
                        "trustPolicy"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig:Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig": {
            "properties": {
                "audience": {
                    "type": "string"
                },
                "providerUrl": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "audience",
                        "providerUrl"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnDashboard:Mk8sStatusAddOnDashboard": {
            "properties": {
                "url": {
                    "type": "string",
                    "description": "Access to dashboard.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "url"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnLog:Mk8sStatusAddOnLog": {
            "properties": {
                "lokiAddress": {
                    "type": "string",
                    "description": "Loki endpoint to query logs from.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lokiAddress"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnMetric:Mk8sStatusAddOnMetric": {
            "properties": {
                "prometheusEndpoint": {
                    "type": "string"
                },
                "remoteWriteConfig": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "prometheusEndpoint",
                        "remoteWriteConfig"
                    ]
                }
            }
        },
        "cpln:index/Mk8sTritonProvider:Mk8sTritonProvider": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/cpln:index/Mk8sTritonProviderAutoscaler:Mk8sTritonProviderAutoscaler"
                },
                "connection": {
                    "$ref": "#/types/cpln:index/Mk8sTritonProviderConnection:Mk8sTritonProviderConnection"
                },
                "firewallEnabled": {
                    "type": "boolean",
                    "description": "Enable firewall for the instances deployed.\n"
                },
                "imageId": {
                    "type": "string",
                    "description": "Default image for all nodes.\n"
                },
                "location": {
                    "type": "string",
                    "description": "Control Plane location that will host the K8s components. Prefer one that is closest to the Triton datacenter.\n"
                },
                "networking": {
                    "$ref": "#/types/cpln:index/Mk8sTritonProviderNetworking:Mk8sTritonProviderNetworking"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sTritonProviderNodePool:Mk8sTritonProviderNodePool"
                    },
                    "description": "List of node pools.\n"
                },
                "preInstallScript": {
                    "type": "string",
                    "description": "Optional shell script that will be run before K8s is installed. Supports SSM.\n"
                },
                "privateNetworkId": {
                    "type": "string",
                    "description": "ID of the private Fabric/Network.\n"
                },
                "sshKeys": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Extra SSH keys to provision for user root.\n"
                }
            },
            "type": "object",
            "required": [
                "connection",
                "imageId",
                "location",
                "networking",
                "privateNetworkId"
            ]
        },
        "cpln:index/Mk8sTritonProviderAutoscaler:Mk8sTritonProviderAutoscaler": {
            "properties": {
                "expanders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unneededTime": {
                    "type": "string"
                },
                "unreadyTime": {
                    "type": "string"
                },
                "utilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "expanders"
            ]
        },
        "cpln:index/Mk8sTritonProviderConnection:Mk8sTritonProviderConnection": {
            "properties": {
                "account": {
                    "type": "string"
                },
                "privateKeySecretLink": {
                    "type": "string",
                    "description": "Link to a SSH or opaque secret.\n"
                },
                "url": {
                    "type": "string"
                },
                "user": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "account",
                "privateKeySecretLink",
                "url"
            ]
        },
        "cpln:index/Mk8sTritonProviderNetworking:Mk8sTritonProviderNetworking": {
            "properties": {
                "podNetwork": {
                    "type": "string",
                    "description": "The CIDR of the pod network.\n"
                },
                "serviceNetwork": {
                    "type": "string",
                    "description": "The CIDR of the service network.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sTritonProviderNodePool:Mk8sTritonProviderNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Labels to attach to nodes of a node pool.\n"
                },
                "maxSize": {
                    "type": "integer"
                },
                "minSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "overrideImageId": {
                    "type": "string"
                },
                "packageId": {
                    "type": "string"
                },
                "privateNetworkIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "More private networks to join.\n"
                },
                "publicNetworkId": {
                    "type": "string",
                    "description": "If set, machine will also get a public IP.\n"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sTritonProviderNodePoolTaint:Mk8sTritonProviderNodePoolTaint"
                    },
                    "description": "Taint for the nodes of a pool.\n"
                },
                "tritonTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Extra tags to attach to instances from a node pool.\n"
                }
            },
            "type": "object",
            "required": [
                "name",
                "packageId"
            ]
        },
        "cpln:index/Mk8sTritonProviderNodePoolTaint:Mk8sTritonProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/OrgAuthConfig:OrgAuthConfig": {
            "properties": {
                "domainAutoMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of domains which will auto-provision users when authenticating using SAML.\n"
                },
                "samlOnly": {
                    "type": "boolean",
                    "description": "Enforce SAML only authentication.\n"
                }
            },
            "type": "object",
            "required": [
                "domainAutoMembers"
            ]
        },
        "cpln:index/OrgLoggingCloudWatchLogging:OrgLoggingCloudWatchLogging": {
            "properties": {
                "credentials": {
                    "type": "string",
                    "description": "Full Link to a secret of type `opaque`.\n"
                },
                "extractFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Enable custom data extraction from log entries for enhanced querying and analysis.\n"
                },
                "groupName": {
                    "type": "string",
                    "description": "A container for log streams with common settings like retention. Used to categorize logs by application or service type.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Valid AWS region.\n"
                },
                "retentionDays": {
                    "type": "integer",
                    "description": "Length, in days, for how log data is kept before it is automatically deleted.\n"
                },
                "streamName": {
                    "type": "string",
                    "description": "A sequence of log events from the same source within a log group. Typically represents individual instances of services or applications.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "groupName",
                "region",
                "streamName"
            ]
        },
        "cpln:index/OrgLoggingCoralogixLogging:OrgLoggingCoralogixLogging": {
            "properties": {
                "app": {
                    "type": "string",
                    "description": "App name to be displayed in Coralogix dashboard.\n"
                },
                "cluster": {
                    "type": "string",
                    "description": "Coralogix cluster URI.\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Full link to referenced Opaque Secret.\n"
                },
                "subsystem": {
                    "type": "string",
                    "description": "Subsystem name to be displayed in Coralogix dashboard.\n"
                }
            },
            "type": "object",
            "required": [
                "app",
                "cluster",
                "credentials",
                "subsystem"
            ]
        },
        "cpln:index/OrgLoggingDatadogLogging:OrgLoggingDatadogLogging": {
            "properties": {
                "credentials": {
                    "type": "string",
                    "description": "Full link to referenced Opaque Secret.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Datadog host URI.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "host"
            ]
        },
        "cpln:index/OrgLoggingElasticLogging:OrgLoggingElasticLogging": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "aws": {
                    "$ref": "#/types/cpln:index/OrgLoggingElasticLoggingAws:OrgLoggingElasticLoggingAws",
                    "description": "For targeting Amazon Web Services (AWS) ElasticSearch.\n"
                },
                "elasticCloud": {
                    "$ref": "#/types/cpln:index/OrgLoggingElasticLoggingElasticCloud:OrgLoggingElasticLoggingElasticCloud",
                    "description": "For targeting Elastic Cloud.\n"
                },
                "generic": {
                    "$ref": "#/types/cpln:index/OrgLoggingElasticLoggingGeneric:OrgLoggingElasticLoggingGeneric",
                    "description": "For targeting generic Elastic Search providers.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/OrgLoggingElasticLoggingAws:OrgLoggingElasticLoggingAws": {
            "properties": {
                "credentials": {
                    "type": "string",
                    "description": "Full Link to a secret of type `aws`.\n"
                },
                "host": {
                    "type": "string",
                    "description": "A valid AWS ElasticSearch hostname (must end with es.amazonaws.com).\n"
                },
                "index": {
                    "type": "string",
                    "description": "Logging Index.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port. Default: 443\n"
                },
                "region": {
                    "type": "string",
                    "description": "Valid AWS region.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Logging Type.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "host",
                "index",
                "port",
                "region",
                "type"
            ]
        },
        "cpln:index/OrgLoggingElasticLoggingElasticCloud:OrgLoggingElasticLoggingElasticCloud": {
            "properties": {
                "cloudId": {
                    "type": "string",
                    "description": "[Cloud ID](https://www.elastic.co/guide/en/cloud/current/ec-cloud-id.html)\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Full Link to a secret of type `userpass`.\n"
                },
                "index": {
                    "type": "string",
                    "description": "Logging Index.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Logging Type.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudId",
                "credentials",
                "index",
                "type"
            ]
        },
        "cpln:index/OrgLoggingElasticLoggingGeneric:OrgLoggingElasticLoggingGeneric": {
            "properties": {
                "credentials": {
                    "type": "string",
                    "description": "Full Link to a secret of type `userpass`.\n"
                },
                "host": {
                    "type": "string",
                    "description": "A valid Elastic Search provider hostname.\n"
                },
                "index": {
                    "type": "string",
                    "description": "Logging Index.\n"
                },
                "path": {
                    "type": "string",
                    "description": "Logging path.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port. Default: 443\n"
                },
                "type": {
                    "type": "string",
                    "description": "Logging Type.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "host",
                "index",
                "path",
                "port",
                "type"
            ]
        },
        "cpln:index/OrgLoggingFluentdLogging:OrgLoggingFluentdLogging": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The hostname or IP address of a remote log storage system.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port. Default: 24224\n"
                }
            },
            "type": "object",
            "required": [
                "host"
            ]
        },
        "cpln:index/OrgLoggingLogzioLogging:OrgLoggingLogzioLogging": {
            "properties": {
                "credentials": {
                    "type": "string",
                    "description": "Full link to referenced Opaque Secret.\n"
                },
                "listenerHost": {
                    "type": "string",
                    "description": "Logzio listener host URI.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "listenerHost"
            ]
        },
        "cpln:index/OrgLoggingS3Logging:OrgLoggingS3Logging": {
            "properties": {
                "bucket": {
                    "type": "string",
                    "description": "Name of S3 bucket.\n"
                },
                "credentials": {
                    "type": "string",
                    "description": "Full link to referenced AWS Secret.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "Bucket path prefix. Default: \"/\".\n"
                },
                "region": {
                    "type": "string",
                    "description": "AWS region where bucket is located.\n"
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "credentials",
                "region"
            ]
        },
        "cpln:index/OrgLoggingStackdriverLogging:OrgLoggingStackdriverLogging": {
            "properties": {
                "credentials": {
                    "type": "string",
                    "description": "Full Link to a secret of type `opaque`.\n"
                },
                "location": {
                    "type": "string",
                    "description": "A Google Cloud Provider region.\n"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "location"
            ]
        },
        "cpln:index/OrgLoggingSyslogLogging:OrgLoggingSyslogLogging": {
            "properties": {
                "format": {
                    "type": "string",
                    "description": "Log Format. Valid values: RFC3164 or RFC5424.\n"
                },
                "host": {
                    "type": "string",
                    "description": "Hostname of Syslog Endpoint.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "Log Mode. Valid values: TCP, TLS, or UDP.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port of Syslog Endpoint.\n"
                },
                "severity": {
                    "type": "integer",
                    "description": "Severity Level. See documentation for details. Valid values: 0 to 7.\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "port"
            ]
        },
        "cpln:index/OrgObservability:OrgObservability": {
            "properties": {
                "logsRetentionDays": {
                    "type": "integer",
                    "description": "Log retention days. Default: 30\n"
                },
                "metricsRetentionDays": {
                    "type": "integer",
                    "description": "Metrics retention days. Default: 30\n"
                },
                "tracesRetentionDays": {
                    "type": "integer",
                    "description": "Traces retention days. Default: 30\n"
                }
            },
            "type": "object"
        },
        "cpln:index/OrgSecurity:OrgSecurity": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "threatDetection": {
                    "$ref": "#/types/cpln:index/OrgSecurityThreatDetection:OrgSecurityThreatDetection"
                }
            },
            "type": "object"
        },
        "cpln:index/OrgSecurityThreatDetection:OrgSecurityThreatDetection": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether threat detection should be forwarded or not.\n"
                },
                "minimumSeverity": {
                    "type": "string",
                    "description": "Any threats with this severity and more severe will be sent. Others will be ignored. Valid values: `warning`, `error`, or `critical`.\n"
                },
                "syslog": {
                    "$ref": "#/types/cpln:index/OrgSecurityThreatDetectionSyslog:OrgSecurityThreatDetectionSyslog",
                    "description": "Configuration for syslog forwarding.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "cpln:index/OrgSecurityThreatDetectionSyslog:OrgSecurityThreatDetectionSyslog": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The hostname to send syslog messages to.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port to send syslog messages to.\n"
                },
                "transport": {
                    "type": "string",
                    "description": "The transport-layer protocol to send the syslog messages over. If TCP is chosen, messages will be sent with TLS. Default: `tcp`.\n"
                }
            },
            "type": "object",
            "required": [
                "host",
                "port"
            ]
        },
        "cpln:index/OrgStatus:OrgStatus": {
            "properties": {
                "accountLink": {
                    "type": "string",
                    "description": "The link of the account the org belongs to.\n"
                },
                "active": {
                    "type": "boolean",
                    "description": "Indicates whether the org is active or not.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/OrgTracingControlplaneTracing:OrgTracingControlplaneTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of custom tags.\n"
                },
                "sampling": {
                    "type": "number",
                    "description": "Determines what percentage of requests should be traced.\n"
                }
            },
            "type": "object",
            "required": [
                "sampling"
            ]
        },
        "cpln:index/OrgTracingLightstepTracing:OrgTracingLightstepTracing": {
            "properties": {
                "credentials": {
                    "type": "string",
                    "description": "Full link to referenced Opaque Secret.\n"
                },
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of custom tags.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.\n"
                },
                "sampling": {
                    "type": "number",
                    "description": "Determines what percentage of requests should be traced.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/OrgTracingOtelTracing:OrgTracingOtelTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of custom tags.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.\n"
                },
                "sampling": {
                    "type": "number",
                    "description": "Determines what percentage of requests should be traced.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/PolicyBinding:PolicyBinding": {
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of permissions to allow.\n"
                },
                "principalLinks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the principals this binding will be applied to. Principal links format: `group/GROUP_NAME`, `user/USER_EMAIL`, `gvc/GVC_NAME/identity/IDENTITY_NAME`, `serviceaccount/SERVICE_ACCOUNT_NAME`.\n"
                }
            },
            "type": "object",
            "required": [
                "permissions",
                "principalLinks"
            ]
        },
        "cpln:index/PolicyTargetQuery:PolicyTargetQuery": {
            "properties": {
                "fetch": {
                    "type": "string",
                    "description": "Type of fetch. Specify either: `links` or `items`. Default: `items`.\n"
                },
                "spec": {
                    "$ref": "#/types/cpln:index/PolicyTargetQuerySpec:PolicyTargetQuerySpec"
                }
            },
            "type": "object"
        },
        "cpln:index/PolicyTargetQuerySpec:PolicyTargetQuerySpec": {
            "properties": {
                "match": {
                    "type": "string",
                    "description": "Type of match. Available values: `all`, `any`, `none`. Default: `all`.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/PolicyTargetQuerySpecTerm:PolicyTargetQuerySpecTerm"
                    },
                    "description": "Terms can only contain one of the following attributes: `property`, `rel`, `tag`.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/PolicyTargetQuerySpecTerm:PolicyTargetQuerySpecTerm": {
            "properties": {
                "op": {
                    "type": "string",
                    "description": "Type of query operation. Available values: `=`, `\u003e`, `\u003e=`, `\u003c`, `\u003c=`, `!=`, `exists`, `!exists`. Default: `=`.\n"
                },
                "property": {
                    "type": "string",
                    "description": "Property to use for query evaluation.\n"
                },
                "rel": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "Tag key to use for query evaluation.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Testing value for query evaluation.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/SecretAws:SecretAws": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access Key provided by AWS.\n",
                    "secret": true
                },
                "externalId": {
                    "type": "string",
                    "description": "AWS IAM Role External ID.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Role ARN provided by AWS.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret Key provided by AWS.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "secretKey"
            ]
        },
        "cpln:index/SecretAzureConnector:SecretAzureConnector": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Code/Key to authenticate to deployment URL.\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "Deployment URL.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "code",
                "url"
            ]
        },
        "cpln:index/SecretEcr:SecretEcr": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access Key provided by AWS.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.\n"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ECR repositories.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Role ARN provided by AWS.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret Key provided by AWS.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "repos",
                "secretKey"
            ]
        },
        "cpln:index/SecretKeypair:SecretKeypair": {
            "properties": {
                "passphrase": {
                    "type": "string",
                    "description": "Passphrase for private key.\n",
                    "secret": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "Public Key.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret/Private Key.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "secretKey"
            ]
        },
        "cpln:index/SecretNatsAccount:SecretNatsAccount": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account ID.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "privateKey"
            ]
        },
        "cpln:index/SecretOpaque:SecretOpaque": {
            "properties": {
                "encoding": {
                    "type": "string",
                    "description": "Available encodings: `plain`, `base64`. Default: `plain`.\n"
                },
                "payload": {
                    "type": "string",
                    "description": "Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "payload"
            ]
        },
        "cpln:index/SecretTls:SecretTls": {
            "properties": {
                "cert": {
                    "type": "string",
                    "description": "Public Certificate.\n"
                },
                "chain": {
                    "type": "string",
                    "description": "Chain Certificate.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Private Certificate.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ]
        },
        "cpln:index/SecretUserpass:SecretUserpass": {
            "properties": {
                "encoding": {
                    "type": "string",
                    "description": "Available encodings: `plain`, `base64`. Default: `plain`.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "cpln:index/VolumeSetAutoscaling:VolumeSetAutoscaling": {
            "properties": {
                "maxCapacity": {
                    "type": "integer",
                    "description": "The maximum size in GB for a volume in this set. A volume cannot grow to be bigger than this value. Minimum value: `10`.\n"
                },
                "minFreePercentage": {
                    "type": "integer",
                    "description": "The guaranteed free space on the volume as a percentage of the volume's total size. Control Plane will try to maintain at least that many percent free by scaling up the total size. Minimum percentage: `1`. Maximum Percentage: `100`.\n"
                },
                "scalingFactor": {
                    "type": "number",
                    "description": "When scaling is necessary, then `new_capacity = current_capacity * storageScalingFactor`. Minimum value: `1.1`.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/VolumeSetSnapshots:VolumeSetSnapshots": {
            "properties": {
                "createFinalSnapshot": {
                    "type": "boolean",
                    "description": "If true, a volume snapshot will be created immediately before deletion of any volume in this set. Default: `true`\n"
                },
                "retentionDuration": {
                    "type": "string",
                    "description": "The default retention period for volume snapshots. This string should contain a floating point number followed by either d, h, or m. For example, \"10d\" would retain snapshots for 10 days.\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "A standard cron schedule expression used to determine when a snapshot will be taken. (i.e., `0 * * * *` Every hour). Note: snapshots cannot be scheduled more often than once per hour.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/VolumeSetStatus:VolumeSetStatus": {
            "properties": {
                "bindingId": {
                    "type": "string",
                    "description": "Uniquely identifies the connection between the volume set and its workload. Every time a new connection is made, a new id is generated (e.g., If a workload is updated to remove the volume set, then updated again to reattach it, the volume set will have a new binding id).\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Contains a list of actual volumes grouped by location.\n"
                },
                "parentId": {
                    "type": "string",
                    "description": "The GVC ID.\n"
                },
                "usedByWorkload": {
                    "type": "string",
                    "description": "The url of the workload currently using this volume set (if any).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindingId",
                        "locations",
                        "parentId",
                        "usedByWorkload"
                    ]
                }
            }
        },
        "cpln:index/WorkloadContainer:WorkloadContainer": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Command line arguments passed to the container at runtime.\n"
                },
                "command": {
                    "type": "string",
                    "description": "Override the entry point.\n"
                },
                "cpu": {
                    "type": "string",
                    "description": "Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: \"50m\".\n"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Name-Value list of environment variables.\n"
                },
                "gpuNvidia": {
                    "$ref": "#/types/cpln:index/WorkloadContainerGpuNvidia:WorkloadContainerGpuNvidia",
                    "description": "GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.\n"
                },
                "image": {
                    "type": "string",
                    "description": "The full image and tag path.\n"
                },
                "inheritEnv": {
                    "type": "boolean",
                    "description": "Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.\n"
                },
                "lifecycle": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLifecycle:WorkloadContainerLifecycle",
                    "description": "Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).\n"
                },
                "livenessProbe": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLivenessProbe:WorkloadContainerLivenessProbe",
                    "description": "Liveness Probe\n"
                },
                "memory": {
                    "type": "string",
                    "description": "Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: \"128Mi\".\n"
                },
                "metrics": {
                    "$ref": "#/types/cpln:index/WorkloadContainerMetrics:WorkloadContainerMetrics",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/workload#metrics).\n"
                },
                "minCpu": {
                    "type": "string",
                    "description": "Minimum CPU when capacity AI is enabled.\n"
                },
                "minMemory": {
                    "type": "string",
                    "description": "Minimum memory when capacity AI is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the container.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `serverless` Workload type. **DEPRECATED - Use `ports`.**\n",
                    "deprecationMessage": "The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead."
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadContainerPort:WorkloadContainerPort"
                    },
                    "description": "Communication endpoints used by the workload to send and receive network traffic.\n"
                },
                "readinessProbe": {
                    "$ref": "#/types/cpln:index/WorkloadContainerReadinessProbe:WorkloadContainerReadinessProbe",
                    "description": "Readiness Probe\n"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadContainerVolume:WorkloadContainerVolume"
                    },
                    "description": "[Reference Page](https://docs.controlplane.com/reference/workload#volumes).\n"
                },
                "workingDirectory": {
                    "type": "string",
                    "description": "Override the working directory. Must be an absolute path.\n"
                }
            },
            "type": "object",
            "required": [
                "image",
                "name"
            ]
        },
        "cpln:index/WorkloadContainerGpuNvidia:WorkloadContainerGpuNvidia": {
            "properties": {
                "model": {
                    "type": "string",
                    "description": "GPU Model (i.e.: t4)\n"
                },
                "quantity": {
                    "type": "integer",
                    "description": "Number of GPUs.\n"
                }
            },
            "type": "object",
            "required": [
                "model",
                "quantity"
            ]
        },
        "cpln:index/WorkloadContainerLifecycle:WorkloadContainerLifecycle": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "postStart": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLifecyclePostStart:WorkloadContainerLifecyclePostStart"
                },
                "preStop": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLifecyclePreStop:WorkloadContainerLifecyclePreStop"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerLifecyclePostStart:WorkloadContainerLifecyclePostStart": {
            "properties": {
                "exec": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLifecyclePostStartExec:WorkloadContainerLifecyclePostStartExec"
                }
            },
            "type": "object",
            "required": [
                "exec"
            ]
        },
        "cpln:index/WorkloadContainerLifecyclePostStartExec:WorkloadContainerLifecyclePostStartExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "cpln:index/WorkloadContainerLifecyclePreStop:WorkloadContainerLifecyclePreStop": {
            "properties": {
                "exec": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLifecyclePreStopExec:WorkloadContainerLifecyclePreStopExec"
                }
            },
            "type": "object",
            "required": [
                "exec"
            ]
        },
        "cpln:index/WorkloadContainerLifecyclePreStopExec:WorkloadContainerLifecyclePreStopExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "cpln:index/WorkloadContainerLivenessProbe:WorkloadContainerLivenessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLivenessProbeExec:WorkloadContainerLivenessProbeExec"
                },
                "failureThreshold": {
                    "type": "integer"
                },
                "grpc": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLivenessProbeGrpc:WorkloadContainerLivenessProbeGrpc"
                },
                "httpGet": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLivenessProbeHttpGet:WorkloadContainerLivenessProbeHttpGet"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "tcpSocket": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLivenessProbeTcpSocket:WorkloadContainerLivenessProbeTcpSocket"
                },
                "timeoutSeconds": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerLivenessProbeExec:WorkloadContainerLivenessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "cpln:index/WorkloadContainerLivenessProbeGrpc:WorkloadContainerLivenessProbeGrpc": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerLivenessProbeHttpGet:WorkloadContainerLivenessProbeHttpGet": {
            "properties": {
                "httpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerLivenessProbeTcpSocket:WorkloadContainerLivenessProbeTcpSocket": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerMetrics:WorkloadContainerMetrics": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "Path from container emitting custom metrics\n"
                },
                "port": {
                    "type": "integer",
                    "description": "Port from container emitting custom metrics\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "port"
            ]
        },
        "cpln:index/WorkloadContainerPort:WorkloadContainerPort": {
            "properties": {
                "number": {
                    "type": "integer",
                    "description": "Port to expose.\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Protocol. Choice of: `http`, `http2`, `tcp`, or `grpc`.\n"
                }
            },
            "type": "object",
            "required": [
                "number"
            ]
        },
        "cpln:index/WorkloadContainerReadinessProbe:WorkloadContainerReadinessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/cpln:index/WorkloadContainerReadinessProbeExec:WorkloadContainerReadinessProbeExec"
                },
                "failureThreshold": {
                    "type": "integer"
                },
                "grpc": {
                    "$ref": "#/types/cpln:index/WorkloadContainerReadinessProbeGrpc:WorkloadContainerReadinessProbeGrpc"
                },
                "httpGet": {
                    "$ref": "#/types/cpln:index/WorkloadContainerReadinessProbeHttpGet:WorkloadContainerReadinessProbeHttpGet"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "tcpSocket": {
                    "$ref": "#/types/cpln:index/WorkloadContainerReadinessProbeTcpSocket:WorkloadContainerReadinessProbeTcpSocket"
                },
                "timeoutSeconds": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerReadinessProbeExec:WorkloadContainerReadinessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "cpln:index/WorkloadContainerReadinessProbeGrpc:WorkloadContainerReadinessProbeGrpc": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerReadinessProbeHttpGet:WorkloadContainerReadinessProbeHttpGet": {
            "properties": {
                "httpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerReadinessProbeTcpSocket:WorkloadContainerReadinessProbeTcpSocket": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerVolume:WorkloadContainerVolume": {
            "properties": {
                "path": {
                    "type": "string",
                    "description": "File path added to workload pointing to the volume.\n"
                },
                "recoveryPolicy": {
                    "type": "string",
                    "description": "Only applicable to persistent volumes, this determines what Control Plane will do when creating a new workload replica if a corresponding volume exists. Available Values: `retain`, `recycle`. Default: `retain`. **DEPRECATED - No longer being used.**\n"
                },
                "uri": {
                    "type": "string",
                    "description": "URI of a volume hosted at Control Plane (Volume Set) or at a cloud provider (AWS, Azure, GCP).\n"
                }
            },
            "type": "object",
            "required": [
                "path",
                "uri"
            ]
        },
        "cpln:index/WorkloadFirewallSpec:WorkloadFirewallSpec": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "external": {
                    "$ref": "#/types/cpln:index/WorkloadFirewallSpecExternal:WorkloadFirewallSpecExternal",
                    "description": "The external firewall is used to control inbound and outbound access to the workload for public-facing traffic.\n"
                },
                "internal": {
                    "$ref": "#/types/cpln:index/WorkloadFirewallSpecInternal:WorkloadFirewallSpecInternal",
                    "description": "The internal firewall is used to control access between workloads.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadFirewallSpecExternal:WorkloadFirewallSpecExternal": {
            "properties": {
                "inboundAllowCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ipv4/ipv6 addresses or cidr blocks that are allowed to access this workload. No external access is allowed by default. Specify '0.0.0.0/0' to allow access to the public internet.\n"
                },
                "outboundAllowCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of ipv4/ipv6 addresses or cidr blocks that this workload is allowed reach. No outbound access is allowed by default. Specify '0.0.0.0/0' to allow outbound access to the public internet.\n"
                },
                "outboundAllowHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of public hostnames that this workload is allowed to reach. No outbound access is allowed by default. A wildcard `*` is allowed on the prefix of the hostname only, ex: `*.amazonaws.com`. Use `outboundAllowCIDR` to allow access to all external websites.\n"
                },
                "outboundAllowPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadFirewallSpecExternalOutboundAllowPort:WorkloadFirewallSpecExternalOutboundAllowPort"
                    },
                    "description": "Allow outbound access to specific ports and protocols. When not specified, communication to address ranges in outboundAllowCIDR is allowed on all ports and communication to names in outboundAllowHostname is allowed on ports 80/443.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadFirewallSpecExternalOutboundAllowPort:WorkloadFirewallSpecExternalOutboundAllowPort": {
            "properties": {
                "number": {
                    "type": "integer",
                    "description": "Port number. Max: 65000\n"
                },
                "protocol": {
                    "type": "string",
                    "description": "Either `http`, `https` or `tcp`. Default: `tcp`.\n"
                }
            },
            "type": "object",
            "required": [
                "number",
                "protocol"
            ]
        },
        "cpln:index/WorkloadFirewallSpecInternal:WorkloadFirewallSpecInternal": {
            "properties": {
                "inboundAllowType": {
                    "type": "string",
                    "description": "Used to control the internal firewall configuration and mutual tls. Allowed Values: \"none\", \"same-gvc\", \"same-org\", \"workload-list\".\n"
                },
                "inboundAllowWorkloads": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of specific workloads which are allowed to access this workload internally. This list is only used if the 'inboundAllowType' is set to 'workload-list'.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadJob:WorkloadJob": {
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer",
                    "description": "The maximum number of seconds Control Plane will wait for the job to complete. If a job does not succeed or fail in the allotted time, Control Plane will stop the job, moving it into the Removed status.\n"
                },
                "concurrencyPolicy": {
                    "type": "string",
                    "description": "Either 'Forbid' or 'Replace'. This determines what Control Plane will do when the schedule requires a job to start, while a prior instance of the job is still running. Enum: [ Forbid, Replace ] Default: `Forbid`\n"
                },
                "historyLimit": {
                    "type": "integer",
                    "description": "The maximum number of completed job instances to display. This should be an integer between 1 and 10. Default: `5`\n"
                },
                "restartPolicy": {
                    "type": "string",
                    "description": "Either 'OnFailure' or 'Never'. This determines what Control Plane will do when a job instance fails. Enum: [ OnFailure, Never ] Default: `Never`\n"
                },
                "schedule": {
                    "type": "string",
                    "description": "A standard cron [schedule expression](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax) used to determine when your job should execute.\n"
                }
            },
            "type": "object",
            "required": [
                "schedule"
            ]
        },
        "cpln:index/WorkloadLoadBalancer:WorkloadLoadBalancer": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "direct": {
                    "$ref": "#/types/cpln:index/WorkloadLoadBalancerDirect:WorkloadLoadBalancerDirect"
                },
                "geoLocation": {
                    "$ref": "#/types/cpln:index/WorkloadLoadBalancerGeoLocation:WorkloadLoadBalancerGeoLocation"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadLoadBalancerDirect:WorkloadLoadBalancerDirect": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadLoadBalancerDirectPort:WorkloadLoadBalancerDirectPort"
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "cpln:index/WorkloadLoadBalancerDirectPort:WorkloadLoadBalancerDirectPort": {
            "properties": {
                "containerPort": {
                    "type": "integer"
                },
                "externalPort": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "scheme": {
                    "type": "string",
                    "description": "Override the default `https` url scheme.\n"
                }
            },
            "type": "object",
            "required": [
                "externalPort",
                "protocol"
            ]
        },
        "cpln:index/WorkloadLoadBalancerGeoLocation:WorkloadLoadBalancerGeoLocation": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "When enabled, geo location headers will be included on inbound http requests. Existing headers will be replaced.\n"
                },
                "headers": {
                    "$ref": "#/types/cpln:index/WorkloadLoadBalancerGeoLocationHeaders:WorkloadLoadBalancerGeoLocationHeaders"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadLoadBalancerGeoLocationHeaders:WorkloadLoadBalancerGeoLocationHeaders": {
            "properties": {
                "asn": {
                    "type": "string",
                    "description": "The geo asn header.\n"
                },
                "city": {
                    "type": "string",
                    "description": "The geo city header.\n"
                },
                "country": {
                    "type": "string",
                    "description": "The geo country header.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The geo region header.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadLocalOption:WorkloadLocalOption": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/cpln:index/WorkloadLocalOptionAutoscaling:WorkloadLocalOptionAutoscaling",
                    "description": "Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.\n"
                },
                "capacityAi": {
                    "type": "boolean",
                    "description": "Capacity AI. Default: `true`.\n"
                },
                "debug": {
                    "type": "boolean",
                    "description": "Debug mode. Default: `false`\n"
                },
                "location": {
                    "type": "string",
                    "description": "Valid only for `local_options`. Override options for a specific location.\n"
                },
                "suspend": {
                    "type": "boolean",
                    "description": "Workload suspend. Default: `false`\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Timeout in seconds. Default: `5`.\n"
                }
            },
            "type": "object",
            "required": [
                "location"
            ]
        },
        "cpln:index/WorkloadLocalOptionAutoscaling:WorkloadLocalOptionAutoscaling": {
            "properties": {
                "maxConcurrency": {
                    "type": "integer",
                    "description": "A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "The maximum allowed number of replicas. Min: `0`. Default `5`.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "Valid values: `disabled`, `concurrency`, `cpu`, `memory`, `latency`, or `rps`.\n"
                },
                "metricPercentile": {
                    "type": "string",
                    "description": "For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.\n"
                },
                "multis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadLocalOptionAutoscalingMulti:WorkloadLocalOptionAutoscalingMulti"
                    }
                },
                "scaleToZeroDelay": {
                    "type": "integer",
                    "description": "The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.\n"
                },
                "target": {
                    "type": "integer",
                    "description": "Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadLocalOptionAutoscalingMulti:WorkloadLocalOptionAutoscalingMulti": {
            "properties": {
                "metric": {
                    "type": "string",
                    "description": "Valid values: `cpu` or `memory`.\n"
                },
                "target": {
                    "type": "integer",
                    "description": "Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadOptions:WorkloadOptions": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/cpln:index/WorkloadOptionsAutoscaling:WorkloadOptionsAutoscaling",
                    "description": "Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.\n"
                },
                "capacityAi": {
                    "type": "boolean",
                    "description": "Capacity AI. Default: `true`.\n"
                },
                "debug": {
                    "type": "boolean",
                    "description": "Debug mode. Default: `false`\n"
                },
                "suspend": {
                    "type": "boolean",
                    "description": "Workload suspend. Default: `false`\n"
                },
                "timeoutSeconds": {
                    "type": "integer",
                    "description": "Timeout in seconds. Default: `5`.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadOptionsAutoscaling:WorkloadOptionsAutoscaling": {
            "properties": {
                "maxConcurrency": {
                    "type": "integer",
                    "description": "A hard maximum for the number of concurrent requests allowed to a replica. If no replicas are available to fulfill the request then it will be queued until a replica with capacity is available and delivered as soon as one is available again. Capacity can be available from requests completing or when a new replica is available from scale out.Min: `0`. Max: `1000`. Default `0`.\n"
                },
                "maxScale": {
                    "type": "integer",
                    "description": "The maximum allowed number of replicas. Min: `0`. Default `5`.\n"
                },
                "metric": {
                    "type": "string",
                    "description": "Valid values: `disabled`, `concurrency`, `cpu`, `memory`, `latency`, or `rps`.\n"
                },
                "metricPercentile": {
                    "type": "string",
                    "description": "For metrics represented as a distribution (e.g. latency) a percentile within the distribution must be chosen as the target.\n"
                },
                "minScale": {
                    "type": "integer",
                    "description": "The minimum allowed number of replicas. Control Plane can scale the workload down to 0 when there is no traffic and scale up immediately to fulfill new requests. Min: `0`. Max: `max_scale`. Default `1`.\n"
                },
                "multis": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadOptionsAutoscalingMulti:WorkloadOptionsAutoscalingMulti"
                    }
                },
                "scaleToZeroDelay": {
                    "type": "integer",
                    "description": "The amount of time (in seconds) with no requests received before a workload is scaled to 0. Min: `30`. Max: `3600`. Default: `300`.\n"
                },
                "target": {
                    "type": "integer",
                    "description": "Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadOptionsAutoscalingMulti:WorkloadOptionsAutoscalingMulti": {
            "properties": {
                "metric": {
                    "type": "string",
                    "description": "Valid values: `cpu` or `memory`.\n"
                },
                "target": {
                    "type": "integer",
                    "description": "Control Plane will scale the number of replicas for this deployment up/down in order to be as close as possible to the target metric across all replicas of a deployment. Min: `1`. Max: `20000`. Default: `95`.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadRolloutOptions:WorkloadRolloutOptions": {
            "properties": {
                "maxSurgeReplicas": {
                    "type": "string",
                    "description": "The number of replicas that can be created above the desired amount of replicas during an update.\n"
                },
                "maxUnavailableReplicas": {
                    "type": "string",
                    "description": "The number of replicas that can be unavailable during the update process.\n"
                },
                "minReadySeconds": {
                    "type": "integer",
                    "description": "The minimum number of seconds a container must run without crashing to be considered available\n"
                },
                "scalingPolicy": {
                    "type": "string",
                    "description": "The strategies used to update applications and services deployed. Valid values: `OrderedReady` (Updates workloads in a rolling fashion, taking down old ones and bringing up new ones incrementally, ensuring that the service remains available during the update.), `Parallel` (Causes all pods affected by a scaling operation to be created or destroyed simultaneously. This does not affect update operations.). Default: `OrderedReady`.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadSecurityOptions:WorkloadSecurityOptions": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "fileSystemGroupId": {
                    "type": "integer",
                    "description": "The group id assigned to any mounted volume.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadSidecar:WorkloadSidecar": {
            "properties": {
                "envoy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "envoy"
            ]
        },
        "cpln:index/WorkloadStatus:WorkloadStatus": {
            "properties": {
                "canonicalEndpoint": {
                    "type": "string",
                    "description": "Canonical endpoint for the workload.\n"
                },
                "currentReplicaCount": {
                    "type": "integer",
                    "description": "Current amount of replicas deployed.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Endpoint for the workload.\n"
                },
                "healthChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatusHealthCheck:WorkloadStatusHealthCheck"
                    },
                    "description": "Current health status.\n"
                },
                "internalName": {
                    "type": "string",
                    "description": "Internal hostname for the workload. Used for service-to-service requests.\n"
                },
                "loadBalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatusLoadBalancer:WorkloadStatusLoadBalancer"
                    }
                },
                "parentId": {
                    "type": "string",
                    "description": "ID of the parent object.\n"
                },
                "resolvedImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatusResolvedImage:WorkloadStatusResolvedImage"
                    },
                    "description": "Resolved images for workloads with dynamic tags enabled.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadStatusHealthCheck:WorkloadStatusHealthCheck": {
            "properties": {
                "active": {
                    "type": "boolean",
                    "description": "Active boolean for the associated workload.\n"
                },
                "code": {
                    "type": "integer",
                    "description": "Current output code for the associated workload.\n"
                },
                "failures": {
                    "type": "integer",
                    "description": "Failure integer for the associated workload.\n"
                },
                "lastChecked": {
                    "type": "string",
                    "description": "Timestamp in UTC of the last health check.\n"
                },
                "message": {
                    "type": "string",
                    "description": "Current health status for the associated workload.\n"
                },
                "success": {
                    "type": "boolean",
                    "description": "Success boolean for the associated workload.\n"
                },
                "successes": {
                    "type": "integer",
                    "description": "Success integer for the associated workload.\n"
                }
            },
            "type": "object",
            "required": [
                "active"
            ]
        },
        "cpln:index/WorkloadStatusLoadBalancer:WorkloadStatusLoadBalancer": {
            "properties": {
                "origin": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadStatusResolvedImage:WorkloadStatusResolvedImage": {
            "properties": {
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatusResolvedImageImage:WorkloadStatusResolvedImageImage"
                    },
                    "description": "A list of images that were resolved.\n"
                },
                "resolvedAt": {
                    "type": "string",
                    "description": "UTC Time when the images were resolved.\n"
                },
                "resolvedForVersion": {
                    "type": "integer",
                    "description": "Workload version the images were resolved for.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadStatusResolvedImageImage:WorkloadStatusResolvedImageImage": {
            "properties": {
                "digest": {
                    "type": "string",
                    "description": "A unique SHA256 hash value that identifies a specific image content. This digest serves as a fingerprint of the image's content, ensuring the image you pull or run is exactly what you expect, without any modifications or corruptions.\n"
                },
                "manifests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatusResolvedImageImageManifest:WorkloadStatusResolvedImageImageManifest"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadStatusResolvedImageImageManifest:WorkloadStatusResolvedImageImageManifest": {
            "properties": {
                "digest": {
                    "type": "string",
                    "description": "A SHA256 hash that uniquely identifies the specific image manifest.\n"
                },
                "image": {
                    "type": "string",
                    "description": "The name and tag of the resolved image.\n"
                },
                "mediaType": {
                    "type": "string",
                    "description": "The MIME type used in the Docker Registry HTTP API to specify the format of the data being sent or received. Docker uses media types to distinguish between different kinds of JSON objects and binary data formats within the registry protocol, enabling the Docker client and registry to understand and process different components of Docker images correctly.\n"
                },
                "platform": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of strings. The combination of the operating system and architecture for which the image is built.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/getGvcControlplaneTracing:getGvcControlplaneTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of custom tags.\n"
                },
                "sampling": {
                    "type": "number",
                    "description": "Determines what percentage of requests should be traced.\n"
                }
            },
            "type": "object",
            "required": [
                "sampling"
            ]
        },
        "cpln:index/getGvcLightstepTracing:getGvcLightstepTracing": {
            "properties": {
                "credentials": {
                    "type": "string",
                    "description": "Full link to referenced Opaque Secret.\n"
                },
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of custom tags.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.\n"
                },
                "sampling": {
                    "type": "number",
                    "description": "Determines what percentage of requests should be traced.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/getGvcLoadBalancer:getGvcLoadBalancer": {
            "properties": {
                "dedicated": {
                    "type": "boolean",
                    "description": "Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.\n"
                },
                "redirect": {
                    "$ref": "#/types/cpln:index/getGvcLoadBalancerRedirect:getGvcLoadBalancerRedirect",
                    "description": "Specify the url to be redirected to for different http status codes.\n"
                },
                "trustedProxies": {
                    "type": "integer",
                    "description": "Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/getGvcLoadBalancerRedirect:getGvcLoadBalancerRedirect": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "class": {
                    "$ref": "#/types/cpln:index/getGvcLoadBalancerRedirectClass:getGvcLoadBalancerRedirectClass",
                    "description": "Specify the redirect url for all status codes in a class.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/getGvcLoadBalancerRedirectClass:getGvcLoadBalancerRedirectClass": {
            "properties": {
                "_sentinel": {
                    "type": "boolean"
                },
                "status5xx": {
                    "type": "string",
                    "description": "Specify the redirect url for any 500 level status code.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/getGvcOtelTracing:getGvcOtelTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of custom tags.\n"
                },
                "endpoint": {
                    "type": "string",
                    "description": "Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.\n"
                },
                "sampling": {
                    "type": "number",
                    "description": "Determines what percentage of requests should be traced.\n"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/getGvcSidecar:getGvcSidecar": {
            "properties": {
                "envoy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "envoy"
            ]
        },
        "cpln:index/getImageManifest:getImageManifest": {
            "properties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImageManifestConfig:getImageManifestConfig"
                    },
                    "description": "The config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.\n"
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImageManifestLayer:getImageManifestLayer"
                    },
                    "description": "Layers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.\n"
                },
                "mediaType": {
                    "type": "string",
                    "description": "Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n"
                },
                "schemaVersion": {
                    "type": "integer",
                    "description": "The version of the Docker Image Manifest format.\n"
                }
            },
            "type": "object",
            "required": [
                "configs",
                "layers",
                "mediaType",
                "schemaVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImageManifestConfig:getImageManifestConfig": {
            "properties": {
                "digest": {
                    "type": "string",
                    "description": "A unique SHA256 hash used to identify a specific image version within the image registry.\n"
                },
                "mediaType": {
                    "type": "string",
                    "description": "Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the image or layer in bytes. This helps in estimating the space required and the download time.\n"
                }
            },
            "type": "object",
            "required": [
                "digest",
                "mediaType",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImageManifestLayer:getImageManifestLayer": {
            "properties": {
                "digest": {
                    "type": "string",
                    "description": "A unique SHA256 hash used to identify a specific image version within the image registry.\n"
                },
                "mediaType": {
                    "type": "string",
                    "description": "Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the image or layer in bytes. This helps in estimating the space required and the download time.\n"
                }
            },
            "type": "object",
            "required": [
                "digest",
                "mediaType",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImagesImage:getImagesImage": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Image.\n"
                },
                "digest": {
                    "type": "string",
                    "description": "A unique SHA256 hash used to identify a specific image version within the image registry.\n"
                },
                "manifests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImagesImageManifest:getImagesImageManifest"
                    },
                    "description": "The manifest provides configuration and layers information about the image. It plays a crucial role in the Docker image distribution system, enabling image creation, verification, and replication in a consistent and secure manner.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Image.\n"
                },
                "repository": {
                    "type": "string",
                    "description": "Respository name of the image.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "Tag of the image.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "type": "object",
            "required": [
                "cplnId",
                "digest",
                "manifests",
                "name",
                "repository",
                "selfLink",
                "tag",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImagesImageManifest:getImagesImageManifest": {
            "properties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImagesImageManifestConfig:getImagesImageManifestConfig"
                    },
                    "description": "The config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.\n"
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImagesImageManifestLayer:getImagesImageManifestLayer"
                    },
                    "description": "Layers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.\n"
                },
                "mediaType": {
                    "type": "string",
                    "description": "Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n"
                },
                "schemaVersion": {
                    "type": "integer",
                    "description": "The version of the Docker Image Manifest format.\n"
                }
            },
            "type": "object",
            "required": [
                "configs",
                "layers",
                "mediaType",
                "schemaVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImagesImageManifestConfig:getImagesImageManifestConfig": {
            "properties": {
                "digest": {
                    "type": "string",
                    "description": "A unique SHA256 hash used to identify a specific image version within the image registry.\n"
                },
                "mediaType": {
                    "type": "string",
                    "description": "Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the image or layer in bytes. This helps in estimating the space required and the download time.\n"
                }
            },
            "type": "object",
            "required": [
                "digest",
                "mediaType",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImagesImageManifestLayer:getImagesImageManifestLayer": {
            "properties": {
                "digest": {
                    "type": "string",
                    "description": "A unique SHA256 hash used to identify a specific image version within the image registry.\n"
                },
                "mediaType": {
                    "type": "string",
                    "description": "Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n"
                },
                "size": {
                    "type": "integer",
                    "description": "The size of the image or layer in bytes. This helps in estimating the space required and the download time.\n"
                }
            },
            "type": "object",
            "required": [
                "digest",
                "mediaType",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImagesQuery:getImagesQuery": {
            "properties": {
                "fetch": {
                    "type": "string",
                    "description": "Type of fetch. Specify either: `links` or `items`. Default: `items`.\n"
                },
                "spec": {
                    "$ref": "#/types/cpln:index/getImagesQuerySpec:getImagesQuerySpec"
                }
            },
            "type": "object"
        },
        "cpln:index/getImagesQuerySpec:getImagesQuerySpec": {
            "properties": {
                "match": {
                    "type": "string",
                    "description": "Type of match. Available values: `all`, `any`, `none`. Default: `all`.\n"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImagesQuerySpecTerm:getImagesQuerySpecTerm"
                    },
                    "description": "Terms can only contain one of the following attributes: `property`, `rel`, `tag`.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/getImagesQuerySpecTerm:getImagesQuerySpecTerm": {
            "properties": {
                "op": {
                    "type": "string",
                    "description": "Type of query operation. Available values: `=`, `\u003e`, `\u003e=`, `\u003c`, `\u003c=`, `!=`, `exists`, `!exists`. Default: `=`.\n"
                },
                "property": {
                    "type": "string",
                    "description": "Property to use for query evaluation.\n"
                },
                "rel": {
                    "type": "string"
                },
                "tag": {
                    "type": "string",
                    "description": "Tag key to use for query evaluation.\n"
                },
                "value": {
                    "type": "string",
                    "description": "Testing value for query evaluation.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/getLocationGeo:getLocationGeo": {
            "properties": {
                "city": {
                    "type": "string",
                    "description": "City.\n"
                },
                "continent": {
                    "type": "string",
                    "description": "Continent.\n"
                },
                "country": {
                    "type": "string",
                    "description": "Country.\n"
                },
                "lat": {
                    "type": "number",
                    "description": "Latitude.\n"
                },
                "lon": {
                    "type": "number",
                    "description": "Longitude.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/getLocationsLocation:getLocationsLocation": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud Provider of the location.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the location.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the location.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indication if location is enabled.\n"
                },
                "geos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getLocationsLocationGeo:getLocationsLocationGeo"
                    }
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP ranges of the location.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the location.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the location.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "type": "object",
            "required": [
                "cloudProvider",
                "cplnId",
                "description",
                "enabled",
                "geos",
                "ipRanges",
                "name",
                "region",
                "selfLink",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getLocationsLocationGeo:getLocationsLocationGeo": {
            "properties": {
                "city": {
                    "type": "string",
                    "description": "City.\n"
                },
                "continent": {
                    "type": "string",
                    "description": "Continent.\n"
                },
                "country": {
                    "type": "string",
                    "description": "Country.\n"
                },
                "lat": {
                    "type": "number",
                    "description": "Latitude.\n"
                },
                "lon": {
                    "type": "number",
                    "description": "Longitude.\n"
                },
                "state": {
                    "type": "string",
                    "description": "State.\n"
                }
            },
            "type": "object"
        },
        "cpln:index/getSecretAws:getSecretAws": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access Key provided by AWS.\n",
                    "secret": true
                },
                "externalId": {
                    "type": "string",
                    "description": "AWS IAM Role External ID.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Role ARN provided by AWS.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret Key provided by AWS.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "secretKey"
            ]
        },
        "cpln:index/getSecretAzureConnector:getSecretAzureConnector": {
            "properties": {
                "code": {
                    "type": "string",
                    "description": "Code/Key to authenticate to deployment URL.\n",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "description": "Deployment URL.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "code",
                "url"
            ]
        },
        "cpln:index/getSecretEcr:getSecretEcr": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "description": "Access Key provided by AWS.\n"
                },
                "externalId": {
                    "type": "string",
                    "description": "AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.\n"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of ECR repositories.\n"
                },
                "roleArn": {
                    "type": "string",
                    "description": "Role ARN provided by AWS.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret Key provided by AWS.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "repos",
                "secretKey"
            ]
        },
        "cpln:index/getSecretKeypair:getSecretKeypair": {
            "properties": {
                "passphrase": {
                    "type": "string",
                    "description": "Passphrase for private key.\n",
                    "secret": true
                },
                "publicKey": {
                    "type": "string",
                    "description": "Public Key.\n"
                },
                "secretKey": {
                    "type": "string",
                    "description": "Secret/Private Key.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "secretKey"
            ]
        },
        "cpln:index/getSecretNatsAccount:getSecretNatsAccount": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "Account ID.\n"
                },
                "privateKey": {
                    "type": "string",
                    "description": "Private Key.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "privateKey"
            ]
        },
        "cpln:index/getSecretOpaque:getSecretOpaque": {
            "properties": {
                "encoding": {
                    "type": "string",
                    "description": "Available encodings: `plain`, `base64`. Default: `plain`.\n"
                },
                "payload": {
                    "type": "string",
                    "description": "Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "payload"
            ]
        },
        "cpln:index/getSecretTls:getSecretTls": {
            "properties": {
                "cert": {
                    "type": "string",
                    "description": "Public Certificate.\n"
                },
                "chain": {
                    "type": "string",
                    "description": "Chain Certificate.\n"
                },
                "key": {
                    "type": "string",
                    "description": "Private Certificate.\n",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ]
        },
        "cpln:index/getSecretUserpass:getSecretUserpass": {
            "properties": {
                "encoding": {
                    "type": "string",
                    "description": "Available encodings: `plain`, `base64`. Default: `plain`.\n"
                },
                "password": {
                    "type": "string",
                    "description": "Password.\n",
                    "secret": true
                },
                "username": {
                    "type": "string",
                    "description": "Username.\n"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        }
    },
    "provider": {
        "description": "The provider type for the cpln package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "endpoint": {
                "type": "string"
            },
            "org": {
                "type": "string"
            },
            "profile": {
                "type": "string"
            },
            "refreshToken": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        },
        "required": [
            "org"
        ],
        "inputProperties": {
            "endpoint": {
                "type": "string"
            },
            "org": {
                "type": "string"
            },
            "profile": {
                "type": "string"
            },
            "refreshToken": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "org"
        ]
    },
    "resources": {
        "cpln:index/agent:Agent": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Agent.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Agent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Agent.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The JSON output needed when [creating an agent](https://docs.controlplane.com/guides/agent).\n",
                    "secret": true
                }
            },
            "required": [
                "cplnId",
                "name",
                "selfLink",
                "userData"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Agent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Agent.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Agent resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Agent.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Agent.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Agent.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "The JSON output needed when [creating an agent](https://docs.controlplane.com/guides/agent).\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/auditContext:AuditContext": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Audit Context.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Audit Context.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Audit Context.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "selfLink"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Audit Context.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Audit Context.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuditContext resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Audit Context.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Audit Context.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Audit Context.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/cloudAccount:CloudAccount": {
            "properties": {
                "aws": {
                    "$ref": "#/types/cpln:index/CloudAccountAws:CloudAccountAws",
                    "description": "Contains AWS cloud account configuration.\n"
                },
                "azure": {
                    "$ref": "#/types/cpln:index/CloudAccountAzure:CloudAccountAzure",
                    "description": "Contains Azure cloud account configuration.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Cloud Account.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Cloud Account.\n"
                },
                "gcp": {
                    "$ref": "#/types/cpln:index/CloudAccountGcp:CloudAccountGcp",
                    "description": "Contains GCP cloud account configuration.\n"
                },
                "gcpRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gcpServiceAccountName": {
                    "type": "string",
                    "description": "GCP service account name used during the configuration of the cloud account at GCP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Cloud Account.\n"
                },
                "ngs": {
                    "$ref": "#/types/cpln:index/CloudAccountNgs:CloudAccountNgs"
                },
                "selfLink": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "gcpRoles",
                "gcpServiceAccountName",
                "name",
                "selfLink"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/cpln:index/CloudAccountAws:CloudAccountAws",
                    "description": "Contains AWS cloud account configuration.\n"
                },
                "azure": {
                    "$ref": "#/types/cpln:index/CloudAccountAzure:CloudAccountAzure",
                    "description": "Contains Azure cloud account configuration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Cloud Account.\n"
                },
                "gcp": {
                    "$ref": "#/types/cpln:index/CloudAccountGcp:CloudAccountGcp",
                    "description": "Contains GCP cloud account configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Cloud Account.\n",
                    "willReplaceOnChanges": true
                },
                "ngs": {
                    "$ref": "#/types/cpln:index/CloudAccountNgs:CloudAccountNgs"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudAccount resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/cpln:index/CloudAccountAws:CloudAccountAws",
                        "description": "Contains AWS cloud account configuration.\n"
                    },
                    "azure": {
                        "$ref": "#/types/cpln:index/CloudAccountAzure:CloudAccountAzure",
                        "description": "Contains Azure cloud account configuration.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Cloud Account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Cloud Account.\n"
                    },
                    "gcp": {
                        "$ref": "#/types/cpln:index/CloudAccountGcp:CloudAccountGcp",
                        "description": "Contains GCP cloud account configuration.\n"
                    },
                    "gcpRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "gcpServiceAccountName": {
                        "type": "string",
                        "description": "GCP service account name used during the configuration of the cloud account at GCP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Cloud Account.\n",
                        "willReplaceOnChanges": true
                    },
                    "ngs": {
                        "$ref": "#/types/cpln:index/CloudAccountNgs:CloudAccountNgs"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/customLocation:CustomLocation": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud Provider of the custom location.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the custom location.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the custom location.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indication if the custom location is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the custom location.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cloudProvider",
                "cplnId",
                "enabled",
                "name",
                "selfLink"
            ],
            "inputProperties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud Provider of the custom location.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the custom location.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indication if the custom location is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the custom location.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "requiredInputs": [
                "cloudProvider",
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomLocation resources.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud Provider of the custom location.\n",
                        "willReplaceOnChanges": true
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the custom location.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the custom location.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indication if the custom location is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the custom location.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/domain:Domain": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Domain.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the domain name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with\nDNS. Create and Update will fail if the required DNS entries cannot be validated.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "spec": {
                    "$ref": "#/types/cpln:index/DomainSpec:DomainSpec",
                    "description": "Domain specification.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainStatus:DomainStatus"
                    }
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "selfLink",
                "spec",
                "statuses"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the domain name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with\nDNS. Create and Update will fail if the required DNS entries cannot be validated.\n",
                    "willReplaceOnChanges": true
                },
                "spec": {
                    "$ref": "#/types/cpln:index/DomainSpec:DomainSpec",
                    "description": "Domain specification.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "requiredInputs": [
                "spec"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Domain resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Domain.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the domain name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with\nDNS. Create and Update will fail if the required DNS entries cannot be validated.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "spec": {
                        "$ref": "#/types/cpln:index/DomainSpec:DomainSpec",
                        "description": "Domain specification.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/DomainStatus:DomainStatus"
                        }
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/domainRoute:DomainRoute": {
            "properties": {
                "domainLink": {
                    "type": "string",
                    "description": "The self link of the domain to add the route to.\n"
                },
                "domainPort": {
                    "type": "integer",
                    "description": "The port the route corresponds to. Default: 443\n"
                },
                "headers": {
                    "$ref": "#/types/cpln:index/DomainRouteHeaders:DomainRouteHeaders",
                    "description": "Modify the headers for all http requests for this route.\n"
                },
                "hostPrefix": {
                    "type": "string",
                    "description": "This option allows forwarding traffic for different host headers to different workloads. This will only be used when the\ntarget GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on\nSlack or at support@controlplane.com for additional details.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "For the linked workload, the port to route traffic to.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The path will match any unmatched path prefixes for the subdomain.\n"
                },
                "regex": {
                    "type": "string",
                    "description": "Used to match URI paths. Uses the google re2 regex syntax.\n"
                },
                "replacePrefix": {
                    "type": "string",
                    "description": "A path prefix can be configured to be replaced when forwarding the request to the Workload.\n"
                },
                "workloadLink": {
                    "type": "string",
                    "description": "The link of the workload to map the prefix to.\n"
                }
            },
            "required": [
                "domainLink",
                "workloadLink"
            ],
            "inputProperties": {
                "domainLink": {
                    "type": "string",
                    "description": "The self link of the domain to add the route to.\n",
                    "willReplaceOnChanges": true
                },
                "domainPort": {
                    "type": "integer",
                    "description": "The port the route corresponds to. Default: 443\n",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "$ref": "#/types/cpln:index/DomainRouteHeaders:DomainRouteHeaders",
                    "description": "Modify the headers for all http requests for this route.\n"
                },
                "hostPrefix": {
                    "type": "string",
                    "description": "This option allows forwarding traffic for different host headers to different workloads. This will only be used when the\ntarget GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on\nSlack or at support@controlplane.com for additional details.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "For the linked workload, the port to route traffic to.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The path will match any unmatched path prefixes for the subdomain.\n",
                    "willReplaceOnChanges": true
                },
                "regex": {
                    "type": "string",
                    "description": "Used to match URI paths. Uses the google re2 regex syntax.\n",
                    "willReplaceOnChanges": true
                },
                "replacePrefix": {
                    "type": "string",
                    "description": "A path prefix can be configured to be replaced when forwarding the request to the Workload.\n"
                },
                "workloadLink": {
                    "type": "string",
                    "description": "The link of the workload to map the prefix to.\n"
                }
            },
            "requiredInputs": [
                "domainLink",
                "workloadLink"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainRoute resources.\n",
                "properties": {
                    "domainLink": {
                        "type": "string",
                        "description": "The self link of the domain to add the route to.\n",
                        "willReplaceOnChanges": true
                    },
                    "domainPort": {
                        "type": "integer",
                        "description": "The port the route corresponds to. Default: 443\n",
                        "willReplaceOnChanges": true
                    },
                    "headers": {
                        "$ref": "#/types/cpln:index/DomainRouteHeaders:DomainRouteHeaders",
                        "description": "Modify the headers for all http requests for this route.\n"
                    },
                    "hostPrefix": {
                        "type": "string",
                        "description": "This option allows forwarding traffic for different host headers to different workloads. This will only be used when the\ntarget GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on\nSlack or at support@controlplane.com for additional details.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "For the linked workload, the port to route traffic to.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The path will match any unmatched path prefixes for the subdomain.\n",
                        "willReplaceOnChanges": true
                    },
                    "regex": {
                        "type": "string",
                        "description": "Used to match URI paths. Uses the google re2 regex syntax.\n",
                        "willReplaceOnChanges": true
                    },
                    "replacePrefix": {
                        "type": "string",
                        "description": "A path prefix can be configured to be replaced when forwarding the request to the Workload.\n"
                    },
                    "workloadLink": {
                        "type": "string",
                        "description": "The link of the workload to map the prefix to.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/group:Group": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Group.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of Group.\n"
                },
                "identityMatcher": {
                    "$ref": "#/types/cpln:index/GroupIdentityMatcher:GroupIdentityMatcher",
                    "description": "Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful\nfor managing the grouping of users logged-in with SAML providers.\n"
                },
                "memberQuery": {
                    "$ref": "#/types/cpln:index/GroupMemberQuery:GroupMemberQuery",
                    "description": "A predefined set of criteria or conditions used to query and retrieve members within the group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Group.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "Origin of the service account. Either `builtin` or `default`.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Fully qualified link to the this group.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of service accounts that exists within the configured org. Group membership will fail if the service account does\nnot exits within the org.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "userIdsAndEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of either the user ID or email address for a user that exists within the configured org. Group membership will fail\nif the user ID / email does not exist within the org.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "origin",
                "selfLink"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of Group.\n"
                },
                "identityMatcher": {
                    "$ref": "#/types/cpln:index/GroupIdentityMatcher:GroupIdentityMatcher",
                    "description": "Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful\nfor managing the grouping of users logged-in with SAML providers.\n"
                },
                "memberQuery": {
                    "$ref": "#/types/cpln:index/GroupMemberQuery:GroupMemberQuery",
                    "description": "A predefined set of criteria or conditions used to query and retrieve members within the group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Group.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of service accounts that exists within the configured org. Group membership will fail if the service account does\nnot exits within the org.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "userIdsAndEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of either the user ID or email address for a user that exists within the configured org. Group membership will fail\nif the user ID / email does not exist within the org.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of Group.\n"
                    },
                    "identityMatcher": {
                        "$ref": "#/types/cpln:index/GroupIdentityMatcher:GroupIdentityMatcher",
                        "description": "Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful\nfor managing the grouping of users logged-in with SAML providers.\n"
                    },
                    "memberQuery": {
                        "$ref": "#/types/cpln:index/GroupMemberQuery:GroupMemberQuery",
                        "description": "A predefined set of criteria or conditions used to query and retrieve members within the group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Group.\n",
                        "willReplaceOnChanges": true
                    },
                    "origin": {
                        "type": "string",
                        "description": "Origin of the service account. Either `builtin` or `default`.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Fully qualified link to the this group.\n"
                    },
                    "serviceAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of service accounts that exists within the configured org. Group membership will fail if the service account does\nnot exits within the org.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "userIdsAndEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of either the user ID or email address for a user that exists within the configured org. Group membership will fail\nif the user ID / email does not exist within the org.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/gvc:Gvc": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The alias name of the GVC.\n"
                },
                "controlplaneTracing": {
                    "$ref": "#/types/cpln:index/GvcControlplaneTracing:GvcControlplaneTracing"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the GVC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the GVC.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Custom domain name used by associated workloads.\n",
                    "deprecationMessage": "Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead."
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value array of resource env variables.\n"
                },
                "lightstepTracing": {
                    "$ref": "#/types/cpln:index/GvcLightstepTracing:GvcLightstepTracing"
                },
                "loadBalancer": {
                    "$ref": "#/types/cpln:index/GvcLoadBalancer:GvcLoadBalancer",
                    "description": "Dedicated load balancer configuration.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GVC.\n"
                },
                "otelTracing": {
                    "$ref": "#/types/cpln:index/GvcOtelTracing:GvcOtelTracing"
                },
                "pullSecrets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any\nprivate image repository referenced by Workloads within the GVC.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "sidecar": {
                    "$ref": "#/types/cpln:index/GvcSidecar:GvcSidecar"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "alias",
                "cplnId",
                "name",
                "selfLink"
            ],
            "inputProperties": {
                "controlplaneTracing": {
                    "$ref": "#/types/cpln:index/GvcControlplaneTracing:GvcControlplaneTracing"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the GVC.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Custom domain name used by associated workloads.\n",
                    "deprecationMessage": "Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead."
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value array of resource env variables.\n"
                },
                "lightstepTracing": {
                    "$ref": "#/types/cpln:index/GvcLightstepTracing:GvcLightstepTracing"
                },
                "loadBalancer": {
                    "$ref": "#/types/cpln:index/GvcLoadBalancer:GvcLoadBalancer",
                    "description": "Dedicated load balancer configuration.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GVC.\n",
                    "willReplaceOnChanges": true
                },
                "otelTracing": {
                    "$ref": "#/types/cpln:index/GvcOtelTracing:GvcOtelTracing"
                },
                "pullSecrets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any\nprivate image repository referenced by Workloads within the GVC.\n"
                },
                "sidecar": {
                    "$ref": "#/types/cpln:index/GvcSidecar:GvcSidecar"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gvc resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The alias name of the GVC.\n"
                    },
                    "controlplaneTracing": {
                        "$ref": "#/types/cpln:index/GvcControlplaneTracing:GvcControlplaneTracing"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the GVC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the GVC.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Custom domain name used by associated workloads.\n",
                        "deprecationMessage": "Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead."
                    },
                    "env": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value array of resource env variables.\n"
                    },
                    "lightstepTracing": {
                        "$ref": "#/types/cpln:index/GvcLightstepTracing:GvcLightstepTracing"
                    },
                    "loadBalancer": {
                        "$ref": "#/types/cpln:index/GvcLoadBalancer:GvcLoadBalancer",
                        "description": "Dedicated load balancer configuration.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the GVC.\n",
                        "willReplaceOnChanges": true
                    },
                    "otelTracing": {
                        "$ref": "#/types/cpln:index/GvcOtelTracing:GvcOtelTracing"
                    },
                    "pullSecrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any\nprivate image repository referenced by Workloads within the GVC.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "sidecar": {
                        "$ref": "#/types/cpln:index/GvcSidecar:GvcSidecar"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/identity:Identity": {
            "properties": {
                "awsAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityAwsAccessPolicy:IdentityAwsAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an AWS\nenvironment.\n"
                },
                "azureAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityAzureAccessPolicy:IdentityAzureAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an Azure\nenvironment.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "ID, in GUID format, of the Identity.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Identity.\n"
                },
                "gcpAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityGcpAccessPolicy:IdentityGcpAccessPolicy",
                    "description": "The GCP access policy can either contain an existing service_account or multiple bindings.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the GVC.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Identity.\n"
                },
                "nativeNetworkResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityNativeNetworkResource:IdentityNativeNetworkResource"
                    },
                    "description": "\u003e **NOTE** The configuration of a native network resource requires the assistance of Control Plane support.\n"
                },
                "networkResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityNetworkResource:IdentityNetworkResource"
                    },
                    "description": "A network resource can be configured with: - A fully qualified domain name (FQDN) and ports. - An FQDN, resolver IP, and\nports. - IP's and ports.\n"
                },
                "ngsAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityNgsAccessPolicy:IdentityNgsAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an NGA\nenvironment.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of identity status. Available fields: `objectName`.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "gvc",
                "name",
                "selfLink",
                "status"
            ],
            "inputProperties": {
                "awsAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityAwsAccessPolicy:IdentityAwsAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an AWS\nenvironment.\n"
                },
                "azureAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityAzureAccessPolicy:IdentityAzureAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an Azure\nenvironment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Identity.\n"
                },
                "gcpAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityGcpAccessPolicy:IdentityGcpAccessPolicy",
                    "description": "The GCP access policy can either contain an existing service_account or multiple bindings.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the GVC.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Identity.\n",
                    "willReplaceOnChanges": true
                },
                "nativeNetworkResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityNativeNetworkResource:IdentityNativeNetworkResource"
                    },
                    "description": "\u003e **NOTE** The configuration of a native network resource requires the assistance of Control Plane support.\n"
                },
                "networkResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityNetworkResource:IdentityNetworkResource"
                    },
                    "description": "A network resource can be configured with: - A fully qualified domain name (FQDN) and ports. - An FQDN, resolver IP, and\nports. - IP's and ports.\n"
                },
                "ngsAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityNgsAccessPolicy:IdentityNgsAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an NGA\nenvironment.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "requiredInputs": [
                "gvc"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Identity resources.\n",
                "properties": {
                    "awsAccessPolicy": {
                        "$ref": "#/types/cpln:index/IdentityAwsAccessPolicy:IdentityAwsAccessPolicy",
                        "description": "A set of access policy rules that defines the actions and resources that an identity can access within an AWS\nenvironment.\n"
                    },
                    "azureAccessPolicy": {
                        "$ref": "#/types/cpln:index/IdentityAzureAccessPolicy:IdentityAzureAccessPolicy",
                        "description": "A set of access policy rules that defines the actions and resources that an identity can access within an Azure\nenvironment.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "ID, in GUID format, of the Identity.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Identity.\n"
                    },
                    "gcpAccessPolicy": {
                        "$ref": "#/types/cpln:index/IdentityGcpAccessPolicy:IdentityGcpAccessPolicy",
                        "description": "The GCP access policy can either contain an existing service_account or multiple bindings.\n"
                    },
                    "gvc": {
                        "type": "string",
                        "description": "Name of the GVC.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Identity.\n",
                        "willReplaceOnChanges": true
                    },
                    "nativeNetworkResources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/IdentityNativeNetworkResource:IdentityNativeNetworkResource"
                        },
                        "description": "\u003e **NOTE** The configuration of a native network resource requires the assistance of Control Plane support.\n"
                    },
                    "networkResources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/IdentityNetworkResource:IdentityNetworkResource"
                        },
                        "description": "A network resource can be configured with: - A fully qualified domain name (FQDN) and ports. - An FQDN, resolver IP, and\nports. - IP's and ports.\n"
                    },
                    "ngsAccessPolicy": {
                        "$ref": "#/types/cpln:index/IdentityNgsAccessPolicy:IdentityNgsAccessPolicy",
                        "description": "A set of access policy rules that defines the actions and resources that an identity can access within an NGA\nenvironment.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "status": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of identity status. Available fields: `objectName`.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/ipSet:IpSet": {
            "description": "Manages an org's IpSet.\n\n## Declaration\n\n### Required\n\n- **name** (String) Name of the IpSet.\n\n### Optional\n\n- **description** - (String) Description of the IpSet.\n- **tags** (Map of String) Key-value map of resource tags.\n- **link** (String) The self link of a workload.\n- **location** (Block List) (see below).\n\n\u003ca id=\"nestedblock--location\"\u003e\u003c/a\u003e\n\n### `location`\n\nRequired:\n\n- **name** (String) The self link of a location.\n- **retention_policy** (String) Exactly one of: `keep` and `free`.\n\n## Outputs\n\nThe following attributes are exported:\n\n- **cpln_id** (String) The ID, in GUID format, of the IpSet.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n- **status** (Block List, Max: 1) (see below).\n\n\u003ca id=\"nestedblock--status\"\u003e\u003c/a\u003e\n\n### `status`\n\nStatus of the IpSet.\n\nRead-Only:\n\n- **ip_address** (Block List) (see below)\n- **error** (String)\n\n\u003ca id=\"nestedblock--status--ip_address\"\u003e\u003c/a\u003e\n\n### `status.ip_address`\n\n- **name** (String)\n- **ip** (String)\n- **id** (String)\n- **state** (String)\n- **created** (String)\n\n## Example Usage\n\n```terrafrom\nresource \"cpln_ipset\" \"new\" {\n\t\t\n  name        = \"example\"\n  description = \"example\"\n\n  tags = {\n    terraform_generated = \"true\"\n  }\n\n  link = \"SELF_LINK_TO_WORKLOAD\"\n  \n  location {\n    name             = \"SELF_LINK_TO_LOCATION\"\n    retention_policy = \"keep\"\n  }\n}\n```\n",
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the IpSet.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the IpSet.\n"
                },
                "link": {
                    "type": "string",
                    "description": "The self link of a workload.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IpSetLocation:IpSetLocation"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IpSet.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IpSetStatus:IpSetStatus"
                    },
                    "description": "Status of the IpSet.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "selfLink",
                "statuses"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the IpSet.\n"
                },
                "link": {
                    "type": "string",
                    "description": "The self link of a workload.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IpSetLocation:IpSetLocation"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the IpSet.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IpSet resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the IpSet.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the IpSet.\n"
                    },
                    "link": {
                        "type": "string",
                        "description": "The self link of a workload.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/IpSetLocation:IpSetLocation"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the IpSet.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/IpSetStatus:IpSetStatus"
                        },
                        "description": "Status of the IpSet.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/location:Location": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud Provider of the location.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the location.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the location.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indication if location is enabled.\n"
                },
                "geos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/LocationGeo:LocationGeo"
                    }
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP ranges of the location.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Location.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the location.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cloudProvider",
                "cplnId",
                "description",
                "enabled",
                "geos",
                "ipRanges",
                "name",
                "region",
                "selfLink"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indication if location is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Location.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Location resources.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud Provider of the location.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the location.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the location.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indication if location is enabled.\n"
                    },
                    "geos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/LocationGeo:LocationGeo"
                        }
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP ranges of the location.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Location.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the location.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/mk8s:Mk8s": {
            "properties": {
                "addOns": {
                    "$ref": "#/types/cpln:index/Mk8sAddOns:Mk8sAddOns"
                },
                "alias": {
                    "type": "string",
                    "description": "The alias name of the Mk8s.\n"
                },
                "awsProvider": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProvider:Mk8sAwsProvider"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Mk8s.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Mk8s.\n"
                },
                "digitalOceanProvider": {
                    "$ref": "#/types/cpln:index/Mk8sDigitalOceanProvider:Mk8sDigitalOceanProvider"
                },
                "ephemeralProvider": {
                    "$ref": "#/types/cpln:index/Mk8sEphemeralProvider:Mk8sEphemeralProvider"
                },
                "firewalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sFirewall:Mk8sFirewall"
                    },
                    "description": "Allow-list.\n"
                },
                "genericProvider": {
                    "$ref": "#/types/cpln:index/Mk8sGenericProvider:Mk8sGenericProvider"
                },
                "hetznerProvider": {
                    "$ref": "#/types/cpln:index/Mk8sHetznerProvider:Mk8sHetznerProvider"
                },
                "lambdalabsProvider": {
                    "$ref": "#/types/cpln:index/Mk8sLambdalabsProvider:Mk8sLambdalabsProvider"
                },
                "linodeProvider": {
                    "$ref": "#/types/cpln:index/Mk8sLinodeProvider:Mk8sLinodeProvider"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Mk8s.\n"
                },
                "oblivusProvider": {
                    "$ref": "#/types/cpln:index/Mk8sOblivusProvider:Mk8sOblivusProvider"
                },
                "paperspaceProvider": {
                    "$ref": "#/types/cpln:index/Mk8sPaperspaceProvider:Mk8sPaperspaceProvider"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatus:Mk8sStatus"
                    },
                    "description": "Status of the mk8s.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tritonProvider": {
                    "$ref": "#/types/cpln:index/Mk8sTritonProvider:Mk8sTritonProvider"
                },
                "version": {
                    "type": "string"
                }
            },
            "required": [
                "alias",
                "cplnId",
                "name",
                "selfLink",
                "statuses",
                "version"
            ],
            "inputProperties": {
                "addOns": {
                    "$ref": "#/types/cpln:index/Mk8sAddOns:Mk8sAddOns"
                },
                "awsProvider": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProvider:Mk8sAwsProvider"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Mk8s.\n"
                },
                "digitalOceanProvider": {
                    "$ref": "#/types/cpln:index/Mk8sDigitalOceanProvider:Mk8sDigitalOceanProvider"
                },
                "ephemeralProvider": {
                    "$ref": "#/types/cpln:index/Mk8sEphemeralProvider:Mk8sEphemeralProvider"
                },
                "firewalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sFirewall:Mk8sFirewall"
                    },
                    "description": "Allow-list.\n"
                },
                "genericProvider": {
                    "$ref": "#/types/cpln:index/Mk8sGenericProvider:Mk8sGenericProvider"
                },
                "hetznerProvider": {
                    "$ref": "#/types/cpln:index/Mk8sHetznerProvider:Mk8sHetznerProvider"
                },
                "lambdalabsProvider": {
                    "$ref": "#/types/cpln:index/Mk8sLambdalabsProvider:Mk8sLambdalabsProvider"
                },
                "linodeProvider": {
                    "$ref": "#/types/cpln:index/Mk8sLinodeProvider:Mk8sLinodeProvider"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Mk8s.\n",
                    "willReplaceOnChanges": true
                },
                "oblivusProvider": {
                    "$ref": "#/types/cpln:index/Mk8sOblivusProvider:Mk8sOblivusProvider"
                },
                "paperspaceProvider": {
                    "$ref": "#/types/cpln:index/Mk8sPaperspaceProvider:Mk8sPaperspaceProvider"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tritonProvider": {
                    "$ref": "#/types/cpln:index/Mk8sTritonProvider:Mk8sTritonProvider"
                },
                "version": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Mk8s resources.\n",
                "properties": {
                    "addOns": {
                        "$ref": "#/types/cpln:index/Mk8sAddOns:Mk8sAddOns"
                    },
                    "alias": {
                        "type": "string",
                        "description": "The alias name of the Mk8s.\n"
                    },
                    "awsProvider": {
                        "$ref": "#/types/cpln:index/Mk8sAwsProvider:Mk8sAwsProvider"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Mk8s.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Mk8s.\n"
                    },
                    "digitalOceanProvider": {
                        "$ref": "#/types/cpln:index/Mk8sDigitalOceanProvider:Mk8sDigitalOceanProvider"
                    },
                    "ephemeralProvider": {
                        "$ref": "#/types/cpln:index/Mk8sEphemeralProvider:Mk8sEphemeralProvider"
                    },
                    "firewalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/Mk8sFirewall:Mk8sFirewall"
                        },
                        "description": "Allow-list.\n"
                    },
                    "genericProvider": {
                        "$ref": "#/types/cpln:index/Mk8sGenericProvider:Mk8sGenericProvider"
                    },
                    "hetznerProvider": {
                        "$ref": "#/types/cpln:index/Mk8sHetznerProvider:Mk8sHetznerProvider"
                    },
                    "lambdalabsProvider": {
                        "$ref": "#/types/cpln:index/Mk8sLambdalabsProvider:Mk8sLambdalabsProvider"
                    },
                    "linodeProvider": {
                        "$ref": "#/types/cpln:index/Mk8sLinodeProvider:Mk8sLinodeProvider"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Mk8s.\n",
                        "willReplaceOnChanges": true
                    },
                    "oblivusProvider": {
                        "$ref": "#/types/cpln:index/Mk8sOblivusProvider:Mk8sOblivusProvider"
                    },
                    "paperspaceProvider": {
                        "$ref": "#/types/cpln:index/Mk8sPaperspaceProvider:Mk8sPaperspaceProvider"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/Mk8sStatus:Mk8sStatus"
                        },
                        "description": "Status of the mk8s.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "tritonProvider": {
                        "$ref": "#/types/cpln:index/Mk8sTritonProvider:Mk8sTritonProvider"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/org:Org": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The associated account ID that will be used when creating the org. Only used on org creation. The account ID can be\nobtained from the `Org Management \u0026 Billing` page.\n"
                },
                "authConfig": {
                    "$ref": "#/types/cpln:index/OrgAuthConfig:OrgAuthConfig",
                    "description": "The configuration settings and parameters related to authentication within the org.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the org.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of org.\n"
                },
                "invitees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When an org is created, the list of email addresses which will receive an invitation to join the org and be assigned to\nthe `superusers` group. The user account used when creating the org will be included in this list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the org.\n"
                },
                "observability": {
                    "$ref": "#/types/cpln:index/OrgObservability:OrgObservability",
                    "description": "The retention period (in days) for logs, metrics, and traces. Charges apply for storage beyond the 30 day default.\n"
                },
                "security": {
                    "$ref": "#/types/cpln:index/OrgSecurity:OrgSecurity"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "sessionTimeoutSeconds": {
                    "type": "integer",
                    "description": "The idle time (in seconds) in which the console UI will automatically sign-out the user. Default: 900 (15 minutes)\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgStatus:OrgStatus"
                    },
                    "description": "Status of the org.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of the org's tags.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "observability",
                "selfLink",
                "statuses"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The associated account ID that will be used when creating the org. Only used on org creation. The account ID can be\nobtained from the `Org Management \u0026 Billing` page.\n"
                },
                "authConfig": {
                    "$ref": "#/types/cpln:index/OrgAuthConfig:OrgAuthConfig",
                    "description": "The configuration settings and parameters related to authentication within the org.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of org.\n"
                },
                "invitees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When an org is created, the list of email addresses which will receive an invitation to join the org and be assigned to\nthe `superusers` group. The user account used when creating the org will be included in this list.\n"
                },
                "observability": {
                    "$ref": "#/types/cpln:index/OrgObservability:OrgObservability",
                    "description": "The retention period (in days) for logs, metrics, and traces. Charges apply for storage beyond the 30 day default.\n"
                },
                "security": {
                    "$ref": "#/types/cpln:index/OrgSecurity:OrgSecurity"
                },
                "sessionTimeoutSeconds": {
                    "type": "integer",
                    "description": "The idle time (in seconds) in which the console UI will automatically sign-out the user. Default: 900 (15 minutes)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of the org's tags.\n"
                }
            },
            "requiredInputs": [
                "observability"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Org resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The associated account ID that will be used when creating the org. Only used on org creation. The account ID can be\nobtained from the `Org Management \u0026 Billing` page.\n"
                    },
                    "authConfig": {
                        "$ref": "#/types/cpln:index/OrgAuthConfig:OrgAuthConfig",
                        "description": "The configuration settings and parameters related to authentication within the org.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the org.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of org.\n"
                    },
                    "invitees": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "When an org is created, the list of email addresses which will receive an invitation to join the org and be assigned to\nthe `superusers` group. The user account used when creating the org will be included in this list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the org.\n"
                    },
                    "observability": {
                        "$ref": "#/types/cpln:index/OrgObservability:OrgObservability",
                        "description": "The retention period (in days) for logs, metrics, and traces. Charges apply for storage beyond the 30 day default.\n"
                    },
                    "security": {
                        "$ref": "#/types/cpln:index/OrgSecurity:OrgSecurity"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "sessionTimeoutSeconds": {
                        "type": "integer",
                        "description": "The idle time (in seconds) in which the console UI will automatically sign-out the user. Default: 900 (15 minutes)\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgStatus:OrgStatus"
                        },
                        "description": "Status of the org.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of the org's tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/orgLogging:OrgLogging": {
            "properties": {
                "cloudWatchLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingCloudWatchLogging:OrgLoggingCloudWatchLogging"
                    }
                },
                "coralogixLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingCoralogixLogging:OrgLoggingCoralogixLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/coralogix)\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the org.\n"
                },
                "datadogLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingDatadogLogging:OrgLoggingDatadogLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/datadog)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of org.\n"
                },
                "elasticLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingElasticLogging:OrgLoggingElasticLogging"
                    },
                    "description": "For logging and analyzing data within an org using Elastic Logging.\n"
                },
                "fluentdLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingFluentdLogging:OrgLoggingFluentdLogging"
                    }
                },
                "logzioLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingLogzioLogging:OrgLoggingLogzioLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/logz-io)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the org.\n"
                },
                "s3Loggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingS3Logging:OrgLoggingS3Logging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/s3)\n"
                },
                "stackdriverLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingStackdriverLogging:OrgLoggingStackdriverLogging"
                    }
                },
                "syslogLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingSyslogLogging:OrgLoggingSyslogLogging"
                    }
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of the org's tags.\n"
                }
            },
            "required": [
                "cplnId",
                "description",
                "name",
                "tags"
            ],
            "inputProperties": {
                "cloudWatchLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingCloudWatchLogging:OrgLoggingCloudWatchLogging"
                    }
                },
                "coralogixLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingCoralogixLogging:OrgLoggingCoralogixLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/coralogix)\n"
                },
                "datadogLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingDatadogLogging:OrgLoggingDatadogLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/datadog)\n"
                },
                "elasticLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingElasticLogging:OrgLoggingElasticLogging"
                    },
                    "description": "For logging and analyzing data within an org using Elastic Logging.\n"
                },
                "fluentdLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingFluentdLogging:OrgLoggingFluentdLogging"
                    }
                },
                "logzioLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingLogzioLogging:OrgLoggingLogzioLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/logz-io)\n"
                },
                "s3Loggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingS3Logging:OrgLoggingS3Logging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/s3)\n"
                },
                "stackdriverLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingStackdriverLogging:OrgLoggingStackdriverLogging"
                    }
                },
                "syslogLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingSyslogLogging:OrgLoggingSyslogLogging"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgLogging resources.\n",
                "properties": {
                    "cloudWatchLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingCloudWatchLogging:OrgLoggingCloudWatchLogging"
                        }
                    },
                    "coralogixLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingCoralogixLogging:OrgLoggingCoralogixLogging"
                        },
                        "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/coralogix)\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the org.\n"
                    },
                    "datadogLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingDatadogLogging:OrgLoggingDatadogLogging"
                        },
                        "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/datadog)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of org.\n"
                    },
                    "elasticLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingElasticLogging:OrgLoggingElasticLogging"
                        },
                        "description": "For logging and analyzing data within an org using Elastic Logging.\n"
                    },
                    "fluentdLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingFluentdLogging:OrgLoggingFluentdLogging"
                        }
                    },
                    "logzioLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingLogzioLogging:OrgLoggingLogzioLogging"
                        },
                        "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/logz-io)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the org.\n"
                    },
                    "s3Loggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingS3Logging:OrgLoggingS3Logging"
                        },
                        "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/s3)\n"
                    },
                    "stackdriverLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingStackdriverLogging:OrgLoggingStackdriverLogging"
                        }
                    },
                    "syslogLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingSyslogLogging:OrgLoggingSyslogLogging"
                        }
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of the org's tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/orgTracing:OrgTracing": {
            "properties": {
                "controlplaneTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingControlplaneTracing:OrgTracingControlplaneTracing"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the org.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of org.\n"
                },
                "lightstepTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingLightstepTracing:OrgTracingLightstepTracing"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the org.\n"
                },
                "otelTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingOtelTracing:OrgTracingOtelTracing"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of the org's tags.\n"
                }
            },
            "required": [
                "cplnId",
                "description",
                "name",
                "tags"
            ],
            "inputProperties": {
                "controlplaneTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingControlplaneTracing:OrgTracingControlplaneTracing"
                },
                "lightstepTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingLightstepTracing:OrgTracingLightstepTracing"
                },
                "otelTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingOtelTracing:OrgTracingOtelTracing"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgTracing resources.\n",
                "properties": {
                    "controlplaneTracing": {
                        "$ref": "#/types/cpln:index/OrgTracingControlplaneTracing:OrgTracingControlplaneTracing"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the org.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of org.\n"
                    },
                    "lightstepTracing": {
                        "$ref": "#/types/cpln:index/OrgTracingLightstepTracing:OrgTracingLightstepTracing"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the org.\n"
                    },
                    "otelTracing": {
                        "$ref": "#/types/cpln:index/OrgTracingOtelTracing:OrgTracingOtelTracing"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of the org's tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/policy:Policy": {
            "properties": {
                "bindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/PolicyBinding:PolicyBinding"
                    },
                    "description": "The association between a target kind and the bound permissions to service principals.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Policy.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "The GVC for `identity`, `workload` and `volumeset` target kinds only.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Policy.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "Origin of the Policy. Either `builtin` or `default`.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,\ndo not include the attribute.\n"
                },
                "targetKind": {
                    "type": "string",
                    "description": "The kind of resource to target (e.g., gvc, serviceaccount, etc.).\n"
                },
                "targetLinks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the targets this policy will be applied to. Not used if `target` is set to `all`.\n"
                },
                "targetQuery": {
                    "$ref": "#/types/cpln:index/PolicyTargetQuery:PolicyTargetQuery",
                    "description": "A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "origin",
                "selfLink",
                "targetKind"
            ],
            "inputProperties": {
                "bindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/PolicyBinding:PolicyBinding"
                    },
                    "description": "The association between a target kind and the bound permissions to service principals.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Policy.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "The GVC for `identity`, `workload` and `volumeset` target kinds only.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Policy.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,\ndo not include the attribute.\n"
                },
                "targetKind": {
                    "type": "string",
                    "description": "The kind of resource to target (e.g., gvc, serviceaccount, etc.).\n",
                    "willReplaceOnChanges": true
                },
                "targetLinks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the targets this policy will be applied to. Not used if `target` is set to `all`.\n"
                },
                "targetQuery": {
                    "$ref": "#/types/cpln:index/PolicyTargetQuery:PolicyTargetQuery",
                    "description": "A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.\n"
                }
            },
            "requiredInputs": [
                "targetKind"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "bindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/PolicyBinding:PolicyBinding"
                        },
                        "description": "The association between a target kind and the bound permissions to service principals.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Policy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Policy.\n"
                    },
                    "gvc": {
                        "type": "string",
                        "description": "The GVC for `identity`, `workload` and `volumeset` target kinds only.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "origin": {
                        "type": "string",
                        "description": "Origin of the Policy. Either `builtin` or `default`.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,\ndo not include the attribute.\n"
                    },
                    "targetKind": {
                        "type": "string",
                        "description": "The kind of resource to target (e.g., gvc, serviceaccount, etc.).\n",
                        "willReplaceOnChanges": true
                    },
                    "targetLinks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the targets this policy will be applied to. Not used if `target` is set to `all`.\n"
                    },
                    "targetQuery": {
                        "$ref": "#/types/cpln:index/PolicyTargetQuery:PolicyTargetQuery",
                        "description": "A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/secret:Secret": {
            "properties": {
                "aws": {
                    "$ref": "#/types/cpln:index/SecretAws:SecretAws",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#aws).\n"
                },
                "azureConnector": {
                    "$ref": "#/types/cpln:index/SecretAzureConnector:SecretAzureConnector",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#azure-connector).\n"
                },
                "azureSdk": {
                    "type": "string",
                    "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#azure).\n",
                    "secret": true
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Secret.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Secret.\n"
                },
                "dictionary": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of unique key-value pairs. [Reference Page](https://docs.controlplane.com/reference/secret#dictionary).\n"
                },
                "dictionaryAsEnvs": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "If a dictionary secret is defined, this output will be a key-value map in the following format: `key =\ncpln://secret/SECRET_NAME.key`.\n"
                },
                "docker": {
                    "type": "string",
                    "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#docker).\n",
                    "secret": true
                },
                "ecr": {
                    "$ref": "#/types/cpln:index/SecretEcr:SecretEcr",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#ecr)\n"
                },
                "gcp": {
                    "type": "string",
                    "description": "JSON string containing the GCP secret. [Reference Page](https://docs.controlplane.com/reference/secret#gcp)\n",
                    "secret": true
                },
                "keypair": {
                    "$ref": "#/types/cpln:index/SecretKeypair:SecretKeypair",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#keypair).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret.\n"
                },
                "natsAccount": {
                    "$ref": "#/types/cpln:index/SecretNatsAccount:SecretNatsAccount",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#nats-account).\n"
                },
                "opaque": {
                    "$ref": "#/types/cpln:index/SecretOpaque:SecretOpaque",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#opaque).\n"
                },
                "secretLink": {
                    "type": "string",
                    "description": "Output used when linking a secret to an environment variable or volume.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tls": {
                    "$ref": "#/types/cpln:index/SecretTls:SecretTls",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#tls).\n"
                },
                "userpass": {
                    "$ref": "#/types/cpln:index/SecretUserpass:SecretUserpass",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#username).\n"
                }
            },
            "required": [
                "cplnId",
                "dictionaryAsEnvs",
                "name",
                "secretLink",
                "selfLink"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/cpln:index/SecretAws:SecretAws",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#aws).\n"
                },
                "azureConnector": {
                    "$ref": "#/types/cpln:index/SecretAzureConnector:SecretAzureConnector",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#azure-connector).\n"
                },
                "azureSdk": {
                    "type": "string",
                    "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#azure).\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Secret.\n"
                },
                "dictionary": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of unique key-value pairs. [Reference Page](https://docs.controlplane.com/reference/secret#dictionary).\n"
                },
                "docker": {
                    "type": "string",
                    "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#docker).\n",
                    "secret": true
                },
                "ecr": {
                    "$ref": "#/types/cpln:index/SecretEcr:SecretEcr",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#ecr)\n"
                },
                "gcp": {
                    "type": "string",
                    "description": "JSON string containing the GCP secret. [Reference Page](https://docs.controlplane.com/reference/secret#gcp)\n",
                    "secret": true
                },
                "keypair": {
                    "$ref": "#/types/cpln:index/SecretKeypair:SecretKeypair",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#keypair).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret.\n",
                    "willReplaceOnChanges": true
                },
                "natsAccount": {
                    "$ref": "#/types/cpln:index/SecretNatsAccount:SecretNatsAccount",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#nats-account).\n"
                },
                "opaque": {
                    "$ref": "#/types/cpln:index/SecretOpaque:SecretOpaque",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#opaque).\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tls": {
                    "$ref": "#/types/cpln:index/SecretTls:SecretTls",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#tls).\n"
                },
                "userpass": {
                    "$ref": "#/types/cpln:index/SecretUserpass:SecretUserpass",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#username).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/cpln:index/SecretAws:SecretAws",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#aws).\n"
                    },
                    "azureConnector": {
                        "$ref": "#/types/cpln:index/SecretAzureConnector:SecretAzureConnector",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#azure-connector).\n"
                    },
                    "azureSdk": {
                        "type": "string",
                        "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#azure).\n",
                        "secret": true
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Secret.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Secret.\n"
                    },
                    "dictionary": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "List of unique key-value pairs. [Reference Page](https://docs.controlplane.com/reference/secret#dictionary).\n"
                    },
                    "dictionaryAsEnvs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "If a dictionary secret is defined, this output will be a key-value map in the following format: `key =\ncpln://secret/SECRET_NAME.key`.\n"
                    },
                    "docker": {
                        "type": "string",
                        "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#docker).\n",
                        "secret": true
                    },
                    "ecr": {
                        "$ref": "#/types/cpln:index/SecretEcr:SecretEcr",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#ecr)\n"
                    },
                    "gcp": {
                        "type": "string",
                        "description": "JSON string containing the GCP secret. [Reference Page](https://docs.controlplane.com/reference/secret#gcp)\n",
                        "secret": true
                    },
                    "keypair": {
                        "$ref": "#/types/cpln:index/SecretKeypair:SecretKeypair",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#keypair).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "natsAccount": {
                        "$ref": "#/types/cpln:index/SecretNatsAccount:SecretNatsAccount",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#nats-account).\n"
                    },
                    "opaque": {
                        "$ref": "#/types/cpln:index/SecretOpaque:SecretOpaque",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#opaque).\n"
                    },
                    "secretLink": {
                        "type": "string",
                        "description": "Output used when linking a secret to an environment variable or volume.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "tls": {
                        "$ref": "#/types/cpln:index/SecretTls:SecretTls",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#tls).\n"
                    },
                    "userpass": {
                        "$ref": "#/types/cpln:index/SecretUserpass:SecretUserpass",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#username).\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/serviceAccount:ServiceAccount": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Service Account.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Service Account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Service Account.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "Origin of the Policy. Either `builtin` or `default`.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "origin",
                "selfLink"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Service Account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Service Account.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Service Account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Service Account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Service Account.\n",
                        "willReplaceOnChanges": true
                    },
                    "origin": {
                        "type": "string",
                        "description": "Origin of the Policy. Either `builtin` or `default`.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/serviceAccountKey:ServiceAccountKey": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The timestamp, in UTC, when the key was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Service Account Key.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The generated key.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The generated name of the key.\n"
                },
                "serviceAccountName": {
                    "type": "string",
                    "description": "The name of an existing Service Account this key will belong to.\n"
                }
            },
            "required": [
                "created",
                "description",
                "key",
                "name",
                "serviceAccountName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Service Account Key.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccountName": {
                    "type": "string",
                    "description": "The name of an existing Service Account this key will belong to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "serviceAccountName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccountKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp, in UTC, when the key was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Service Account Key.\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "The generated key.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The generated name of the key.\n"
                    },
                    "serviceAccountName": {
                        "type": "string",
                        "description": "The name of an existing Service Account this key will belong to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/volumeSet:VolumeSet": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/cpln:index/VolumeSetAutoscaling:VolumeSetAutoscaling",
                    "description": "Automated adjustment of the volume set's capacity based on predefined metrics or conditions.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "ID, in GUID format, of the Volume Set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Volume Set.\n"
                },
                "fileSystemType": {
                    "type": "string",
                    "description": "Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the associated GVC.\n"
                },
                "initialCapacity": {
                    "type": "integer",
                    "description": "The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd`\nis `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Volume Set.\n"
                },
                "performanceClass": {
                    "type": "string",
                    "description": "Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or\n`high-throughput-ssd`\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "snapshots": {
                    "$ref": "#/types/cpln:index/VolumeSetSnapshots:VolumeSetSnapshots",
                    "description": "Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/VolumeSetStatus:VolumeSetStatus"
                    },
                    "description": "Status of the Volume Set.\n"
                },
                "storageClassSuffix": {
                    "type": "string",
                    "description": "For self-hosted locations only. The storage class used for volumes in this set will be\n{performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be\n{performanceClass}-{fileSystemType}\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "volumesetLink": {
                    "type": "string",
                    "description": "Output used when linking a volume set to a workload.\n"
                }
            },
            "required": [
                "cplnId",
                "gvc",
                "initialCapacity",
                "name",
                "performanceClass",
                "selfLink",
                "statuses",
                "volumesetLink"
            ],
            "inputProperties": {
                "autoscaling": {
                    "$ref": "#/types/cpln:index/VolumeSetAutoscaling:VolumeSetAutoscaling",
                    "description": "Automated adjustment of the volume set's capacity based on predefined metrics or conditions.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Volume Set.\n"
                },
                "fileSystemType": {
                    "type": "string",
                    "description": "Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`\n",
                    "willReplaceOnChanges": true
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the associated GVC.\n",
                    "willReplaceOnChanges": true
                },
                "initialCapacity": {
                    "type": "integer",
                    "description": "The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd`\nis `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Volume Set.\n",
                    "willReplaceOnChanges": true
                },
                "performanceClass": {
                    "type": "string",
                    "description": "Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or\n`high-throughput-ssd`\n",
                    "willReplaceOnChanges": true
                },
                "snapshots": {
                    "$ref": "#/types/cpln:index/VolumeSetSnapshots:VolumeSetSnapshots",
                    "description": "Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.\n"
                },
                "storageClassSuffix": {
                    "type": "string",
                    "description": "For self-hosted locations only. The storage class used for volumes in this set will be\n{performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be\n{performanceClass}-{fileSystemType}\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "requiredInputs": [
                "gvc",
                "initialCapacity",
                "performanceClass"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VolumeSet resources.\n",
                "properties": {
                    "autoscaling": {
                        "$ref": "#/types/cpln:index/VolumeSetAutoscaling:VolumeSetAutoscaling",
                        "description": "Automated adjustment of the volume set's capacity based on predefined metrics or conditions.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "ID, in GUID format, of the Volume Set.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Volume Set.\n"
                    },
                    "fileSystemType": {
                        "type": "string",
                        "description": "Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`\n",
                        "willReplaceOnChanges": true
                    },
                    "gvc": {
                        "type": "string",
                        "description": "Name of the associated GVC.\n",
                        "willReplaceOnChanges": true
                    },
                    "initialCapacity": {
                        "type": "integer",
                        "description": "The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd`\nis `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Volume Set.\n",
                        "willReplaceOnChanges": true
                    },
                    "performanceClass": {
                        "type": "string",
                        "description": "Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or\n`high-throughput-ssd`\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "snapshots": {
                        "$ref": "#/types/cpln:index/VolumeSetSnapshots:VolumeSetSnapshots",
                        "description": "Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/VolumeSetStatus:VolumeSetStatus"
                        },
                        "description": "Status of the Volume Set.\n"
                    },
                    "storageClassSuffix": {
                        "type": "string",
                        "description": "For self-hosted locations only. The storage class used for volumes in this set will be\n{performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be\n{performanceClass}-{fileSystemType}\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "volumesetLink": {
                        "type": "string",
                        "description": "Output used when linking a volume set to a workload.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/workload:Workload": {
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadContainer:WorkloadContainer"
                    },
                    "description": "An isolated and lightweight runtime environment that encapsulates an application and its dependencies.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Workload.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Workload.\n"
                },
                "firewallSpec": {
                    "$ref": "#/types/cpln:index/WorkloadFirewallSpec:WorkloadFirewallSpec",
                    "description": "Control of inbound and outbound access to the workload for external (public) and internal (service to service) traffic.\nAccess is restricted by default.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the associated GVC.\n"
                },
                "identityLink": {
                    "type": "string",
                    "description": "Full link to an Identity.\n"
                },
                "job": {
                    "$ref": "#/types/cpln:index/WorkloadJob:WorkloadJob",
                    "description": "[Cron Job Reference Page](https://docs.controlplane.com/reference/workload#cron).\n"
                },
                "loadBalancer": {
                    "$ref": "#/types/cpln:index/WorkloadLoadBalancer:WorkloadLoadBalancer"
                },
                "localOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadLocalOption:WorkloadLocalOption"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Workload.\n"
                },
                "options": {
                    "$ref": "#/types/cpln:index/WorkloadOptions:WorkloadOptions",
                    "description": "Configurable settings or parameters that allow fine-tuning and customization of the behavior, performance, and\ncharacteristics of the workload.\n"
                },
                "rolloutOptions": {
                    "$ref": "#/types/cpln:index/WorkloadRolloutOptions:WorkloadRolloutOptions",
                    "description": "Defines the parameters for updating applications and services, including settings for minimum readiness, unavailable\nreplicas, surge replicas, and scaling policies.\n"
                },
                "securityOptions": {
                    "$ref": "#/types/cpln:index/WorkloadSecurityOptions:WorkloadSecurityOptions",
                    "description": "Allows for the configuration of the `file system group id` and `geo location`\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "sidecar": {
                    "$ref": "#/types/cpln:index/WorkloadSidecar:WorkloadSidecar"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatus:WorkloadStatus"
                    },
                    "description": "Status of the workload.\n"
                },
                "supportDynamicTags": {
                    "type": "boolean",
                    "description": "Workload will automatically redeploy when one of the container images is updated in the container registry. Default:\nfalse.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Workload Type. Either `serverless`, `standard`, `stateful`, or `cron`.\n"
                }
            },
            "required": [
                "containers",
                "cplnId",
                "gvc",
                "name",
                "selfLink",
                "statuses",
                "type"
            ],
            "inputProperties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadContainer:WorkloadContainer"
                    },
                    "description": "An isolated and lightweight runtime environment that encapsulates an application and its dependencies.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Workload.\n"
                },
                "firewallSpec": {
                    "$ref": "#/types/cpln:index/WorkloadFirewallSpec:WorkloadFirewallSpec",
                    "description": "Control of inbound and outbound access to the workload for external (public) and internal (service to service) traffic.\nAccess is restricted by default.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the associated GVC.\n",
                    "willReplaceOnChanges": true
                },
                "identityLink": {
                    "type": "string",
                    "description": "Full link to an Identity.\n"
                },
                "job": {
                    "$ref": "#/types/cpln:index/WorkloadJob:WorkloadJob",
                    "description": "[Cron Job Reference Page](https://docs.controlplane.com/reference/workload#cron).\n"
                },
                "loadBalancer": {
                    "$ref": "#/types/cpln:index/WorkloadLoadBalancer:WorkloadLoadBalancer"
                },
                "localOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadLocalOption:WorkloadLocalOption"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Workload.\n",
                    "willReplaceOnChanges": true
                },
                "options": {
                    "$ref": "#/types/cpln:index/WorkloadOptions:WorkloadOptions",
                    "description": "Configurable settings or parameters that allow fine-tuning and customization of the behavior, performance, and\ncharacteristics of the workload.\n"
                },
                "rolloutOptions": {
                    "$ref": "#/types/cpln:index/WorkloadRolloutOptions:WorkloadRolloutOptions",
                    "description": "Defines the parameters for updating applications and services, including settings for minimum readiness, unavailable\nreplicas, surge replicas, and scaling policies.\n"
                },
                "securityOptions": {
                    "$ref": "#/types/cpln:index/WorkloadSecurityOptions:WorkloadSecurityOptions",
                    "description": "Allows for the configuration of the `file system group id` and `geo location`\n"
                },
                "sidecar": {
                    "$ref": "#/types/cpln:index/WorkloadSidecar:WorkloadSidecar"
                },
                "supportDynamicTags": {
                    "type": "boolean",
                    "description": "Workload will automatically redeploy when one of the container images is updated in the container registry. Default:\nfalse.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Workload Type. Either `serverless`, `standard`, `stateful`, or `cron`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "containers",
                "gvc",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workload resources.\n",
                "properties": {
                    "containers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/WorkloadContainer:WorkloadContainer"
                        },
                        "description": "An isolated and lightweight runtime environment that encapsulates an application and its dependencies.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Workload.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Workload.\n"
                    },
                    "firewallSpec": {
                        "$ref": "#/types/cpln:index/WorkloadFirewallSpec:WorkloadFirewallSpec",
                        "description": "Control of inbound and outbound access to the workload for external (public) and internal (service to service) traffic.\nAccess is restricted by default.\n"
                    },
                    "gvc": {
                        "type": "string",
                        "description": "Name of the associated GVC.\n",
                        "willReplaceOnChanges": true
                    },
                    "identityLink": {
                        "type": "string",
                        "description": "Full link to an Identity.\n"
                    },
                    "job": {
                        "$ref": "#/types/cpln:index/WorkloadJob:WorkloadJob",
                        "description": "[Cron Job Reference Page](https://docs.controlplane.com/reference/workload#cron).\n"
                    },
                    "loadBalancer": {
                        "$ref": "#/types/cpln:index/WorkloadLoadBalancer:WorkloadLoadBalancer"
                    },
                    "localOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/WorkloadLocalOption:WorkloadLocalOption"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Workload.\n",
                        "willReplaceOnChanges": true
                    },
                    "options": {
                        "$ref": "#/types/cpln:index/WorkloadOptions:WorkloadOptions",
                        "description": "Configurable settings or parameters that allow fine-tuning and customization of the behavior, performance, and\ncharacteristics of the workload.\n"
                    },
                    "rolloutOptions": {
                        "$ref": "#/types/cpln:index/WorkloadRolloutOptions:WorkloadRolloutOptions",
                        "description": "Defines the parameters for updating applications and services, including settings for minimum readiness, unavailable\nreplicas, surge replicas, and scaling policies.\n"
                    },
                    "securityOptions": {
                        "$ref": "#/types/cpln:index/WorkloadSecurityOptions:WorkloadSecurityOptions",
                        "description": "Allows for the configuration of the `file system group id` and `geo location`\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "sidecar": {
                        "$ref": "#/types/cpln:index/WorkloadSidecar:WorkloadSidecar"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/WorkloadStatus:WorkloadStatus"
                        },
                        "description": "Status of the workload.\n"
                    },
                    "supportDynamicTags": {
                        "type": "boolean",
                        "description": "Workload will automatically redeploy when one of the container images is updated in the container registry. Default:\nfalse.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Workload Type. Either `serverless`, `standard`, `stateful`, or `cron`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "cpln:index/getCloudAccount:getCloudAccount": {
            "description": "Use this data source to access information about an existing [Cloud Account](https://docs.controlplane.com/reference/cloudaccount) within Control Plane.\n\n## Outputs\n\n- **aws_identifiers** (String)\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst this = cpln.getCloudAccount({});\nexport const cloudAccount = _this.then(_this =\u003e _this.awsIdentifiers);\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\nthis = cpln.get_cloud_account()\npulumi.export(\"cloudAccount\", this.aws_identifiers)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Cpln.GetCloudAccount.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"cloudAccount\"] = @this.Apply(@this =\u003e @this.Apply(getCloudAccountResult =\u003e getCloudAccountResult.AwsIdentifiers)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthis, err := cpln.LookupCloudAccount(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"cloudAccount\", this.AwsIdentifiers)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CplnFunctions.getCloudAccount();\n\n        ctx.export(\"cloudAccount\", this_.awsIdentifiers());\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: cpln:getCloudAccount\n      Arguments: {}\noutputs:\n  cloudAccount: ${this.awsIdentifiers}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getCloudAccount.\n",
                "properties": {
                    "awsIdentifiers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "awsIdentifiers",
                    "id"
                ]
            }
        },
        "cpln:index/getGvc:getGvc": {
            "description": "Use this data source to access information about an existing [Global Virtual Cloud (GVC)](https://docs.controlplane.com/reference/gvc) within Control Plane. \n\n## Required\n\n- **name** (String) Name of the GVC.\n\n## Outputs\n\nThe following attributes are exported:\n\n- **cpln_id** (String) The ID, in GUID format, of the GVC.\n- **name** (String) Name of the GVC.\n- **alias** (String) The alias name of the GVC.\n- **description** (String) Description of the GVC.\n- **tags** (Map of String) Key-value map of resource tags.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n- **domain** (String) Custom domain name used by associated workloads.\n- **locations** (List of String) A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.\n- **pull_secrets** (List of String) A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any private image repository referenced by Workloads within the GVC.\n- **lightstep_tracing** (Block List, Max: 1) (see below).\n- **otel_tracing** (Block List, Max: 1) (see below).\n- **controlplane_tracing** (Block List, Max: 1) (see below).\n- **load_balancer** (Block List, Max: 1) (see below).\n\n\u003ca id=\"nestedblock--lightstep_tracing\"\u003e\u003c/a\u003e\n\n### `lightstep_tracing`\n\n- **sampling** (Int) Sampling percentage.\n- **endpoint** (String) Tracing Endpoint Workload. Either the canonical endpoint or the internal endpoint.\n- **credentials** (String) Full link to referenced Opaque Secret.\n\n\u003ca id=\"nestedblock--otel_tracing\"\u003e\u003c/a\u003e\n\n### `otel_tracing`\n\n- **sampling** (Int) Determines what percentage of requests should be traced.\n- **endpoint** (String) Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.\n- **custom_tags** (Map of String) Key-value map of custom tags.\n\n\u003ca id=\"nestedblock--controlplane_tracing\"\u003e\u003c/a\u003e\n\n### `controlplane_tracing`\n\n- **sampling** (Int) Determines what percentage of requests should be traced.\n- **custom_tags** (Map of String) Key-value map of custom tags.\n\n\u003ca id=\"nestedblock--load_balancer\"\u003e\u003c/a\u003e\n\n### `load_balancer`\n\n- **dedicated** (Boolean) Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.\n\n- **trusted_proxies** (Int) Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst gvc = cpln.getGvc({\n    name: \"gvc-example\",\n});\nexport const gvcId = gvc.then(gvc =\u003e gvc.id);\nexport const gvcLocations = gvc.then(gvc =\u003e gvc.locations);\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\ngvc = cpln.get_gvc(name=\"gvc-example\")\npulumi.export(\"gvcId\", gvc.id)\npulumi.export(\"gvcLocations\", gvc.locations)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gvc = Cpln.GetGvc.Invoke(new()\n    {\n        Name = \"gvc-example\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"gvcId\"] = gvc.Apply(getGvcResult =\u003e getGvcResult.Id),\n        [\"gvcLocations\"] = gvc.Apply(getGvcResult =\u003e getGvcResult.Locations),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgvc, err := cpln.LookupGvc(ctx, \u0026cpln.LookupGvcArgs{\n\t\t\tName: \"gvc-example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"gvcId\", gvc.Id)\n\t\tctx.Export(\"gvcLocations\", gvc.Locations)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport com.pulumi.cpln.inputs.GetGvcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var gvc = CplnFunctions.getGvc(GetGvcArgs.builder()\n            .name(\"gvc-example\")\n            .build());\n\n        ctx.export(\"gvcId\", gvc.applyValue(getGvcResult -\u003e getGvcResult.id()));\n        ctx.export(\"gvcLocations\", gvc.applyValue(getGvcResult -\u003e getGvcResult.locations()));\n    }\n}\n```\n```yaml\nvariables:\n  gvc:\n    fn::invoke:\n      Function: cpln:getGvc\n      Arguments:\n        name: gvc-example\noutputs:\n  gvcId: ${gvc.id}\n  gvcLocations: ${gvc.locations}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGvc.\n",
                "properties": {
                    "controlplaneTracing": {
                        "$ref": "#/types/cpln:index/getGvcControlplaneTracing:getGvcControlplaneTracing"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string",
                        "deprecationMessage": "Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead."
                    },
                    "env": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "lightstepTracing": {
                        "$ref": "#/types/cpln:index/getGvcLightstepTracing:getGvcLightstepTracing"
                    },
                    "loadBalancer": {
                        "$ref": "#/types/cpln:index/getGvcLoadBalancer:getGvcLoadBalancer"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "otelTracing": {
                        "$ref": "#/types/cpln:index/getGvcOtelTracing:getGvcOtelTracing"
                    },
                    "pullSecrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sidecar": {
                        "$ref": "#/types/cpln:index/getGvcSidecar:getGvcSidecar"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGvc.\n",
                "properties": {
                    "alias": {
                        "type": "string"
                    },
                    "controlplaneTracing": {
                        "$ref": "#/types/cpln:index/getGvcControlplaneTracing:getGvcControlplaneTracing"
                    },
                    "cplnId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string",
                        "deprecationMessage": "Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead."
                    },
                    "env": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lightstepTracing": {
                        "$ref": "#/types/cpln:index/getGvcLightstepTracing:getGvcLightstepTracing"
                    },
                    "loadBalancer": {
                        "$ref": "#/types/cpln:index/getGvcLoadBalancer:getGvcLoadBalancer"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "otelTracing": {
                        "$ref": "#/types/cpln:index/getGvcOtelTracing:getGvcOtelTracing"
                    },
                    "pullSecrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "sidecar": {
                        "$ref": "#/types/cpln:index/getGvcSidecar:getGvcSidecar"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "alias",
                    "cplnId",
                    "name",
                    "selfLink",
                    "id"
                ]
            }
        },
        "cpln:index/getImage:getImage": {
            "description": "Use this data source to access information about an [Image](https://docs.controlplane.com/reference/image) within Control Plane.\n\n## Required\n\n- **name** (String) Name of the image. If the tag of the image is not specified, the latest image will be fetched for this data source.\n\n## Outputs\n\nThe following attributes are exported:\n\n- **cpln_id** (String) The ID, in GUID format, of the Image.\n- **name** (String) Name of the Image.\n- **tags** (Map of String) Key-value map of resource tags.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n- **tag** (String) Tag of the image.\n- **repository** (String) Respository name of the image.\n- **digest** (String) A unique SHA256 hash used to identify a specific image version within the image registry.\n- **manifest** (Block List, Max: 1) (see below)\n\n\u003ca id=\"nestedblock--manifest\"\u003e\u003c/a\u003e\n\n### `manifest`\n\n The manifest provides configuration and layers information about the image. It plays a crucial role in the Docker image distribution system, enabling image creation, verification, and replication in a consistent and secure manner.\n\n- **config** (Block List, Max: 1) (see below).\n- **layers** (Block List) (see below).\n- **media_type** (String) Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n- **schema_version** (Number) The version of the Docker Image Manifest format.\n\n\u003ca id=\"nestedblock--config--layers\"\u003e\u003c/a\u003e\n\n### `config` and `layers`\n\nThe config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.\n\nLayers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.\n\n- **size** (Number) The size of the image or layer in bytes. This helps in estimating the space required and the download time.\n- **digest** (String) A unique SHA256 hash used to identify a specific image version within the image registry.\n- **media_type** (String) Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst image-name-only = cpln.getImage({\n    name: \"IMAGE_NAME\",\n});\nconst image-name-with-tag = cpln.getImage({\n    name: \"IMAGE_NAME:TAG\",\n});\nexport const latestImage = image_name_only;\nexport const specificImage = image_name_with_tag;\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\nimage_name_only = cpln.get_image(name=\"IMAGE_NAME\")\nimage_name_with_tag = cpln.get_image(name=\"IMAGE_NAME:TAG\")\npulumi.export(\"latestImage\", image_name_only)\npulumi.export(\"specificImage\", image_name_with_tag)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var image_name_only = Cpln.GetImage.Invoke(new()\n    {\n        Name = \"IMAGE_NAME\",\n    });\n\n    var image_name_with_tag = Cpln.GetImage.Invoke(new()\n    {\n        Name = \"IMAGE_NAME:TAG\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"latestImage\"] = image_name_only,\n        [\"specificImage\"] = image_name_with_tag,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\timage_name_only, err := cpln.GetImage(ctx, \u0026cpln.GetImageArgs{\n\t\t\tName: \"IMAGE_NAME\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\timage_name_with_tag, err := cpln.GetImage(ctx, \u0026cpln.GetImageArgs{\n\t\t\tName: \"IMAGE_NAME:TAG\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"latestImage\", image_name_only)\n\t\tctx.Export(\"specificImage\", image_name_with_tag)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport com.pulumi.cpln.inputs.GetImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var image-name-only = CplnFunctions.getImage(GetImageArgs.builder()\n            .name(\"IMAGE_NAME\")\n            .build());\n\n        final var image-name-with-tag = CplnFunctions.getImage(GetImageArgs.builder()\n            .name(\"IMAGE_NAME:TAG\")\n            .build());\n\n        ctx.export(\"latestImage\", image_name_only);\n        ctx.export(\"specificImage\", image_name_with_tag);\n    }\n}\n```\n```yaml\nvariables:\n  image-name-only:\n    fn::invoke:\n      Function: cpln:getImage\n      Arguments:\n        name: IMAGE_NAME\n  image-name-with-tag:\n    fn::invoke:\n      Function: cpln:getImage\n      Arguments:\n        name: IMAGE_NAME:TAG\noutputs:\n  latestImage: ${[\"image-name-only\"]}\n  specificImage: ${[\"image-name-with-tag\"]}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "cplnId": {
                        "type": "string"
                    },
                    "digest": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "manifests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/getImageManifest:getImageManifest"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "cplnId",
                    "digest",
                    "manifests",
                    "name",
                    "repository",
                    "selfLink",
                    "tag",
                    "tags",
                    "id"
                ]
            }
        },
        "cpln:index/getImages:getImages": {
            "description": "Use this data source to access information about all [Images](https://docs.controlplane.com/reference/image) within Control Plane.\n\n## Optional\n\n- **query** (Block List, Max: 1) (see below).\n\n\u003ca id=\"nestedblock--query\"\u003e\u003c/a\u003e\n\n### `query`\n\nOptional:\n\n- **fetch** (String) Type of fetch. Specify either: `links` or `items`. Default: `items`.\n- **spec** (Block List, Max: 1) (see below).\n\n\u003ca id=\"nestedblock--query--spec\"\u003e\u003c/a\u003e\n\n### `query.spec`\n\nOptional:\n\n- **match** (String) Type of match. Available values: `all`, `any`, `none`. Default: `all`.\n- **terms** (Block List) (see below).\n\n\u003ca id=\"nestedblock--query--spec--terms\"\u003e\u003c/a\u003e\n\n### `query.spec.terms`\n\n\u003c!-- Terms can only contain one of the following attributes: `property`, `rel`, `tag`. --\u003e\n\nTerms can only contain one of the following attributes: `property`, `rel`, `tag`.\n\nOptional:\n\n- **op** (String) Type of query operation. Available values: `=`, `\u003e`, `\u003e=`, `\u003c`, `\u003c=`, `!=`, `exists`, `!exists`. Default: `=`.\n\n- **property** (String) Property to use for query evaluation.\n- **rel** (String) Rel to use use for query evaluation.\n- **tag** (String) Tag key to use for query evaluation.\n- **value** (String) Testing value for query evaluation.\n\n## Outputs\n\nThe following attributes are exported:\n\n- **images** (Block List) (see below).\n\n\u003ca id=\"nestedblock--images\"\u003e\u003c/a\u003e\n\n### `images`\n\n- **cpln_id** (String) The ID, in GUID format, of the Image.\n- **name** (String) Name of the Image.\n- **tags** (Map of String) Key-value map of resource tags.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n- **tag** (String) Tag of the image.\n- **repository** (String) Respository name of the image.\n- **digest** (String) A unique SHA256 hash used to identify a specific image version within the image registry.\n- **manifest** (Block List, Max: 1) (see below)\n\n\u003ca id=\"nestedblock--manifest\"\u003e\u003c/a\u003e\n\n### `manifest`\n\n The manifest provides configuration and layers information about the image. It plays a crucial role in the Docker image distribution system, enabling image creation, verification, and replication in a consistent and secure manner.\n\n- **config** (Block List, Max: 1) (see below).\n- **layers** (Block List) (see below).\n- **media_type** (String) Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n- **schema_version** (Number) The version of the Docker Image Manifest format.\n\n\u003ca id=\"nestedblock--config--layers\"\u003e\u003c/a\u003e\n\n### `config` and `layers`\n\nThe config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.\n\nLayers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.\n\n- **size** (Number) The size of the image or layer in bytes. This helps in estimating the space required and the download time.\n- **digest** (String) A unique SHA256 hash used to identify a specific image version within the image registry.\n- **media_type** (String) Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n\n",
            "inputs": {
                "description": "A collection of arguments for invoking getImages.\n",
                "properties": {
                    "query": {
                        "$ref": "#/types/cpln:index/getImagesQuery:getImagesQuery"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImages.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/getImagesImage:getImagesImage"
                        }
                    },
                    "query": {
                        "$ref": "#/types/cpln:index/getImagesQuery:getImagesQuery"
                    }
                },
                "type": "object",
                "required": [
                    "images",
                    "id"
                ]
            }
        },
        "cpln:index/getLocation:getLocation": {
            "description": "Use this data source to access information about a [Location](https://docs.controlplane.com/reference/location) within Control Plane.\n\n## Required\n\n- **name** (String) Name of the location (i.e. `aws-us-west-2`).\n\n## Outputs\n\nThe following attributes are exported:\n\n- **cpln_id** (String) The ID, in GUID format, of the location.\n- **name** (String) Name of the location.\n- **description** (String) Description of the location.\n- **tags** (Map of String) Key-value map of resource tags.\n- **cloud_provider** (String) Cloud Provider of the location.\n- **region** (String) Region of the location.\n- **enabled** (Boolean) Indication if location is enabled.\n- **geo** (Block List, Max: 1) (see below)\n- **ip_ranges** (List of String) A list of IP ranges of the location.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n\n\u003ca id=\"nestedblock--geo\"\u003e\u003c/a\u003e\n\n### `geo`\n\nLocation geographical details\n\n- **lat** (Number) Latitude.\n- **lon** (Number) Longitude.\n- **country** (String) Country.\n- **state** (String) State.\n- **city** (String) City.\n- **continent** (String) Continent.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst locationLocation = cpln.getLocation({\n    name: \"aws-us-west-2\",\n});\nexport const location = locationLocation;\nexport const locationEnabled = locationLocation.then(locationLocation =\u003e locationLocation.enabled);\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\nlocation_location = cpln.get_location(name=\"aws-us-west-2\")\npulumi.export(\"location\", location_location)\npulumi.export(\"locationEnabled\", location_location.enabled)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var locationLocation = Cpln.GetLocation.Invoke(new()\n    {\n        Name = \"aws-us-west-2\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"location\"] = locationLocation,\n        [\"locationEnabled\"] = locationLocation.Apply(getLocationResult =\u003e getLocationResult.Enabled),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocationLocation, err := cpln.LookupLocation(ctx, \u0026cpln.LookupLocationArgs{\n\t\t\tName: \"aws-us-west-2\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"location\", locationLocation)\n\t\tctx.Export(\"locationEnabled\", locationLocation.Enabled)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport com.pulumi.cpln.inputs.GetLocationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var locationLocation = CplnFunctions.getLocation(GetLocationArgs.builder()\n            .name(\"aws-us-west-2\")\n            .build());\n\n        ctx.export(\"location\", locationLocation.applyValue(getLocationResult -\u003e getLocationResult));\n        ctx.export(\"locationEnabled\", locationLocation.applyValue(getLocationResult -\u003e getLocationResult.enabled()));\n    }\n}\n```\n```yaml\nvariables:\n  locationLocation:\n    fn::invoke:\n      Function: cpln:getLocation\n      Arguments:\n        name: aws-us-west-2\noutputs:\n  location: ${locationLocation}\n  locationEnabled: ${locationLocation.enabled}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLocation.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLocation.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string"
                    },
                    "cplnId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "geos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/getLocationGeo:getLocationGeo"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "cplnId",
                    "description",
                    "enabled",
                    "geos",
                    "ipRanges",
                    "name",
                    "region",
                    "selfLink",
                    "tags",
                    "id"
                ]
            }
        },
        "cpln:index/getLocations:getLocations": {
            "description": "Use this data source to access information about all [Locations](https://docs.controlplane.com/reference/location) within Control Plane.\n\n## Outputs\n\nThe following attributes are exported:\n\n- **locations** (Block List) (see below).\n\n\u003ca id=\"nestedblock--locations\"\u003e\u003c/a\u003e\n\n### `locations`\n\n- **cpln_id** (String) The ID, in GUID format, of the location.\n- **name** (String) Name of the location.\n- **description** (String) Description of the location.\n- **tags** (Map of String) Key-value map of resource tags.\n- **cloud_provider** (String) Cloud Provider of the location.\n- **region** (String) Region of the location.\n- **enabled** (Boolean) Indication if location is enabled.\n- **geo** (Block List, Max: 1) (see below)\n- **ip_ranges** (List of String) A list of IP ranges of the location.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n\n\u003ca id=\"nestedblock--geo\"\u003e\u003c/a\u003e\n\n### `geo`\n\nLocation geographical details\n\n- **lat** (Number) Latitude.\n- **lon** (Number) Longitude.\n- **country** (String) Country.\n- **state** (String) State.\n- **city** (String) City.\n- **continent** (String) Continent.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst locationsLocations = cpln.getLocations({});\nexport const locations = locationsLocations.then(locationsLocations =\u003e locationsLocations.locations);\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\nlocations_locations = cpln.get_locations()\npulumi.export(\"locations\", locations_locations.locations)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var locationsLocations = Cpln.GetLocations.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"locations\"] = locationsLocations.Apply(getLocationsResult =\u003e getLocationsResult.Locations),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocationsLocations, err := cpln.GetLocations(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"locations\", locationsLocations.Locations)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var locationsLocations = CplnFunctions.getLocations();\n\n        ctx.export(\"locations\", locationsLocations.applyValue(getLocationsResult -\u003e getLocationsResult.locations()));\n    }\n}\n```\n```yaml\nvariables:\n  locationsLocations:\n    fn::invoke:\n      Function: cpln:getLocations\n      Arguments: {}\noutputs:\n  locations: ${locationsLocations.locations}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getLocations.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/getLocationsLocation:getLocationsLocation"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "locations",
                    "id"
                ]
            }
        },
        "cpln:index/getOrg:getOrg": {
            "description": "Output the ID and name of the current [org](https://docs.controlplane.com/reference/org). \n\n## Outputs\n\nThe following attributes are exported:\n\n- **cpln_id** (String) The ID, in GUID format, of the org.\n- **name** (String) The name of org.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst org = cpln.getOrg({});\nexport const orgId = org.then(org =\u003e org.id);\nexport const orgName = org.then(org =\u003e org.name);\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\norg = cpln.get_org()\npulumi.export(\"orgId\", org.id)\npulumi.export(\"orgName\", org.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var org = Cpln.GetOrg.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"orgId\"] = org.Apply(getOrgResult =\u003e getOrgResult.Id),\n        [\"orgName\"] = org.Apply(getOrgResult =\u003e getOrgResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\torg, err := cpln.LookupOrg(ctx, map[string]interface{}{}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgId\", org.Id)\n\t\tctx.Export(\"orgName\", org.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var org = CplnFunctions.getOrg();\n\n        ctx.export(\"orgId\", org.applyValue(getOrgResult -\u003e getOrgResult.id()));\n        ctx.export(\"orgName\", org.applyValue(getOrgResult -\u003e getOrgResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  org:\n    fn::invoke:\n      Function: cpln:getOrg\n      Arguments: {}\noutputs:\n  orgId: ${org.id}\n  orgName: ${org.name}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "outputs": {
                "description": "A collection of values returned by getOrg.\n",
                "properties": {
                    "cplnId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cplnId",
                    "name",
                    "id"
                ]
            }
        },
        "cpln:index/getSecret:getSecret": {
            "description": "Use this data source to access information about a [Secret](https://docs.controlplane.com/reference/secret) within Control Plane.\n\n## Required\n\n- **name** (String) Name of the secret.\n\n## Outputs\n\nThe following attributes are exported:\n\n- **cpln_id** (String) The ID, in GUID format, of the secret.\n- **name** (String) Name of the secret.\n- **description** (String) Description of the secret.\n- **tags** (Map of String) Key-value map of resource tags.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n- **secret_link** (String) Output used when linking a secret to an environment variable or volume, in the format: `cpln://secret/SECRET_NAME`.\n- **dictionary_as_envs** (Map of String) If a dictionary secret is defined, this output will be a key-value map in the following format: `key = cpln://secret/SECRET_NAME.key`.\n- **aws** (Block List, Max: 1) (see below) [Reference Page](https://docs.controlplane.com/reference/secret#aws).\n- **azure_connector** (Block List, Max: 1) (see below) [Reference Page](https://docs.controlplane.com/reference/secret#azure-connector).\n- **azure_sdk** (String, Sensitive) JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#azure).\n- **dictionary** (Map of String) List of unique key-value pairs. [Reference Page](https://docs.controlplane.com/reference/secret#dictionary).\n- **docker** (String, Sensitive) JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#docker).\n- **ecr** (Block List, Max: 1) (see below).\n- **gcp** (String, Sensitive) JSON string containing the GCP secret. [Reference Page](https://docs.controlplane.com/reference/secret#gcp)\n- **keypair** (Block List, Max: 1) (see below) [Reference Page](https://docs.controlplane.com/reference/secret#keypair).\n- **nats_account** (Block List, Max: 1) (see below) [Reference Page](https://docs.controlplane.com/reference/secret#nats-account).\n- **opaque** (Block List, Max: 1) (see below) [Reference Page](https://docs.controlplane.com/reference/secret#opaque).\n- **tls** (Block List, Max: 1) (see below) [Reference Page](https://docs.controlplane.com/reference/secret#tls).\n- **userpass** (Block List, Max: 1) (see below) [Reference Page](https://docs.controlplane.com/reference/secret#username).\n\n\u003ca id=\"nestedblock--aws\"\u003e\u003c/a\u003e\n\n### `aws`\n\nOptional:\n\n- **access_key** (String, Sensitive) Access Key provided by AWS.\n- **role_arn** (String) Role ARN provided by AWS.\n- **secret_key** (String, Sensitive) Secret Key provided by AWS.\n- **external_id** (String) AWS IAM Role External ID.\n\n\u003ca id=\"nestedblock--azure_connector\"\u003e\u003c/a\u003e\n\n### `azure_connector`\n\nOptional:\n\n- **code** (String, Sensitive) Code/Key to authenticate to deployment URL.\n- **url** (String, Sensitive) Deployment URL.\n\n\u003ca id=\"nestedblock--ecr\"\u003e\u003c/a\u003e\n\n### `ecr`\n\n[Reference Page](https://docs.controlplane.com/reference/secret#ecr)\n\nOptional:\n\n- **access_key** (String) Access Key provided by AWS.\n- **repos** (Set of String) List of ECR repositories.\n- **role_arn** (String) Role ARN provided by AWS.\n- **secret_key** (String, Sensitive) Secret Key provided by AWS.\n- **external_id** (String) AWS IAM Role External ID. Used when setting up cross-account access to your ECR repositories.\n\n\u003ca id=\"nestedblock--keypair\"\u003e\u003c/a\u003e\n\n### `keypair`\n\nOptional:\n\n- **passphrase** (String, Sensitive) Passphrase for private key.\n- **public_key** (String) Public Key.\n- **secret_key** (String, Sensitive) Secret/Private Key.\n\n\u003ca id=\"nestedblock--nats-account\"\u003e\u003c/a\u003e\n\n### `nats_account`\n\nRequired:\n\n- **account_id** (String) Account ID.\n- **private_key** (String) Private Key.\n\n\u003ca id=\"nestedblock--opaque\"\u003e\u003c/a\u003e\n\n### `opaque`\n\nOptional:\n\n- **encoding** (String) Available encodings: `plain`, `base64`. Default: `plain`.\n- **payload** (String, Sensitive) Plain text or base64 encoded string. Use `encoding` attribute to specify encoding.\n\n\u003ca id=\"nestedblock--tls\"\u003e\u003c/a\u003e\n\n### `tls`\n\nOptional:\n\n- **cert** (String) Public Certificate.\n- **chain** (String) Chain Certificate.\n- **key** (String, Sensitive) Private Certificate.\n\n\u003ca id=\"nestedblock--userpass\"\u003e\u003c/a\u003e\n\n### `userpass`\n\nOptional:\n\n- **encoding** (String) Available encodings: `plain`, `base64`. Default: `plain`.\n- **password** (String, Sensitive) Password.\n- **username** (String) Username.\n\n## Example Usage\n\n\u003c!--Start PulumiCodeChooser --\u003e\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nexport = async () =\u003e {\n    const example = await cpln.getSecret({\n        name: \"example-secret-opaque\",\n    });\n    return {\n        \"example-secret-payload\": example.opaque?.payload,\n    };\n}\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\nexample = cpln.get_secret(name=\"example-secret-opaque\")\npulumi.export(\"example-secret-payload\", example.opaque.payload)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Cpln.GetSecret.Invoke(new()\n    {\n        Name = \"example-secret-opaque\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"example-secret-payload\"] = example.Apply(getSecretResult =\u003e getSecretResult.Opaque?.Payload),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := cpln.LookupSecret(ctx, \u0026cpln.LookupSecretArgs{\n\t\t\tName: \"example-secret-opaque\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"example-secret-payload\", example.Opaque.Payload)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport com.pulumi.cpln.inputs.GetSecretArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = CplnFunctions.getSecret(GetSecretArgs.builder()\n            .name(\"example-secret-opaque\")\n            .build());\n\n        ctx.export(\"example-secret-payload\", example.applyValue(getSecretResult -\u003e getSecretResult.opaque().payload()));\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: cpln:getSecret\n      Arguments:\n        name: example-secret-opaque\noutputs:\n  example-secret-payload: ${example.opaque.payload}\n```\n\u003c!--End PulumiCodeChooser --\u003e\n",
            "inputs": {
                "description": "A collection of arguments for invoking getSecret.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/cpln:index/getSecretAws:getSecretAws"
                    },
                    "azureConnector": {
                        "$ref": "#/types/cpln:index/getSecretAzureConnector:getSecretAzureConnector"
                    },
                    "azureSdk": {
                        "type": "string",
                        "secret": true
                    },
                    "description": {
                        "type": "string"
                    },
                    "dictionary": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "docker": {
                        "type": "string",
                        "secret": true
                    },
                    "ecr": {
                        "$ref": "#/types/cpln:index/getSecretEcr:getSecretEcr"
                    },
                    "gcp": {
                        "type": "string",
                        "secret": true
                    },
                    "keypair": {
                        "$ref": "#/types/cpln:index/getSecretKeypair:getSecretKeypair"
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "natsAccount": {
                        "$ref": "#/types/cpln:index/getSecretNatsAccount:getSecretNatsAccount"
                    },
                    "opaque": {
                        "$ref": "#/types/cpln:index/getSecretOpaque:getSecretOpaque"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tls": {
                        "$ref": "#/types/cpln:index/getSecretTls:getSecretTls"
                    },
                    "userpass": {
                        "$ref": "#/types/cpln:index/getSecretUserpass:getSecretUserpass"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getSecret.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/cpln:index/getSecretAws:getSecretAws"
                    },
                    "azureConnector": {
                        "$ref": "#/types/cpln:index/getSecretAzureConnector:getSecretAzureConnector"
                    },
                    "azureSdk": {
                        "type": "string",
                        "secret": true
                    },
                    "cplnId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dictionary": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "dictionaryAsEnvs": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "docker": {
                        "type": "string",
                        "secret": true
                    },
                    "ecr": {
                        "$ref": "#/types/cpln:index/getSecretEcr:getSecretEcr"
                    },
                    "gcp": {
                        "type": "string",
                        "secret": true
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "keypair": {
                        "$ref": "#/types/cpln:index/getSecretKeypair:getSecretKeypair"
                    },
                    "name": {
                        "type": "string"
                    },
                    "natsAccount": {
                        "$ref": "#/types/cpln:index/getSecretNatsAccount:getSecretNatsAccount"
                    },
                    "opaque": {
                        "$ref": "#/types/cpln:index/getSecretOpaque:getSecretOpaque"
                    },
                    "secretLink": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "tls": {
                        "$ref": "#/types/cpln:index/getSecretTls:getSecretTls"
                    },
                    "userpass": {
                        "$ref": "#/types/cpln:index/getSecretUserpass:getSecretUserpass"
                    }
                },
                "type": "object",
                "required": [
                    "cplnId",
                    "dictionaryAsEnvs",
                    "name",
                    "secretLink",
                    "selfLink",
                    "id"
                ]
            }
        }
    }
}