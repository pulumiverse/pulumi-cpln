{
    "name": "cpln",
    "displayName": "Control Plane",
    "description": "A Pulumi package for creating and managing Control Plane (cpln) resources.",
    "keywords": [
        "pulumi",
        "cpln",
        "category/infrastructure"
    ],
    "homepage": "https://www.pulumi.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`cpln` Terraform Provider](https://github.com/controlplane-com/terraform-provider-cpln).",
    "repository": "https://github.com/pulumiverse/pulumi-cpln",
    "logoUrl": "https://raw.githubusercontent.com/pulumiverse/pulumi-cpln/main/docs/logo.png",
    "pluginDownloadURL": "github://api.github.com/pulumiverse",
    "publisher": "pulumiverse",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20",
            "rootNamespace": "Pulumiverse"
        },
        "go": {
            "importBasePath": "github.com/pulumiverse/pulumi-cpln/sdk/go/cpln",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageName": "@pulumiverse/cpln",
            "packageDescription": "A Pulumi package for creating and managing Control Plane (cpln) resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/controlplane-com/terraform-provider-cpln)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-cpln` repo](https://github.com/pulumiverse/pulumi-cpln/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-cpln` repo](https://github.com/controlplane-com/terraform-provider-cpln/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "packageName": "pulumiverse_cpln",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/controlplane-com/terraform-provider-cpln)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-cpln` repo](https://github.com/pulumiverse/pulumi-cpln/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-cpln` repo](https://github.com/controlplane-com/terraform-provider-cpln/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "endpoint": {
                "type": "string"
            },
            "org": {
                "type": "string"
            },
            "profile": {
                "type": "string"
            },
            "refreshToken": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        },
        "defaults": [
            "org"
        ]
    },
    "types": {
        "cpln:index/CloudAccountAws:CloudAccountAws": {
            "properties": {
                "roleArn": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "cpln:index/CloudAccountAzure:CloudAccountAzure": {
            "properties": {
                "secretLink": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "secretLink"
            ]
        },
        "cpln:index/CloudAccountGcp:CloudAccountGcp": {
            "properties": {
                "projectId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "projectId"
            ]
        },
        "cpln:index/CloudAccountNgs:CloudAccountNgs": {
            "properties": {
                "secretLink": {
                    "type": "string",
                    "willReplaceOnChanges": true
                }
            },
            "type": "object",
            "required": [
                "secretLink"
            ]
        },
        "cpln:index/DomainRouteHeaders:DomainRouteHeaders": {
            "properties": {
                "request": {
                    "$ref": "#/types/cpln:index/DomainRouteHeadersRequest:DomainRouteHeadersRequest"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainRouteHeadersRequest:DomainRouteHeadersRequest": {
            "properties": {
                "set": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/DomainSpec:DomainSpec": {
            "properties": {
                "acceptAllHosts": {
                    "type": "boolean"
                },
                "dnsMode": {
                    "type": "string"
                },
                "gvcLink": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainSpecPort:DomainSpecPort"
                    }
                }
            },
            "type": "object",
            "required": [
                "ports"
            ]
        },
        "cpln:index/DomainSpecPort:DomainSpecPort": {
            "properties": {
                "cors": {
                    "$ref": "#/types/cpln:index/DomainSpecPortCors:DomainSpecPortCors"
                },
                "number": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "tls": {
                    "$ref": "#/types/cpln:index/DomainSpecPortTls:DomainSpecPortTls"
                }
            },
            "type": "object",
            "required": [
                "tls"
            ]
        },
        "cpln:index/DomainSpecPortCors:DomainSpecPortCors": {
            "properties": {
                "allowCredentials": {
                    "type": "boolean"
                },
                "allowHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "allowOrigins": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainSpecPortCorsAllowOrigin:DomainSpecPortCorsAllowOrigin"
                    }
                },
                "exposeHeaders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "maxAge": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainSpecPortCorsAllowOrigin:DomainSpecPortCorsAllowOrigin": {
            "properties": {
                "exact": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "exact"
            ]
        },
        "cpln:index/DomainSpecPortTls:DomainSpecPortTls": {
            "properties": {
                "cipherSuites": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "clientCertificate": {
                    "$ref": "#/types/cpln:index/DomainSpecPortTlsClientCertificate:DomainSpecPortTlsClientCertificate"
                },
                "minProtocolVersion": {
                    "type": "string"
                },
                "serverCertificate": {
                    "$ref": "#/types/cpln:index/DomainSpecPortTlsServerCertificate:DomainSpecPortTlsServerCertificate"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainSpecPortTlsClientCertificate:DomainSpecPortTlsClientCertificate": {
            "properties": {
                "secretLink": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainSpecPortTlsServerCertificate:DomainSpecPortTlsServerCertificate": {
            "properties": {
                "secretLink": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainStatus:DomainStatus": {
            "properties": {
                "dnsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainStatusDnsConfig:DomainStatusDnsConfig"
                    }
                },
                "endpoints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainStatusEndpoint:DomainStatusEndpoint"
                    }
                },
                "fingerprint": {
                    "type": "string"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainStatusLocation:DomainStatusLocation"
                    }
                },
                "status": {
                    "type": "string"
                },
                "warning": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainStatusDnsConfig:DomainStatusDnsConfig": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "ttl": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainStatusEndpoint:DomainStatusEndpoint": {
            "properties": {
                "url": {
                    "type": "string"
                },
                "workloadLink": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/DomainStatusLocation:DomainStatusLocation": {
            "properties": {
                "certificateStatus": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/GroupIdentityMatcher:GroupIdentityMatcher": {
            "properties": {
                "expression": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "expression"
            ]
        },
        "cpln:index/GroupMemberQuery:GroupMemberQuery": {
            "properties": {
                "fetch": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/types/cpln:index/GroupMemberQuerySpec:GroupMemberQuerySpec"
                }
            },
            "type": "object"
        },
        "cpln:index/GroupMemberQuerySpec:GroupMemberQuerySpec": {
            "properties": {
                "match": {
                    "type": "string"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/GroupMemberQuerySpecTerm:GroupMemberQuerySpecTerm"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/GroupMemberQuerySpecTerm:GroupMemberQuerySpecTerm": {
            "properties": {
                "op": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "rel": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/GvcControlplaneTracing:GvcControlplaneTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "sampling": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "sampling"
            ]
        },
        "cpln:index/GvcLightstepTracing:GvcLightstepTracing": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "endpoint": {
                    "type": "string"
                },
                "sampling": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/GvcLoadBalancer:GvcLoadBalancer": {
            "properties": {
                "dedicated": {
                    "type": "boolean"
                },
                "trustedProxies": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dedicated"
            ]
        },
        "cpln:index/GvcOtelTracing:GvcOtelTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "endpoint": {
                    "type": "string"
                },
                "sampling": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/GvcSidecar:GvcSidecar": {
            "properties": {
                "envoy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "envoy"
            ]
        },
        "cpln:index/IdentityAwsAccessPolicy:IdentityAwsAccessPolicy": {
            "properties": {
                "cloudAccountLink": {
                    "type": "string"
                },
                "policyRefs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roleName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cloudAccountLink"
            ]
        },
        "cpln:index/IdentityAzureAccessPolicy:IdentityAzureAccessPolicy": {
            "properties": {
                "cloudAccountLink": {
                    "type": "string"
                },
                "roleAssignments": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityAzureAccessPolicyRoleAssignment:IdentityAzureAccessPolicyRoleAssignment"
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudAccountLink"
            ]
        },
        "cpln:index/IdentityAzureAccessPolicyRoleAssignment:IdentityAzureAccessPolicyRoleAssignment": {
            "properties": {
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scope": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/IdentityGcpAccessPolicy:IdentityGcpAccessPolicy": {
            "properties": {
                "bindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityGcpAccessPolicyBinding:IdentityGcpAccessPolicyBinding"
                    }
                },
                "cloudAccountLink": {
                    "type": "string"
                },
                "scopes": {
                    "type": "string"
                },
                "serviceAccount": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cloudAccountLink"
            ]
        },
        "cpln:index/IdentityGcpAccessPolicyBinding:IdentityGcpAccessPolicyBinding": {
            "properties": {
                "resource": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/IdentityNativeNetworkResource:IdentityNativeNetworkResource": {
            "properties": {
                "awsPrivateLink": {
                    "$ref": "#/types/cpln:index/IdentityNativeNetworkResourceAwsPrivateLink:IdentityNativeNetworkResourceAwsPrivateLink"
                },
                "fqdn": {
                    "type": "string"
                },
                "gcpServiceConnect": {
                    "$ref": "#/types/cpln:index/IdentityNativeNetworkResourceGcpServiceConnect:IdentityNativeNetworkResourceGcpServiceConnect"
                },
                "name": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "type": "object",
            "required": [
                "fqdn",
                "name",
                "ports"
            ]
        },
        "cpln:index/IdentityNativeNetworkResourceAwsPrivateLink:IdentityNativeNetworkResourceAwsPrivateLink": {
            "properties": {
                "endpointServiceName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "endpointServiceName"
            ]
        },
        "cpln:index/IdentityNativeNetworkResourceGcpServiceConnect:IdentityNativeNetworkResourceGcpServiceConnect": {
            "properties": {
                "targetService": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "targetService"
            ]
        },
        "cpln:index/IdentityNetworkResource:IdentityNetworkResource": {
            "properties": {
                "agentLink": {
                    "type": "string"
                },
                "fqdn": {
                    "type": "string"
                },
                "ips": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "resolverIp": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "agentLink",
                "name"
            ]
        },
        "cpln:index/IdentityNgsAccessPolicy:IdentityNgsAccessPolicy": {
            "properties": {
                "cloudAccountLink": {
                    "type": "string"
                },
                "data": {
                    "type": "integer"
                },
                "payload": {
                    "type": "integer"
                },
                "pub": {
                    "$ref": "#/types/cpln:index/IdentityNgsAccessPolicyPub:IdentityNgsAccessPolicyPub"
                },
                "resp": {
                    "$ref": "#/types/cpln:index/IdentityNgsAccessPolicyResp:IdentityNgsAccessPolicyResp"
                },
                "sub": {
                    "$ref": "#/types/cpln:index/IdentityNgsAccessPolicySub:IdentityNgsAccessPolicySub"
                },
                "subs": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "cloudAccountLink"
            ]
        },
        "cpln:index/IdentityNgsAccessPolicyPub:IdentityNgsAccessPolicyPub": {
            "properties": {
                "allows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "denies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/IdentityNgsAccessPolicyResp:IdentityNgsAccessPolicyResp": {
            "properties": {
                "max": {
                    "type": "integer"
                },
                "ttl": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/IdentityNgsAccessPolicySub:IdentityNgsAccessPolicySub": {
            "properties": {
                "allows": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "denies": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/LocationGeo:LocationGeo": {
            "properties": {
                "city": {
                    "type": "string"
                },
                "continent": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                },
                "state": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOns:Mk8sAddOns": {
            "properties": {
                "awsEcr": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsAwsEcr:Mk8sAddOnsAwsEcr"
                },
                "awsEfs": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsAwsEfs:Mk8sAddOnsAwsEfs"
                },
                "awsElb": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsAwsElb:Mk8sAddOnsAwsElb"
                },
                "awsWorkloadIdentity": {
                    "type": "boolean"
                },
                "azureAcr": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsAzureAcr:Mk8sAddOnsAzureAcr"
                },
                "azureWorkloadIdentity": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsAzureWorkloadIdentity:Mk8sAddOnsAzureWorkloadIdentity"
                },
                "dashboard": {
                    "type": "boolean"
                },
                "localPathStorage": {
                    "type": "boolean"
                },
                "logs": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsLogs:Mk8sAddOnsLogs"
                },
                "metrics": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsMetrics:Mk8sAddOnsMetrics"
                },
                "nvidia": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsNvidia:Mk8sAddOnsNvidia"
                },
                "sysbox": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsAwsEcr:Mk8sAddOnsAwsEcr": {
            "properties": {
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "cpln:index/Mk8sAddOnsAwsEfs:Mk8sAddOnsAwsEfs": {
            "properties": {
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "cpln:index/Mk8sAddOnsAwsElb:Mk8sAddOnsAwsElb": {
            "properties": {
                "roleArn": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "roleArn"
            ]
        },
        "cpln:index/Mk8sAddOnsAzureAcr:Mk8sAddOnsAzureAcr": {
            "properties": {
                "clientId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "clientId"
            ]
        },
        "cpln:index/Mk8sAddOnsAzureWorkloadIdentity:Mk8sAddOnsAzureWorkloadIdentity": {
            "properties": {
                "tenantId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "tenantId"
            ]
        },
        "cpln:index/Mk8sAddOnsLogs:Mk8sAddOnsLogs": {
            "properties": {
                "auditEnabled": {
                    "type": "boolean"
                },
                "excludeNamespaces": {
                    "type": "string"
                },
                "includeNamespaces": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsMetrics:Mk8sAddOnsMetrics": {
            "properties": {
                "apiServer": {
                    "type": "boolean"
                },
                "cadvisor": {
                    "type": "boolean"
                },
                "coreDns": {
                    "type": "boolean"
                },
                "kubeState": {
                    "type": "boolean"
                },
                "kubelet": {
                    "type": "boolean"
                },
                "nodeExporter": {
                    "type": "boolean"
                },
                "scrapeAnnotated": {
                    "$ref": "#/types/cpln:index/Mk8sAddOnsMetricsScrapeAnnotated:Mk8sAddOnsMetricsScrapeAnnotated"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsMetricsScrapeAnnotated:Mk8sAddOnsMetricsScrapeAnnotated": {
            "properties": {
                "excludeNamespaces": {
                    "type": "string"
                },
                "includeNamespaces": {
                    "type": "string"
                },
                "intervalSeconds": {
                    "type": "integer"
                },
                "retainLabels": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAddOnsNvidia:Mk8sAddOnsNvidia": {
            "properties": {
                "taintGpuNodes": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "taintGpuNodes"
            ]
        },
        "cpln:index/Mk8sAwsProvider:Mk8sAwsProvider": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProviderAutoscaler:Mk8sAwsProviderAutoscaler"
                },
                "awsTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "deployRoleArn": {
                    "type": "string"
                },
                "diskEncryptionKeyArn": {
                    "type": "string"
                },
                "image": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProviderImage:Mk8sAwsProviderImage"
                },
                "keyPair": {
                    "type": "string"
                },
                "networking": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProviderNetworking:Mk8sAwsProviderNetworking"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sAwsProviderNodePool:Mk8sAwsProviderNodePool"
                    }
                },
                "preInstallScript": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "securityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "skipCreateRoles": {
                    "type": "boolean"
                },
                "vpcId": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "deployRoleArn",
                "image",
                "networking",
                "region",
                "vpcId"
            ]
        },
        "cpln:index/Mk8sAwsProviderAutoscaler:Mk8sAwsProviderAutoscaler": {
            "properties": {
                "expanders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unneededTime": {
                    "type": "string"
                },
                "unreadyTime": {
                    "type": "string"
                },
                "utilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "expanders"
            ]
        },
        "cpln:index/Mk8sAwsProviderImage:Mk8sAwsProviderImage": {
            "properties": {
                "exact": {
                    "type": "string"
                },
                "recommended": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAwsProviderNetworking:Mk8sAwsProviderNetworking": {
            "properties": {
                "podNetwork": {
                    "type": "string"
                },
                "serviceNetwork": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAwsProviderNodePool:Mk8sAwsProviderNodePool": {
            "properties": {
                "bootDiskSize": {
                    "type": "integer"
                },
                "extraSecurityGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "instanceTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "maxSize": {
                    "type": "integer"
                },
                "minSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "onDemandBaseCapacity": {
                    "type": "integer"
                },
                "onDemandPercentageAboveBaseCapacity": {
                    "type": "integer"
                },
                "overrideImage": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProviderNodePoolOverrideImage:Mk8sAwsProviderNodePoolOverrideImage"
                },
                "spotAllocationStrategy": {
                    "type": "string"
                },
                "subnetIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sAwsProviderNodePoolTaint:Mk8sAwsProviderNodePoolTaint"
                    }
                }
            },
            "type": "object",
            "required": [
                "instanceTypes",
                "name",
                "overrideImage",
                "subnetIds"
            ]
        },
        "cpln:index/Mk8sAwsProviderNodePoolOverrideImage:Mk8sAwsProviderNodePoolOverrideImage": {
            "properties": {
                "exact": {
                    "type": "string"
                },
                "recommended": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sAwsProviderNodePoolTaint:Mk8sAwsProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sEphemeralProvider:Mk8sEphemeralProvider": {
            "properties": {
                "location": {
                    "type": "string"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sEphemeralProviderNodePool:Mk8sEphemeralProviderNodePool"
                    }
                }
            },
            "type": "object",
            "required": [
                "location"
            ]
        },
        "cpln:index/Mk8sEphemeralProviderNodePool:Mk8sEphemeralProviderNodePool": {
            "properties": {
                "arch": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "cpu": {
                    "type": "string"
                },
                "flavor": {
                    "type": "string"
                },
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "memory": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sEphemeralProviderNodePoolTaint:Mk8sEphemeralProviderNodePoolTaint"
                    }
                }
            },
            "type": "object",
            "required": [
                "arch",
                "count",
                "cpu",
                "flavor",
                "memory",
                "name"
            ]
        },
        "cpln:index/Mk8sEphemeralProviderNodePoolTaint:Mk8sEphemeralProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sFirewall:Mk8sFirewall": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "sourceCidr": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "sourceCidr"
            ]
        },
        "cpln:index/Mk8sGenericProvider:Mk8sGenericProvider": {
            "properties": {
                "location": {
                    "type": "string"
                },
                "networking": {
                    "$ref": "#/types/cpln:index/Mk8sGenericProviderNetworking:Mk8sGenericProviderNetworking"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sGenericProviderNodePool:Mk8sGenericProviderNodePool"
                    }
                }
            },
            "type": "object",
            "required": [
                "location",
                "networking"
            ]
        },
        "cpln:index/Mk8sGenericProviderNetworking:Mk8sGenericProviderNetworking": {
            "properties": {
                "podNetwork": {
                    "type": "string"
                },
                "serviceNetwork": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sGenericProviderNodePool:Mk8sGenericProviderNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sGenericProviderNodePoolTaint:Mk8sGenericProviderNodePoolTaint"
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "cpln:index/Mk8sGenericProviderNodePoolTaint:Mk8sGenericProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sHetznerProvider:Mk8sHetznerProvider": {
            "properties": {
                "autoscaler": {
                    "$ref": "#/types/cpln:index/Mk8sHetznerProviderAutoscaler:Mk8sHetznerProviderAutoscaler"
                },
                "dedicatedServerNodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sHetznerProviderDedicatedServerNodePool:Mk8sHetznerProviderDedicatedServerNodePool"
                    }
                },
                "firewallId": {
                    "type": "string"
                },
                "floatingIpSelector": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "hetznerLabels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "image": {
                    "type": "string"
                },
                "networkId": {
                    "type": "string"
                },
                "networking": {
                    "$ref": "#/types/cpln:index/Mk8sHetznerProviderNetworking:Mk8sHetznerProviderNetworking"
                },
                "nodePools": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sHetznerProviderNodePool:Mk8sHetznerProviderNodePool"
                    }
                },
                "preInstallScript": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "sshKey": {
                    "type": "string"
                },
                "tokenSecretLink": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "networkId",
                "networking",
                "region",
                "tokenSecretLink"
            ]
        },
        "cpln:index/Mk8sHetznerProviderAutoscaler:Mk8sHetznerProviderAutoscaler": {
            "properties": {
                "expanders": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "unneededTime": {
                    "type": "string"
                },
                "unreadyTime": {
                    "type": "string"
                },
                "utilizationThreshold": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "expanders"
            ]
        },
        "cpln:index/Mk8sHetznerProviderDedicatedServerNodePool:Mk8sHetznerProviderDedicatedServerNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sHetznerProviderDedicatedServerNodePoolTaint:Mk8sHetznerProviderDedicatedServerNodePoolTaint"
                    }
                }
            },
            "type": "object",
            "required": [
                "name"
            ]
        },
        "cpln:index/Mk8sHetznerProviderDedicatedServerNodePoolTaint:Mk8sHetznerProviderDedicatedServerNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sHetznerProviderNetworking:Mk8sHetznerProviderNetworking": {
            "properties": {
                "podNetwork": {
                    "type": "string"
                },
                "serviceNetwork": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sHetznerProviderNodePool:Mk8sHetznerProviderNodePool": {
            "properties": {
                "labels": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "maxSize": {
                    "type": "integer"
                },
                "minSize": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "overrideImage": {
                    "type": "string"
                },
                "serverType": {
                    "type": "string"
                },
                "taints": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sHetznerProviderNodePoolTaint:Mk8sHetznerProviderNodePoolTaint"
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "serverType"
            ]
        },
        "cpln:index/Mk8sHetznerProviderNodePoolTaint:Mk8sHetznerProviderNodePoolTaint": {
            "properties": {
                "effect": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/Mk8sStatus:Mk8sStatus": {
            "properties": {
                "addOns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOn:Mk8sStatusAddOn"
                    }
                },
                "homeLocation": {
                    "type": "string"
                },
                "oidcProviderUrl": {
                    "type": "string"
                },
                "serverUrl": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "addOns",
                        "homeLocation",
                        "oidcProviderUrl",
                        "serverUrl"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOn:Mk8sStatusAddOn": {
            "properties": {
                "awsEcrs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnAwsEcr:Mk8sStatusAddOnAwsEcr"
                    }
                },
                "awsEfs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnAwsEf:Mk8sStatusAddOnAwsEf"
                    }
                },
                "awsElbs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnAwsElb:Mk8sStatusAddOnAwsElb"
                    }
                },
                "awsWorkloadIdentities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnAwsWorkloadIdentity:Mk8sStatusAddOnAwsWorkloadIdentity"
                    }
                },
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnDashboard:Mk8sStatusAddOnDashboard"
                    }
                },
                "logs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnLog:Mk8sStatusAddOnLog"
                    }
                },
                "metrics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnMetric:Mk8sStatusAddOnMetric"
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "awsEcrs",
                        "awsEfs",
                        "awsElbs",
                        "awsWorkloadIdentities",
                        "dashboards",
                        "logs",
                        "metrics"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnAwsEcr:Mk8sStatusAddOnAwsEcr": {
            "properties": {
                "trustPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "trustPolicy"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnAwsEf:Mk8sStatusAddOnAwsEf": {
            "properties": {
                "trustPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "trustPolicy"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnAwsElb:Mk8sStatusAddOnAwsElb": {
            "properties": {
                "trustPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "trustPolicy"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnAwsWorkloadIdentity:Mk8sStatusAddOnAwsWorkloadIdentity": {
            "properties": {
                "oidcProviderConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig:Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig"
                    }
                },
                "trustPolicy": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "oidcProviderConfigs",
                        "trustPolicy"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig:Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig": {
            "properties": {
                "audience": {
                    "type": "string"
                },
                "providerUrl": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "audience",
                        "providerUrl"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnDashboard:Mk8sStatusAddOnDashboard": {
            "properties": {
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "url"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnLog:Mk8sStatusAddOnLog": {
            "properties": {
                "lokiAddress": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "lokiAddress"
                    ]
                }
            }
        },
        "cpln:index/Mk8sStatusAddOnMetric:Mk8sStatusAddOnMetric": {
            "properties": {
                "prometheusEndpoint": {
                    "type": "string"
                },
                "remoteWriteConfig": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "prometheusEndpoint",
                        "remoteWriteConfig"
                    ]
                }
            }
        },
        "cpln:index/OrgAuthConfig:OrgAuthConfig": {
            "properties": {
                "domainAutoMembers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "samlOnly": {
                    "type": "boolean"
                }
            },
            "type": "object",
            "required": [
                "domainAutoMembers"
            ]
        },
        "cpln:index/OrgLoggingCloudWatchLogging:OrgLoggingCloudWatchLogging": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "extractFields": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "groupName": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "retentionDays": {
                    "type": "integer"
                },
                "streamName": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "groupName",
                "region",
                "streamName"
            ]
        },
        "cpln:index/OrgLoggingCoralogixLogging:OrgLoggingCoralogixLogging": {
            "properties": {
                "app": {
                    "type": "string"
                },
                "cluster": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "subsystem": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "app",
                "cluster",
                "credentials",
                "subsystem"
            ]
        },
        "cpln:index/OrgLoggingDatadogLogging:OrgLoggingDatadogLogging": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "host"
            ]
        },
        "cpln:index/OrgLoggingElasticLogging:OrgLoggingElasticLogging": {
            "properties": {
                "aws": {
                    "$ref": "#/types/cpln:index/OrgLoggingElasticLoggingAws:OrgLoggingElasticLoggingAws"
                },
                "elasticCloud": {
                    "$ref": "#/types/cpln:index/OrgLoggingElasticLoggingElasticCloud:OrgLoggingElasticLoggingElasticCloud"
                },
                "generic": {
                    "$ref": "#/types/cpln:index/OrgLoggingElasticLoggingGeneric:OrgLoggingElasticLoggingGeneric"
                }
            },
            "type": "object"
        },
        "cpln:index/OrgLoggingElasticLoggingAws:OrgLoggingElasticLoggingAws": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "index": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "region": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "host",
                "index",
                "port",
                "region",
                "type"
            ]
        },
        "cpln:index/OrgLoggingElasticLoggingElasticCloud:OrgLoggingElasticLoggingElasticCloud": {
            "properties": {
                "cloudId": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "index": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cloudId",
                "credentials",
                "index",
                "type"
            ]
        },
        "cpln:index/OrgLoggingElasticLoggingGeneric:OrgLoggingElasticLoggingGeneric": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "index": {
                    "type": "string"
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "type": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "host",
                "index",
                "path",
                "port",
                "type"
            ]
        },
        "cpln:index/OrgLoggingFluentdLogging:OrgLoggingFluentdLogging": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "host"
            ]
        },
        "cpln:index/OrgLoggingLogzioLogging:OrgLoggingLogzioLogging": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "listenerHost": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "listenerHost"
            ]
        },
        "cpln:index/OrgLoggingS3Logging:OrgLoggingS3Logging": {
            "properties": {
                "bucket": {
                    "type": "string"
                },
                "credentials": {
                    "type": "string"
                },
                "prefix": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "bucket",
                "credentials",
                "region"
            ]
        },
        "cpln:index/OrgLoggingStackdriverLogging:OrgLoggingStackdriverLogging": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "credentials",
                "location"
            ]
        },
        "cpln:index/OrgLoggingSyslogLogging:OrgLoggingSyslogLogging": {
            "properties": {
                "format": {
                    "type": "string"
                },
                "host": {
                    "type": "string"
                },
                "mode": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "severity": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "host",
                "port"
            ]
        },
        "cpln:index/OrgObservability:OrgObservability": {
            "properties": {
                "logsRetentionDays": {
                    "type": "integer"
                },
                "metricsRetentionDays": {
                    "type": "integer"
                },
                "tracesRetentionDays": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/OrgSecurity:OrgSecurity": {
            "properties": {
                "threatDetection": {
                    "$ref": "#/types/cpln:index/OrgSecurityThreatDetection:OrgSecurityThreatDetection"
                }
            },
            "type": "object"
        },
        "cpln:index/OrgSecurityThreatDetection:OrgSecurityThreatDetection": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "minimumSeverity": {
                    "type": "string"
                },
                "syslog": {
                    "$ref": "#/types/cpln:index/OrgSecurityThreatDetectionSyslog:OrgSecurityThreatDetectionSyslog"
                }
            },
            "type": "object"
        },
        "cpln:index/OrgSecurityThreatDetectionSyslog:OrgSecurityThreatDetectionSyslog": {
            "properties": {
                "host": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "transport": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "port"
            ]
        },
        "cpln:index/OrgStatus:OrgStatus": {
            "properties": {
                "accountLink": {
                    "type": "string"
                },
                "active": {
                    "type": "boolean"
                }
            },
            "type": "object"
        },
        "cpln:index/OrgTracingControlplaneTracing:OrgTracingControlplaneTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "sampling": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "sampling"
            ]
        },
        "cpln:index/OrgTracingLightstepTracing:OrgTracingLightstepTracing": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "endpoint": {
                    "type": "string"
                },
                "sampling": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/OrgTracingOtelTracing:OrgTracingOtelTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "endpoint": {
                    "type": "string"
                },
                "sampling": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/PolicyBinding:PolicyBinding": {
            "properties": {
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "principalLinks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "permissions",
                "principalLinks"
            ]
        },
        "cpln:index/PolicyTargetQuery:PolicyTargetQuery": {
            "properties": {
                "fetch": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/types/cpln:index/PolicyTargetQuerySpec:PolicyTargetQuerySpec"
                }
            },
            "type": "object"
        },
        "cpln:index/PolicyTargetQuerySpec:PolicyTargetQuerySpec": {
            "properties": {
                "match": {
                    "type": "string"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/PolicyTargetQuerySpecTerm:PolicyTargetQuerySpecTerm"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/PolicyTargetQuerySpecTerm:PolicyTargetQuerySpecTerm": {
            "properties": {
                "op": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "rel": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/SecretAws:SecretAws": {
            "properties": {
                "accessKey": {
                    "type": "string",
                    "secret": true
                },
                "externalId": {
                    "type": "string"
                },
                "roleArn": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "secretKey"
            ]
        },
        "cpln:index/SecretAzureConnector:SecretAzureConnector": {
            "properties": {
                "code": {
                    "type": "string",
                    "secret": true
                },
                "url": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "code",
                "url"
            ]
        },
        "cpln:index/SecretEcr:SecretEcr": {
            "properties": {
                "accessKey": {
                    "type": "string"
                },
                "externalId": {
                    "type": "string"
                },
                "repos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "roleArn": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accessKey",
                "repos",
                "secretKey"
            ]
        },
        "cpln:index/SecretKeypair:SecretKeypair": {
            "properties": {
                "passphrase": {
                    "type": "string",
                    "secret": true
                },
                "publicKey": {
                    "type": "string"
                },
                "secretKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "secretKey"
            ]
        },
        "cpln:index/SecretNatsAccount:SecretNatsAccount": {
            "properties": {
                "accountId": {
                    "type": "string"
                },
                "privateKey": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "accountId",
                "privateKey"
            ]
        },
        "cpln:index/SecretOpaque:SecretOpaque": {
            "properties": {
                "encoding": {
                    "type": "string"
                },
                "payload": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "payload"
            ]
        },
        "cpln:index/SecretTls:SecretTls": {
            "properties": {
                "cert": {
                    "type": "string"
                },
                "chain": {
                    "type": "string"
                },
                "key": {
                    "type": "string",
                    "secret": true
                }
            },
            "type": "object",
            "required": [
                "cert",
                "key"
            ]
        },
        "cpln:index/SecretUserpass:SecretUserpass": {
            "properties": {
                "encoding": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "secret": true
                },
                "username": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "password",
                "username"
            ]
        },
        "cpln:index/VolumeSetAutoscaling:VolumeSetAutoscaling": {
            "properties": {
                "maxCapacity": {
                    "type": "integer"
                },
                "minFreePercentage": {
                    "type": "integer"
                },
                "scalingFactor": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "maxCapacity",
                "minFreePercentage",
                "scalingFactor"
            ]
        },
        "cpln:index/VolumeSetSnapshots:VolumeSetSnapshots": {
            "properties": {
                "createFinalSnapshot": {
                    "type": "boolean"
                },
                "retentionDuration": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/VolumeSetStatus:VolumeSetStatus": {
            "properties": {
                "bindingId": {
                    "type": "string"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "parentId": {
                    "type": "string"
                },
                "usedByWorkload": {
                    "type": "string"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "bindingId",
                        "locations",
                        "parentId",
                        "usedByWorkload"
                    ]
                }
            }
        },
        "cpln:index/WorkloadContainer:WorkloadContainer": {
            "properties": {
                "args": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string"
                },
                "cpu": {
                    "type": "string"
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "gpuNvidia": {
                    "$ref": "#/types/cpln:index/WorkloadContainerGpuNvidia:WorkloadContainerGpuNvidia"
                },
                "image": {
                    "type": "string"
                },
                "inheritEnv": {
                    "type": "boolean"
                },
                "lifecycle": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLifecycle:WorkloadContainerLifecycle"
                },
                "livenessProbe": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLivenessProbe:WorkloadContainerLivenessProbe"
                },
                "memory": {
                    "type": "string"
                },
                "metrics": {
                    "$ref": "#/types/cpln:index/WorkloadContainerMetrics:WorkloadContainerMetrics"
                },
                "minCpu": {
                    "type": "string"
                },
                "minMemory": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "port": {
                    "type": "integer",
                    "deprecationMessage": "The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead."
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadContainerPort:WorkloadContainerPort"
                    }
                },
                "readinessProbe": {
                    "$ref": "#/types/cpln:index/WorkloadContainerReadinessProbe:WorkloadContainerReadinessProbe"
                },
                "volumes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadContainerVolume:WorkloadContainerVolume"
                    }
                },
                "workingDirectory": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "image",
                "name"
            ]
        },
        "cpln:index/WorkloadContainerGpuNvidia:WorkloadContainerGpuNvidia": {
            "properties": {
                "model": {
                    "type": "string"
                },
                "quantity": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "model",
                "quantity"
            ]
        },
        "cpln:index/WorkloadContainerLifecycle:WorkloadContainerLifecycle": {
            "properties": {
                "postStart": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLifecyclePostStart:WorkloadContainerLifecyclePostStart"
                },
                "preStop": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLifecyclePreStop:WorkloadContainerLifecyclePreStop"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerLifecyclePostStart:WorkloadContainerLifecyclePostStart": {
            "properties": {
                "exec": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLifecyclePostStartExec:WorkloadContainerLifecyclePostStartExec"
                }
            },
            "type": "object",
            "required": [
                "exec"
            ]
        },
        "cpln:index/WorkloadContainerLifecyclePostStartExec:WorkloadContainerLifecyclePostStartExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "cpln:index/WorkloadContainerLifecyclePreStop:WorkloadContainerLifecyclePreStop": {
            "properties": {
                "exec": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLifecyclePreStopExec:WorkloadContainerLifecyclePreStopExec"
                }
            },
            "type": "object",
            "required": [
                "exec"
            ]
        },
        "cpln:index/WorkloadContainerLifecyclePreStopExec:WorkloadContainerLifecyclePreStopExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "cpln:index/WorkloadContainerLivenessProbe:WorkloadContainerLivenessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLivenessProbeExec:WorkloadContainerLivenessProbeExec"
                },
                "failureThreshold": {
                    "type": "integer"
                },
                "grpc": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLivenessProbeGrpc:WorkloadContainerLivenessProbeGrpc"
                },
                "httpGet": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLivenessProbeHttpGet:WorkloadContainerLivenessProbeHttpGet"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "tcpSocket": {
                    "$ref": "#/types/cpln:index/WorkloadContainerLivenessProbeTcpSocket:WorkloadContainerLivenessProbeTcpSocket"
                },
                "timeoutSeconds": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerLivenessProbeExec:WorkloadContainerLivenessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "cpln:index/WorkloadContainerLivenessProbeGrpc:WorkloadContainerLivenessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerLivenessProbeHttpGet:WorkloadContainerLivenessProbeHttpGet": {
            "properties": {
                "httpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerLivenessProbeTcpSocket:WorkloadContainerLivenessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerMetrics:WorkloadContainerMetrics": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "path",
                "port"
            ]
        },
        "cpln:index/WorkloadContainerPort:WorkloadContainerPort": {
            "properties": {
                "number": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "number"
            ]
        },
        "cpln:index/WorkloadContainerReadinessProbe:WorkloadContainerReadinessProbe": {
            "properties": {
                "exec": {
                    "$ref": "#/types/cpln:index/WorkloadContainerReadinessProbeExec:WorkloadContainerReadinessProbeExec"
                },
                "failureThreshold": {
                    "type": "integer"
                },
                "grpc": {
                    "$ref": "#/types/cpln:index/WorkloadContainerReadinessProbeGrpc:WorkloadContainerReadinessProbeGrpc"
                },
                "httpGet": {
                    "$ref": "#/types/cpln:index/WorkloadContainerReadinessProbeHttpGet:WorkloadContainerReadinessProbeHttpGet"
                },
                "initialDelaySeconds": {
                    "type": "integer"
                },
                "periodSeconds": {
                    "type": "integer"
                },
                "successThreshold": {
                    "type": "integer"
                },
                "tcpSocket": {
                    "$ref": "#/types/cpln:index/WorkloadContainerReadinessProbeTcpSocket:WorkloadContainerReadinessProbeTcpSocket"
                },
                "timeoutSeconds": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerReadinessProbeExec:WorkloadContainerReadinessProbeExec": {
            "properties": {
                "commands": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "commands"
            ]
        },
        "cpln:index/WorkloadContainerReadinessProbeGrpc:WorkloadContainerReadinessProbeGrpc": {
            "properties": {
                "port": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerReadinessProbeHttpGet:WorkloadContainerReadinessProbeHttpGet": {
            "properties": {
                "httpHeaders": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "path": {
                    "type": "string"
                },
                "port": {
                    "type": "integer"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerReadinessProbeTcpSocket:WorkloadContainerReadinessProbeTcpSocket": {
            "properties": {
                "port": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadContainerVolume:WorkloadContainerVolume": {
            "properties": {
                "path": {
                    "type": "string"
                },
                "recoveryPolicy": {
                    "type": "string"
                },
                "uri": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "path",
                "uri"
            ]
        },
        "cpln:index/WorkloadFirewallSpec:WorkloadFirewallSpec": {
            "properties": {
                "external": {
                    "$ref": "#/types/cpln:index/WorkloadFirewallSpecExternal:WorkloadFirewallSpecExternal"
                },
                "internal": {
                    "$ref": "#/types/cpln:index/WorkloadFirewallSpecInternal:WorkloadFirewallSpecInternal"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadFirewallSpecExternal:WorkloadFirewallSpecExternal": {
            "properties": {
                "inboundAllowCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "outboundAllowCidrs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "outboundAllowHostnames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "outboundAllowPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadFirewallSpecExternalOutboundAllowPort:WorkloadFirewallSpecExternalOutboundAllowPort"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadFirewallSpecExternalOutboundAllowPort:WorkloadFirewallSpecExternalOutboundAllowPort": {
            "properties": {
                "number": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "number",
                "protocol"
            ]
        },
        "cpln:index/WorkloadFirewallSpecInternal:WorkloadFirewallSpecInternal": {
            "properties": {
                "inboundAllowType": {
                    "type": "string"
                },
                "inboundAllowWorkloads": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadJob:WorkloadJob": {
            "properties": {
                "activeDeadlineSeconds": {
                    "type": "integer"
                },
                "concurrencyPolicy": {
                    "type": "string"
                },
                "historyLimit": {
                    "type": "integer"
                },
                "restartPolicy": {
                    "type": "string"
                },
                "schedule": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "schedule"
            ]
        },
        "cpln:index/WorkloadLoadBalancer:WorkloadLoadBalancer": {
            "properties": {
                "direct": {
                    "$ref": "#/types/cpln:index/WorkloadLoadBalancerDirect:WorkloadLoadBalancerDirect"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadLoadBalancerDirect:WorkloadLoadBalancerDirect": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "ports": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadLoadBalancerDirectPort:WorkloadLoadBalancerDirectPort"
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled"
            ]
        },
        "cpln:index/WorkloadLoadBalancerDirectPort:WorkloadLoadBalancerDirectPort": {
            "properties": {
                "containerPort": {
                    "type": "integer"
                },
                "externalPort": {
                    "type": "integer"
                },
                "protocol": {
                    "type": "string"
                },
                "scheme": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "externalPort",
                "protocol"
            ]
        },
        "cpln:index/WorkloadLocalOption:WorkloadLocalOption": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/cpln:index/WorkloadLocalOptionAutoscaling:WorkloadLocalOptionAutoscaling"
                },
                "capacityAi": {
                    "type": "boolean"
                },
                "debug": {
                    "type": "boolean"
                },
                "location": {
                    "type": "string"
                },
                "suspend": {
                    "type": "boolean"
                },
                "timeoutSeconds": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "location"
            ]
        },
        "cpln:index/WorkloadLocalOptionAutoscaling:WorkloadLocalOptionAutoscaling": {
            "properties": {
                "maxConcurrency": {
                    "type": "integer"
                },
                "maxScale": {
                    "type": "integer"
                },
                "metric": {
                    "type": "string"
                },
                "metricPercentile": {
                    "type": "string"
                },
                "minScale": {
                    "type": "integer"
                },
                "scaleToZeroDelay": {
                    "type": "integer"
                },
                "target": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadOptions:WorkloadOptions": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/cpln:index/WorkloadOptionsAutoscaling:WorkloadOptionsAutoscaling"
                },
                "capacityAi": {
                    "type": "boolean"
                },
                "debug": {
                    "type": "boolean"
                },
                "suspend": {
                    "type": "boolean"
                },
                "timeoutSeconds": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadOptionsAutoscaling:WorkloadOptionsAutoscaling": {
            "properties": {
                "maxConcurrency": {
                    "type": "integer"
                },
                "maxScale": {
                    "type": "integer"
                },
                "metric": {
                    "type": "string"
                },
                "metricPercentile": {
                    "type": "string"
                },
                "minScale": {
                    "type": "integer"
                },
                "scaleToZeroDelay": {
                    "type": "integer"
                },
                "target": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadRolloutOptions:WorkloadRolloutOptions": {
            "properties": {
                "maxSurgeReplicas": {
                    "type": "string"
                },
                "maxUnavailableReplicas": {
                    "type": "string"
                },
                "minReadySeconds": {
                    "type": "integer"
                },
                "scalingPolicy": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadSecurityOptions:WorkloadSecurityOptions": {
            "properties": {
                "fileSystemGroupId": {
                    "type": "integer"
                },
                "geoLocation": {
                    "$ref": "#/types/cpln:index/WorkloadSecurityOptionsGeoLocation:WorkloadSecurityOptionsGeoLocation"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadSecurityOptionsGeoLocation:WorkloadSecurityOptionsGeoLocation": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "headers": {
                    "$ref": "#/types/cpln:index/WorkloadSecurityOptionsGeoLocationHeaders:WorkloadSecurityOptionsGeoLocationHeaders"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadSecurityOptionsGeoLocationHeaders:WorkloadSecurityOptionsGeoLocationHeaders": {
            "properties": {
                "asn": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadSidecar:WorkloadSidecar": {
            "properties": {
                "envoy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "envoy"
            ]
        },
        "cpln:index/WorkloadStatus:WorkloadStatus": {
            "properties": {
                "canonicalEndpoint": {
                    "type": "string"
                },
                "currentReplicaCount": {
                    "type": "integer"
                },
                "endpoint": {
                    "type": "string"
                },
                "healthChecks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatusHealthCheck:WorkloadStatusHealthCheck"
                    }
                },
                "internalName": {
                    "type": "string"
                },
                "loadBalancers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatusLoadBalancer:WorkloadStatusLoadBalancer"
                    }
                },
                "parentId": {
                    "type": "string"
                },
                "resolvedImages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatusResolvedImage:WorkloadStatusResolvedImage"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadStatusHealthCheck:WorkloadStatusHealthCheck": {
            "properties": {
                "active": {
                    "type": "boolean"
                },
                "code": {
                    "type": "integer"
                },
                "failures": {
                    "type": "integer"
                },
                "lastChecked": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                },
                "successes": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "active"
            ]
        },
        "cpln:index/WorkloadStatusLoadBalancer:WorkloadStatusLoadBalancer": {
            "properties": {
                "origin": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadStatusResolvedImage:WorkloadStatusResolvedImage": {
            "properties": {
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatusResolvedImageImage:WorkloadStatusResolvedImageImage"
                    }
                },
                "resolvedAt": {
                    "type": "string"
                },
                "resolvedForVersion": {
                    "type": "integer"
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadStatusResolvedImageImage:WorkloadStatusResolvedImageImage": {
            "properties": {
                "digest": {
                    "type": "string"
                },
                "manifests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatusResolvedImageImageManifest:WorkloadStatusResolvedImageImageManifest"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/WorkloadStatusResolvedImageImageManifest:WorkloadStatusResolvedImageImageManifest": {
            "properties": {
                "digest": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string"
                },
                "platform": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/getGvcControlplaneTracing:getGvcControlplaneTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "sampling": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "sampling"
            ]
        },
        "cpln:index/getGvcLightstepTracing:getGvcLightstepTracing": {
            "properties": {
                "credentials": {
                    "type": "string"
                },
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "endpoint": {
                    "type": "string"
                },
                "sampling": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/getGvcLoadBalancer:getGvcLoadBalancer": {
            "properties": {
                "dedicated": {
                    "type": "boolean"
                },
                "trustedProxies": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "dedicated"
            ]
        },
        "cpln:index/getGvcOtelTracing:getGvcOtelTracing": {
            "properties": {
                "customTags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "endpoint": {
                    "type": "string"
                },
                "sampling": {
                    "type": "number"
                }
            },
            "type": "object",
            "required": [
                "endpoint",
                "sampling"
            ]
        },
        "cpln:index/getGvcSidecar:getGvcSidecar": {
            "properties": {
                "envoy": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "envoy"
            ]
        },
        "cpln:index/getImageManifest:getImageManifest": {
            "properties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImageManifestConfig:getImageManifestConfig"
                    }
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImageManifestLayer:getImageManifestLayer"
                    }
                },
                "mediaType": {
                    "type": "string"
                },
                "schemaVersion": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "configs",
                "layers",
                "mediaType",
                "schemaVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImageManifestConfig:getImageManifestConfig": {
            "properties": {
                "digest": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "digest",
                "mediaType",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImageManifestLayer:getImageManifestLayer": {
            "properties": {
                "digest": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "digest",
                "mediaType",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImagesImage:getImagesImage": {
            "properties": {
                "cplnId": {
                    "type": "string"
                },
                "digest": {
                    "type": "string"
                },
                "manifests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImagesImageManifest:getImagesImageManifest"
                    }
                },
                "name": {
                    "type": "string"
                },
                "repository": {
                    "type": "string"
                },
                "selfLink": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "cplnId",
                "digest",
                "manifests",
                "name",
                "repository",
                "selfLink",
                "tag",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImagesImageManifest:getImagesImageManifest": {
            "properties": {
                "configs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImagesImageManifestConfig:getImagesImageManifestConfig"
                    }
                },
                "layers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImagesImageManifestLayer:getImagesImageManifestLayer"
                    }
                },
                "mediaType": {
                    "type": "string"
                },
                "schemaVersion": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "configs",
                "layers",
                "mediaType",
                "schemaVersion"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImagesImageManifestConfig:getImagesImageManifestConfig": {
            "properties": {
                "digest": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "digest",
                "mediaType",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImagesImageManifestLayer:getImagesImageManifestLayer": {
            "properties": {
                "digest": {
                    "type": "string"
                },
                "mediaType": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "digest",
                "mediaType",
                "size"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getImagesQuery:getImagesQuery": {
            "properties": {
                "fetch": {
                    "type": "string"
                },
                "spec": {
                    "$ref": "#/types/cpln:index/getImagesQuerySpec:getImagesQuerySpec"
                }
            },
            "type": "object"
        },
        "cpln:index/getImagesQuerySpec:getImagesQuerySpec": {
            "properties": {
                "match": {
                    "type": "string"
                },
                "terms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getImagesQuerySpecTerm:getImagesQuerySpecTerm"
                    }
                }
            },
            "type": "object"
        },
        "cpln:index/getImagesQuerySpecTerm:getImagesQuerySpecTerm": {
            "properties": {
                "op": {
                    "type": "string"
                },
                "property": {
                    "type": "string"
                },
                "rel": {
                    "type": "string"
                },
                "tag": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/getLocationGeo:getLocationGeo": {
            "properties": {
                "city": {
                    "type": "string"
                },
                "continent": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                },
                "state": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "cpln:index/getLocationsLocation:getLocationsLocation": {
            "properties": {
                "cloudProvider": {
                    "type": "string"
                },
                "cplnId": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "geos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/getLocationsLocationGeo:getLocationsLocationGeo"
                    }
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "selfLink": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "cloudProvider",
                "cplnId",
                "description",
                "enabled",
                "geos",
                "ipRanges",
                "name",
                "region",
                "selfLink",
                "tags"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "cpln:index/getLocationsLocationGeo:getLocationsLocationGeo": {
            "properties": {
                "city": {
                    "type": "string"
                },
                "continent": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "lon": {
                    "type": "number"
                },
                "state": {
                    "type": "string"
                }
            },
            "type": "object"
        }
    },
    "provider": {
        "description": "The provider type for the cpln package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "endpoint": {
                "type": "string"
            },
            "org": {
                "type": "string"
            },
            "profile": {
                "type": "string"
            },
            "refreshToken": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        },
        "required": [
            "org"
        ],
        "inputProperties": {
            "endpoint": {
                "type": "string"
            },
            "org": {
                "type": "string"
            },
            "profile": {
                "type": "string"
            },
            "refreshToken": {
                "type": "string"
            },
            "token": {
                "type": "string"
            }
        },
        "requiredInputs": [
            "org"
        ]
    },
    "resources": {
        "cpln:index/agent:Agent": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Agent.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Agent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Agent.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "userData": {
                    "type": "string",
                    "description": "The JSON output needed when [creating an agent](https://docs.controlplane.com/guides/agent).\n",
                    "secret": true
                }
            },
            "required": [
                "cplnId",
                "name",
                "selfLink",
                "userData"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Agent.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Agent.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Agent resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Agent.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Agent.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Agent.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "userData": {
                        "type": "string",
                        "description": "The JSON output needed when [creating an agent](https://docs.controlplane.com/guides/agent).\n",
                        "secret": true
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/auditContext:AuditContext": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Audit Context.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Audit Context.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Audit Context.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "selfLink"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Audit Context.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Audit Context.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuditContext resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Audit Context.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Audit Context.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Audit Context.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/cloudAccount:CloudAccount": {
            "properties": {
                "aws": {
                    "$ref": "#/types/cpln:index/CloudAccountAws:CloudAccountAws",
                    "description": "Contains AWS cloud account configuration.\n"
                },
                "azure": {
                    "$ref": "#/types/cpln:index/CloudAccountAzure:CloudAccountAzure",
                    "description": "Contains Azure cloud account configuration.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Cloud Account.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Cloud Account.\n"
                },
                "gcp": {
                    "$ref": "#/types/cpln:index/CloudAccountGcp:CloudAccountGcp",
                    "description": "Contains GCP cloud account configuration.\n"
                },
                "gcpRoles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "gcpServiceAccountName": {
                    "type": "string",
                    "description": "GCP service account name used during the configuration of the cloud account at GCP.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Cloud Account.\n"
                },
                "ngs": {
                    "$ref": "#/types/cpln:index/CloudAccountNgs:CloudAccountNgs"
                },
                "selfLink": {
                    "type": "string"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "gcpRoles",
                "gcpServiceAccountName",
                "name",
                "selfLink"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/cpln:index/CloudAccountAws:CloudAccountAws",
                    "description": "Contains AWS cloud account configuration.\n"
                },
                "azure": {
                    "$ref": "#/types/cpln:index/CloudAccountAzure:CloudAccountAzure",
                    "description": "Contains Azure cloud account configuration.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Cloud Account.\n"
                },
                "gcp": {
                    "$ref": "#/types/cpln:index/CloudAccountGcp:CloudAccountGcp",
                    "description": "Contains GCP cloud account configuration.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Cloud Account.\n",
                    "willReplaceOnChanges": true
                },
                "ngs": {
                    "$ref": "#/types/cpln:index/CloudAccountNgs:CloudAccountNgs"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudAccount resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/cpln:index/CloudAccountAws:CloudAccountAws",
                        "description": "Contains AWS cloud account configuration.\n"
                    },
                    "azure": {
                        "$ref": "#/types/cpln:index/CloudAccountAzure:CloudAccountAzure",
                        "description": "Contains Azure cloud account configuration.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Cloud Account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Cloud Account.\n"
                    },
                    "gcp": {
                        "$ref": "#/types/cpln:index/CloudAccountGcp:CloudAccountGcp",
                        "description": "Contains GCP cloud account configuration.\n"
                    },
                    "gcpRoles": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "gcpServiceAccountName": {
                        "type": "string",
                        "description": "GCP service account name used during the configuration of the cloud account at GCP.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Cloud Account.\n",
                        "willReplaceOnChanges": true
                    },
                    "ngs": {
                        "$ref": "#/types/cpln:index/CloudAccountNgs:CloudAccountNgs"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/customLocation:CustomLocation": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud Provider of the custom location.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the custom location.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the custom location.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indication if the custom location is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the custom location.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cloudProvider",
                "cplnId",
                "enabled",
                "name",
                "selfLink"
            ],
            "inputProperties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud Provider of the custom location.\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the custom location.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indication if the custom location is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the custom location.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "requiredInputs": [
                "cloudProvider",
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomLocation resources.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud Provider of the custom location.\n",
                        "willReplaceOnChanges": true
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the custom location.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the custom location.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indication if the custom location is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the custom location.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/domain:Domain": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Domain.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the domain name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with\nDNS. Create and Update will fail if the required DNS entries cannot be validated.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "spec": {
                    "$ref": "#/types/cpln:index/DomainSpec:DomainSpec",
                    "description": "Domain specificiation.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/DomainStatus:DomainStatus"
                    }
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "selfLink",
                "spec",
                "statuses"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the domain name.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with\nDNS. Create and Update will fail if the required DNS entries cannot be validated.\n",
                    "willReplaceOnChanges": true
                },
                "spec": {
                    "$ref": "#/types/cpln:index/DomainSpec:DomainSpec",
                    "description": "Domain specificiation.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "requiredInputs": [
                "spec"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Domain resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Domain.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the domain name.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with\nDNS. Create and Update will fail if the required DNS entries cannot be validated.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "spec": {
                        "$ref": "#/types/cpln:index/DomainSpec:DomainSpec",
                        "description": "Domain specificiation.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/DomainStatus:DomainStatus"
                        }
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/domainRoute:DomainRoute": {
            "properties": {
                "domainLink": {
                    "type": "string",
                    "description": "The self link of the domain to add the route to.\n"
                },
                "domainPort": {
                    "type": "integer",
                    "description": "The port the route corresponds to. Default: 443\n"
                },
                "headers": {
                    "$ref": "#/types/cpln:index/DomainRouteHeaders:DomainRouteHeaders",
                    "description": "Modify the headers for all http requests for this route.\n"
                },
                "hostPrefix": {
                    "type": "string",
                    "description": "This option allows forwarding traffic for different host headers to different workloads. This will only be used when the\ntarget GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on\nSlack or at support@controlplane.com for additional details.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "For the linked workload, the port to route traffic to.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The path will match any unmatched path prefixes for the subdomain.\n"
                },
                "regex": {
                    "type": "string",
                    "description": "Used to match URI paths. Uses the google re2 regex syntax.\n"
                },
                "replacePrefix": {
                    "type": "string",
                    "description": "A path prefix can be configured to be replaced when forwarding the request to the Workload.\n"
                },
                "workloadLink": {
                    "type": "string",
                    "description": "The link of the workload to map the prefix to.\n"
                }
            },
            "required": [
                "domainLink",
                "workloadLink"
            ],
            "inputProperties": {
                "domainLink": {
                    "type": "string",
                    "description": "The self link of the domain to add the route to.\n",
                    "willReplaceOnChanges": true
                },
                "domainPort": {
                    "type": "integer",
                    "description": "The port the route corresponds to. Default: 443\n",
                    "willReplaceOnChanges": true
                },
                "headers": {
                    "$ref": "#/types/cpln:index/DomainRouteHeaders:DomainRouteHeaders",
                    "description": "Modify the headers for all http requests for this route.\n"
                },
                "hostPrefix": {
                    "type": "string",
                    "description": "This option allows forwarding traffic for different host headers to different workloads. This will only be used when the\ntarget GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on\nSlack or at support@controlplane.com for additional details.\n"
                },
                "port": {
                    "type": "integer",
                    "description": "For the linked workload, the port to route traffic to.\n"
                },
                "prefix": {
                    "type": "string",
                    "description": "The path will match any unmatched path prefixes for the subdomain.\n",
                    "willReplaceOnChanges": true
                },
                "regex": {
                    "type": "string",
                    "description": "Used to match URI paths. Uses the google re2 regex syntax.\n",
                    "willReplaceOnChanges": true
                },
                "replacePrefix": {
                    "type": "string",
                    "description": "A path prefix can be configured to be replaced when forwarding the request to the Workload.\n"
                },
                "workloadLink": {
                    "type": "string",
                    "description": "The link of the workload to map the prefix to.\n"
                }
            },
            "requiredInputs": [
                "domainLink",
                "workloadLink"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DomainRoute resources.\n",
                "properties": {
                    "domainLink": {
                        "type": "string",
                        "description": "The self link of the domain to add the route to.\n",
                        "willReplaceOnChanges": true
                    },
                    "domainPort": {
                        "type": "integer",
                        "description": "The port the route corresponds to. Default: 443\n",
                        "willReplaceOnChanges": true
                    },
                    "headers": {
                        "$ref": "#/types/cpln:index/DomainRouteHeaders:DomainRouteHeaders",
                        "description": "Modify the headers for all http requests for this route.\n"
                    },
                    "hostPrefix": {
                        "type": "string",
                        "description": "This option allows forwarding traffic for different host headers to different workloads. This will only be used when the\ntarget GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on\nSlack or at support@controlplane.com for additional details.\n"
                    },
                    "port": {
                        "type": "integer",
                        "description": "For the linked workload, the port to route traffic to.\n"
                    },
                    "prefix": {
                        "type": "string",
                        "description": "The path will match any unmatched path prefixes for the subdomain.\n",
                        "willReplaceOnChanges": true
                    },
                    "regex": {
                        "type": "string",
                        "description": "Used to match URI paths. Uses the google re2 regex syntax.\n",
                        "willReplaceOnChanges": true
                    },
                    "replacePrefix": {
                        "type": "string",
                        "description": "A path prefix can be configured to be replaced when forwarding the request to the Workload.\n"
                    },
                    "workloadLink": {
                        "type": "string",
                        "description": "The link of the workload to map the prefix to.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/group:Group": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Group.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of Group.\n"
                },
                "identityMatcher": {
                    "$ref": "#/types/cpln:index/GroupIdentityMatcher:GroupIdentityMatcher",
                    "description": "Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful\nfor managing the grouping of users logged-in with SAML providers.\n"
                },
                "memberQuery": {
                    "$ref": "#/types/cpln:index/GroupMemberQuery:GroupMemberQuery",
                    "description": "A predefined set of criteria or conditions used to query and retrieve members within the group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Group.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "Origin of the service account. Either `builtin` or `default`.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Fully qualified link to the this group.\n"
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of service accounts that exists within the configured org. Group membership will fail if the service account does\nnot exits within the org.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "userIdsAndEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of either the user ID or email address for a user that exists within the configured org. Group membership will fail\nif the user ID / email does not exist within the org.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "origin",
                "selfLink"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of Group.\n"
                },
                "identityMatcher": {
                    "$ref": "#/types/cpln:index/GroupIdentityMatcher:GroupIdentityMatcher",
                    "description": "Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful\nfor managing the grouping of users logged-in with SAML providers.\n"
                },
                "memberQuery": {
                    "$ref": "#/types/cpln:index/GroupMemberQuery:GroupMemberQuery",
                    "description": "A predefined set of criteria or conditions used to query and retrieve members within the group.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Group.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccounts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of service accounts that exists within the configured org. Group membership will fail if the service account does\nnot exits within the org.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "userIdsAndEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of either the user ID or email address for a user that exists within the configured org. Group membership will fail\nif the user ID / email does not exist within the org.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Group resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Group.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of Group.\n"
                    },
                    "identityMatcher": {
                        "$ref": "#/types/cpln:index/GroupIdentityMatcher:GroupIdentityMatcher",
                        "description": "Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful\nfor managing the grouping of users logged-in with SAML providers.\n"
                    },
                    "memberQuery": {
                        "$ref": "#/types/cpln:index/GroupMemberQuery:GroupMemberQuery",
                        "description": "A predefined set of criteria or conditions used to query and retrieve members within the group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Group.\n",
                        "willReplaceOnChanges": true
                    },
                    "origin": {
                        "type": "string",
                        "description": "Origin of the service account. Either `builtin` or `default`.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Fully qualified link to the this group.\n"
                    },
                    "serviceAccounts": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of service accounts that exists within the configured org. Group membership will fail if the service account does\nnot exits within the org.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "userIdsAndEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of either the user ID or email address for a user that exists within the configured org. Group membership will fail\nif the user ID / email does not exist within the org.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/gvc:Gvc": {
            "properties": {
                "alias": {
                    "type": "string",
                    "description": "The alias name of the GVC.\n"
                },
                "controlplaneTracing": {
                    "$ref": "#/types/cpln:index/GvcControlplaneTracing:GvcControlplaneTracing"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the GVC.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the GVC.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Custom domain name used by associated workloads.\n",
                    "deprecationMessage": "Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead."
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value array of resource env variables.\n"
                },
                "lightstepTracing": {
                    "$ref": "#/types/cpln:index/GvcLightstepTracing:GvcLightstepTracing"
                },
                "loadBalancer": {
                    "$ref": "#/types/cpln:index/GvcLoadBalancer:GvcLoadBalancer",
                    "description": "Dedicated load balancer configuration.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GVC.\n"
                },
                "otelTracing": {
                    "$ref": "#/types/cpln:index/GvcOtelTracing:GvcOtelTracing"
                },
                "pullSecrets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any\nprivate image repository referenced by Workloads within the GVC.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "sidecar": {
                    "$ref": "#/types/cpln:index/GvcSidecar:GvcSidecar"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "alias",
                "cplnId",
                "name",
                "selfLink"
            ],
            "inputProperties": {
                "controlplaneTracing": {
                    "$ref": "#/types/cpln:index/GvcControlplaneTracing:GvcControlplaneTracing"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the GVC.\n"
                },
                "domain": {
                    "type": "string",
                    "description": "Custom domain name used by associated workloads.\n",
                    "deprecationMessage": "Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead."
                },
                "env": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value array of resource env variables.\n"
                },
                "lightstepTracing": {
                    "$ref": "#/types/cpln:index/GvcLightstepTracing:GvcLightstepTracing"
                },
                "loadBalancer": {
                    "$ref": "#/types/cpln:index/GvcLoadBalancer:GvcLoadBalancer",
                    "description": "Dedicated load balancer configuration.\n"
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the GVC.\n",
                    "willReplaceOnChanges": true
                },
                "otelTracing": {
                    "$ref": "#/types/cpln:index/GvcOtelTracing:GvcOtelTracing"
                },
                "pullSecrets": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any\nprivate image repository referenced by Workloads within the GVC.\n"
                },
                "sidecar": {
                    "$ref": "#/types/cpln:index/GvcSidecar:GvcSidecar"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Gvc resources.\n",
                "properties": {
                    "alias": {
                        "type": "string",
                        "description": "The alias name of the GVC.\n"
                    },
                    "controlplaneTracing": {
                        "$ref": "#/types/cpln:index/GvcControlplaneTracing:GvcControlplaneTracing"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the GVC.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the GVC.\n"
                    },
                    "domain": {
                        "type": "string",
                        "description": "Custom domain name used by associated workloads.\n",
                        "deprecationMessage": "Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead."
                    },
                    "env": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value array of resource env variables.\n"
                    },
                    "lightstepTracing": {
                        "$ref": "#/types/cpln:index/GvcLightstepTracing:GvcLightstepTracing"
                    },
                    "loadBalancer": {
                        "$ref": "#/types/cpln:index/GvcLoadBalancer:GvcLoadBalancer",
                        "description": "Dedicated load balancer configuration.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the GVC.\n",
                        "willReplaceOnChanges": true
                    },
                    "otelTracing": {
                        "$ref": "#/types/cpln:index/GvcOtelTracing:GvcOtelTracing"
                    },
                    "pullSecrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any\nprivate image repository referenced by Workloads within the GVC.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "sidecar": {
                        "$ref": "#/types/cpln:index/GvcSidecar:GvcSidecar"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/identity:Identity": {
            "properties": {
                "awsAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityAwsAccessPolicy:IdentityAwsAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an AWS\nenvironment.\n"
                },
                "azureAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityAzureAccessPolicy:IdentityAzureAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an Azure\nenvironment.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "ID, in GUID format, of the Identity.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Identity.\n"
                },
                "gcpAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityGcpAccessPolicy:IdentityGcpAccessPolicy",
                    "description": "The GCP access policy can either contain an existing service_account or multiple bindings.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the GVC.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Identity.\n"
                },
                "nativeNetworkResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityNativeNetworkResource:IdentityNativeNetworkResource"
                    },
                    "description": "~\u003e **NOTE** The configuration of a native network resource requires the assistance of Control Plane support.\n"
                },
                "networkResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityNetworkResource:IdentityNetworkResource"
                    },
                    "description": "A network resource can be configured with: - A fully qualified domain name (FQDN) and ports. - An FQDN, resolver IP, and\nports. - IP's and ports.\n"
                },
                "ngsAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityNgsAccessPolicy:IdentityNgsAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an NGA\nenvironment.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of identity status. Available fields: `objectName`.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "gvc",
                "name",
                "selfLink",
                "status"
            ],
            "inputProperties": {
                "awsAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityAwsAccessPolicy:IdentityAwsAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an AWS\nenvironment.\n"
                },
                "azureAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityAzureAccessPolicy:IdentityAzureAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an Azure\nenvironment.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Identity.\n"
                },
                "gcpAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityGcpAccessPolicy:IdentityGcpAccessPolicy",
                    "description": "The GCP access policy can either contain an existing service_account or multiple bindings.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the GVC.\n",
                    "willReplaceOnChanges": true
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Identity.\n",
                    "willReplaceOnChanges": true
                },
                "nativeNetworkResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityNativeNetworkResource:IdentityNativeNetworkResource"
                    },
                    "description": "~\u003e **NOTE** The configuration of a native network resource requires the assistance of Control Plane support.\n"
                },
                "networkResources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/IdentityNetworkResource:IdentityNetworkResource"
                    },
                    "description": "A network resource can be configured with: - A fully qualified domain name (FQDN) and ports. - An FQDN, resolver IP, and\nports. - IP's and ports.\n"
                },
                "ngsAccessPolicy": {
                    "$ref": "#/types/cpln:index/IdentityNgsAccessPolicy:IdentityNgsAccessPolicy",
                    "description": "A set of access policy rules that defines the actions and resources that an identity can access within an NGA\nenvironment.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "requiredInputs": [
                "gvc"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Identity resources.\n",
                "properties": {
                    "awsAccessPolicy": {
                        "$ref": "#/types/cpln:index/IdentityAwsAccessPolicy:IdentityAwsAccessPolicy",
                        "description": "A set of access policy rules that defines the actions and resources that an identity can access within an AWS\nenvironment.\n"
                    },
                    "azureAccessPolicy": {
                        "$ref": "#/types/cpln:index/IdentityAzureAccessPolicy:IdentityAzureAccessPolicy",
                        "description": "A set of access policy rules that defines the actions and resources that an identity can access within an Azure\nenvironment.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "ID, in GUID format, of the Identity.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Identity.\n"
                    },
                    "gcpAccessPolicy": {
                        "$ref": "#/types/cpln:index/IdentityGcpAccessPolicy:IdentityGcpAccessPolicy",
                        "description": "The GCP access policy can either contain an existing service_account or multiple bindings.\n"
                    },
                    "gvc": {
                        "type": "string",
                        "description": "Name of the GVC.\n",
                        "willReplaceOnChanges": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Identity.\n",
                        "willReplaceOnChanges": true
                    },
                    "nativeNetworkResources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/IdentityNativeNetworkResource:IdentityNativeNetworkResource"
                        },
                        "description": "~\u003e **NOTE** The configuration of a native network resource requires the assistance of Control Plane support.\n"
                    },
                    "networkResources": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/IdentityNetworkResource:IdentityNetworkResource"
                        },
                        "description": "A network resource can be configured with: - A fully qualified domain name (FQDN) and ports. - An FQDN, resolver IP, and\nports. - IP's and ports.\n"
                    },
                    "ngsAccessPolicy": {
                        "$ref": "#/types/cpln:index/IdentityNgsAccessPolicy:IdentityNgsAccessPolicy",
                        "description": "A set of access policy rules that defines the actions and resources that an identity can access within an NGA\nenvironment.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "status": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of identity status. Available fields: `objectName`.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/location:Location": {
            "properties": {
                "cloudProvider": {
                    "type": "string",
                    "description": "Cloud Provider of the location.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the location.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the location.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Indication if location is enabled.\n"
                },
                "geos": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/LocationGeo:LocationGeo"
                    }
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "A list of IP ranges of the location.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Location.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Region of the location.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cloudProvider",
                "cplnId",
                "description",
                "enabled",
                "geos",
                "ipRanges",
                "name",
                "region",
                "selfLink"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indication if location is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Location.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "requiredInputs": [
                "enabled"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Location resources.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string",
                        "description": "Cloud Provider of the location.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the location.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the location.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Indication if location is enabled.\n"
                    },
                    "geos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/LocationGeo:LocationGeo"
                        }
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "A list of IP ranges of the location.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Location.\n",
                        "willReplaceOnChanges": true
                    },
                    "region": {
                        "type": "string",
                        "description": "Region of the location.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/mk8s:Mk8s": {
            "properties": {
                "addOns": {
                    "$ref": "#/types/cpln:index/Mk8sAddOns:Mk8sAddOns"
                },
                "alias": {
                    "type": "string",
                    "description": "The alias name of the Mk8s.\n"
                },
                "awsProvider": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProvider:Mk8sAwsProvider"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Mk8s.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Mk8s.\n"
                },
                "ephemeralProvider": {
                    "$ref": "#/types/cpln:index/Mk8sEphemeralProvider:Mk8sEphemeralProvider"
                },
                "firewalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sFirewall:Mk8sFirewall"
                    },
                    "description": "Allow-list.\n"
                },
                "genericProvider": {
                    "$ref": "#/types/cpln:index/Mk8sGenericProvider:Mk8sGenericProvider"
                },
                "hetznerProvider": {
                    "$ref": "#/types/cpln:index/Mk8sHetznerProvider:Mk8sHetznerProvider"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Mk8s.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sStatus:Mk8sStatus"
                    },
                    "description": "Status of the mk8s.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "version": {
                    "type": "string"
                }
            },
            "required": [
                "alias",
                "cplnId",
                "name",
                "selfLink",
                "statuses",
                "version"
            ],
            "inputProperties": {
                "addOns": {
                    "$ref": "#/types/cpln:index/Mk8sAddOns:Mk8sAddOns"
                },
                "awsProvider": {
                    "$ref": "#/types/cpln:index/Mk8sAwsProvider:Mk8sAwsProvider"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Mk8s.\n"
                },
                "ephemeralProvider": {
                    "$ref": "#/types/cpln:index/Mk8sEphemeralProvider:Mk8sEphemeralProvider"
                },
                "firewalls": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/Mk8sFirewall:Mk8sFirewall"
                    },
                    "description": "Allow-list.\n"
                },
                "genericProvider": {
                    "$ref": "#/types/cpln:index/Mk8sGenericProvider:Mk8sGenericProvider"
                },
                "hetznerProvider": {
                    "$ref": "#/types/cpln:index/Mk8sHetznerProvider:Mk8sHetznerProvider"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Mk8s.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "version": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "version"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Mk8s resources.\n",
                "properties": {
                    "addOns": {
                        "$ref": "#/types/cpln:index/Mk8sAddOns:Mk8sAddOns"
                    },
                    "alias": {
                        "type": "string",
                        "description": "The alias name of the Mk8s.\n"
                    },
                    "awsProvider": {
                        "$ref": "#/types/cpln:index/Mk8sAwsProvider:Mk8sAwsProvider"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Mk8s.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Mk8s.\n"
                    },
                    "ephemeralProvider": {
                        "$ref": "#/types/cpln:index/Mk8sEphemeralProvider:Mk8sEphemeralProvider"
                    },
                    "firewalls": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/Mk8sFirewall:Mk8sFirewall"
                        },
                        "description": "Allow-list.\n"
                    },
                    "genericProvider": {
                        "$ref": "#/types/cpln:index/Mk8sGenericProvider:Mk8sGenericProvider"
                    },
                    "hetznerProvider": {
                        "$ref": "#/types/cpln:index/Mk8sHetznerProvider:Mk8sHetznerProvider"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Mk8s.\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/Mk8sStatus:Mk8sStatus"
                        },
                        "description": "Status of the mk8s.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "version": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/org:Org": {
            "properties": {
                "accountId": {
                    "type": "string",
                    "description": "The associated account ID that will be used when creating the org. Only used on org creation. The account ID can be\nobtained from the `Org Management \u0026 Billing` page.\n"
                },
                "authConfig": {
                    "$ref": "#/types/cpln:index/OrgAuthConfig:OrgAuthConfig",
                    "description": "The configuration settings and parameters related to authentication within the org.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the org.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of org.\n"
                },
                "invitees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When an org is created, the list of email addresses which will receive an invitation to join the org and be assigned to\nthe `superusers` group. The user account used when creating the org will be included in this list.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the org.\n"
                },
                "observability": {
                    "$ref": "#/types/cpln:index/OrgObservability:OrgObservability",
                    "description": "The retention period (in days) for logs, metrics, and traces. Charges apply for storage beyond the 30 day default.\n"
                },
                "security": {
                    "$ref": "#/types/cpln:index/OrgSecurity:OrgSecurity"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "sessionTimeoutSeconds": {
                    "type": "integer",
                    "description": "The idle time (in seconds) in which the console UI will automatically sign-out the user. Default: 900 (15 minutes)\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgStatus:OrgStatus"
                    },
                    "description": "Status of the org.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of the org's tags.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "observability",
                "selfLink",
                "statuses"
            ],
            "inputProperties": {
                "accountId": {
                    "type": "string",
                    "description": "The associated account ID that will be used when creating the org. Only used on org creation. The account ID can be\nobtained from the `Org Management \u0026 Billing` page.\n"
                },
                "authConfig": {
                    "$ref": "#/types/cpln:index/OrgAuthConfig:OrgAuthConfig",
                    "description": "The configuration settings and parameters related to authentication within the org.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of org.\n"
                },
                "invitees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When an org is created, the list of email addresses which will receive an invitation to join the org and be assigned to\nthe `superusers` group. The user account used when creating the org will be included in this list.\n"
                },
                "observability": {
                    "$ref": "#/types/cpln:index/OrgObservability:OrgObservability",
                    "description": "The retention period (in days) for logs, metrics, and traces. Charges apply for storage beyond the 30 day default.\n"
                },
                "security": {
                    "$ref": "#/types/cpln:index/OrgSecurity:OrgSecurity"
                },
                "sessionTimeoutSeconds": {
                    "type": "integer",
                    "description": "The idle time (in seconds) in which the console UI will automatically sign-out the user. Default: 900 (15 minutes)\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of the org's tags.\n"
                }
            },
            "requiredInputs": [
                "observability"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Org resources.\n",
                "properties": {
                    "accountId": {
                        "type": "string",
                        "description": "The associated account ID that will be used when creating the org. Only used on org creation. The account ID can be\nobtained from the `Org Management \u0026 Billing` page.\n"
                    },
                    "authConfig": {
                        "$ref": "#/types/cpln:index/OrgAuthConfig:OrgAuthConfig",
                        "description": "The configuration settings and parameters related to authentication within the org.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the org.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of org.\n"
                    },
                    "invitees": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "When an org is created, the list of email addresses which will receive an invitation to join the org and be assigned to\nthe `superusers` group. The user account used when creating the org will be included in this list.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the org.\n"
                    },
                    "observability": {
                        "$ref": "#/types/cpln:index/OrgObservability:OrgObservability",
                        "description": "The retention period (in days) for logs, metrics, and traces. Charges apply for storage beyond the 30 day default.\n"
                    },
                    "security": {
                        "$ref": "#/types/cpln:index/OrgSecurity:OrgSecurity"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "sessionTimeoutSeconds": {
                        "type": "integer",
                        "description": "The idle time (in seconds) in which the console UI will automatically sign-out the user. Default: 900 (15 minutes)\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgStatus:OrgStatus"
                        },
                        "description": "Status of the org.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of the org's tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/orgLogging:OrgLogging": {
            "properties": {
                "cloudWatchLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingCloudWatchLogging:OrgLoggingCloudWatchLogging"
                    }
                },
                "coralogixLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingCoralogixLogging:OrgLoggingCoralogixLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/coralogix)\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the org.\n"
                },
                "datadogLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingDatadogLogging:OrgLoggingDatadogLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/datadog)\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of org.\n"
                },
                "elasticLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingElasticLogging:OrgLoggingElasticLogging"
                    },
                    "description": "For logging and analyzing data within an org using Elastic Logging.\n"
                },
                "fluentdLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingFluentdLogging:OrgLoggingFluentdLogging"
                    }
                },
                "logzioLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingLogzioLogging:OrgLoggingLogzioLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/logz-io)\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the org.\n"
                },
                "s3Loggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingS3Logging:OrgLoggingS3Logging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/s3)\n"
                },
                "stackdriverLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingStackdriverLogging:OrgLoggingStackdriverLogging"
                    }
                },
                "syslogLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingSyslogLogging:OrgLoggingSyslogLogging"
                    }
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of the org's tags.\n"
                }
            },
            "required": [
                "cplnId",
                "description",
                "name",
                "tags"
            ],
            "inputProperties": {
                "cloudWatchLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingCloudWatchLogging:OrgLoggingCloudWatchLogging"
                    }
                },
                "coralogixLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingCoralogixLogging:OrgLoggingCoralogixLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/coralogix)\n"
                },
                "datadogLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingDatadogLogging:OrgLoggingDatadogLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/datadog)\n"
                },
                "elasticLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingElasticLogging:OrgLoggingElasticLogging"
                    },
                    "description": "For logging and analyzing data within an org using Elastic Logging.\n"
                },
                "fluentdLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingFluentdLogging:OrgLoggingFluentdLogging"
                    }
                },
                "logzioLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingLogzioLogging:OrgLoggingLogzioLogging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/logz-io)\n"
                },
                "s3Loggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingS3Logging:OrgLoggingS3Logging"
                    },
                    "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/s3)\n"
                },
                "stackdriverLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingStackdriverLogging:OrgLoggingStackdriverLogging"
                    }
                },
                "syslogLoggings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/OrgLoggingSyslogLogging:OrgLoggingSyslogLogging"
                    }
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgLogging resources.\n",
                "properties": {
                    "cloudWatchLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingCloudWatchLogging:OrgLoggingCloudWatchLogging"
                        }
                    },
                    "coralogixLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingCoralogixLogging:OrgLoggingCoralogixLogging"
                        },
                        "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/coralogix)\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the org.\n"
                    },
                    "datadogLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingDatadogLogging:OrgLoggingDatadogLogging"
                        },
                        "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/datadog)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of org.\n"
                    },
                    "elasticLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingElasticLogging:OrgLoggingElasticLogging"
                        },
                        "description": "For logging and analyzing data within an org using Elastic Logging.\n"
                    },
                    "fluentdLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingFluentdLogging:OrgLoggingFluentdLogging"
                        }
                    },
                    "logzioLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingLogzioLogging:OrgLoggingLogzioLogging"
                        },
                        "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/logz-io)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the org.\n"
                    },
                    "s3Loggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingS3Logging:OrgLoggingS3Logging"
                        },
                        "description": "[Documentation Reference](https://docs.controlplane.com/external-logging/s3)\n"
                    },
                    "stackdriverLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingStackdriverLogging:OrgLoggingStackdriverLogging"
                        }
                    },
                    "syslogLoggings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/OrgLoggingSyslogLogging:OrgLoggingSyslogLogging"
                        }
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of the org's tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/orgTracing:OrgTracing": {
            "properties": {
                "controlplaneTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingControlplaneTracing:OrgTracingControlplaneTracing"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the org.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of org.\n"
                },
                "lightstepTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingLightstepTracing:OrgTracingLightstepTracing"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the org.\n"
                },
                "otelTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingOtelTracing:OrgTracingOtelTracing"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of the org's tags.\n"
                }
            },
            "required": [
                "cplnId",
                "description",
                "name",
                "tags"
            ],
            "inputProperties": {
                "controlplaneTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingControlplaneTracing:OrgTracingControlplaneTracing"
                },
                "lightstepTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingLightstepTracing:OrgTracingLightstepTracing"
                },
                "otelTracing": {
                    "$ref": "#/types/cpln:index/OrgTracingOtelTracing:OrgTracingOtelTracing"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering OrgTracing resources.\n",
                "properties": {
                    "controlplaneTracing": {
                        "$ref": "#/types/cpln:index/OrgTracingControlplaneTracing:OrgTracingControlplaneTracing"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the org.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of org.\n"
                    },
                    "lightstepTracing": {
                        "$ref": "#/types/cpln:index/OrgTracingLightstepTracing:OrgTracingLightstepTracing"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the org.\n"
                    },
                    "otelTracing": {
                        "$ref": "#/types/cpln:index/OrgTracingOtelTracing:OrgTracingOtelTracing"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of the org's tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/policy:Policy": {
            "properties": {
                "bindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/PolicyBinding:PolicyBinding"
                    },
                    "description": "The association between a target kind and the bound permissions to service principals.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Policy.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Policy.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "The GVC for `identity`, `workload` and `volumeset` target kinds only.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Policy.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "Origin of the Policy. Either `builtin` or `default`.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,\ndo not include the attribute.\n"
                },
                "targetKind": {
                    "type": "string",
                    "description": "The kind of resource to target (e.g., gvc, serviceaccount, etc.).\n"
                },
                "targetLinks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the targets this policy will be applied to. Not used if `target` is set to `all`.\n"
                },
                "targetQuery": {
                    "$ref": "#/types/cpln:index/PolicyTargetQuery:PolicyTargetQuery",
                    "description": "A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "origin",
                "selfLink",
                "targetKind"
            ],
            "inputProperties": {
                "bindings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/PolicyBinding:PolicyBinding"
                    },
                    "description": "The association between a target kind and the bound permissions to service principals.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Policy.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "The GVC for `identity`, `workload` and `volumeset` target kinds only.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Policy.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "target": {
                    "type": "string",
                    "description": "Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,\ndo not include the attribute.\n"
                },
                "targetKind": {
                    "type": "string",
                    "description": "The kind of resource to target (e.g., gvc, serviceaccount, etc.).\n",
                    "willReplaceOnChanges": true
                },
                "targetLinks": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of the targets this policy will be applied to. Not used if `target` is set to `all`.\n"
                },
                "targetQuery": {
                    "$ref": "#/types/cpln:index/PolicyTargetQuery:PolicyTargetQuery",
                    "description": "A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.\n"
                }
            },
            "requiredInputs": [
                "targetKind"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Policy resources.\n",
                "properties": {
                    "bindings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/PolicyBinding:PolicyBinding"
                        },
                        "description": "The association between a target kind and the bound permissions to service principals.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Policy.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Policy.\n"
                    },
                    "gvc": {
                        "type": "string",
                        "description": "The GVC for `identity`, `workload` and `volumeset` target kinds only.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Policy.\n",
                        "willReplaceOnChanges": true
                    },
                    "origin": {
                        "type": "string",
                        "description": "Origin of the Policy. Either `builtin` or `default`.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "target": {
                        "type": "string",
                        "description": "Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,\ndo not include the attribute.\n"
                    },
                    "targetKind": {
                        "type": "string",
                        "description": "The kind of resource to target (e.g., gvc, serviceaccount, etc.).\n",
                        "willReplaceOnChanges": true
                    },
                    "targetLinks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of the targets this policy will be applied to. Not used if `target` is set to `all`.\n"
                    },
                    "targetQuery": {
                        "$ref": "#/types/cpln:index/PolicyTargetQuery:PolicyTargetQuery",
                        "description": "A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/secret:Secret": {
            "properties": {
                "aws": {
                    "$ref": "#/types/cpln:index/SecretAws:SecretAws",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#aws).\n"
                },
                "azureConnector": {
                    "$ref": "#/types/cpln:index/SecretAzureConnector:SecretAzureConnector",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#azure-connector).\n"
                },
                "azureSdk": {
                    "type": "string",
                    "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#azure).\n",
                    "secret": true
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Secret.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Secret.\n"
                },
                "dictionary": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of unique key-value pairs. [Reference Page](https://docs.controlplane.com/reference/secret#dictionary).\n"
                },
                "dictionaryAsEnvs": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "If a dictionary secret is defined, this output will be a key-value map in the following format: `key =\ncpln://secret/SECRET_NAME.key`.\n"
                },
                "docker": {
                    "type": "string",
                    "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#docker).\n",
                    "secret": true
                },
                "ecr": {
                    "$ref": "#/types/cpln:index/SecretEcr:SecretEcr",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#ecr)\n"
                },
                "gcp": {
                    "type": "string",
                    "description": "JSON string containing the GCP secret. [Reference Page](https://docs.controlplane.com/reference/secret#gcp)\n",
                    "secret": true
                },
                "keypair": {
                    "$ref": "#/types/cpln:index/SecretKeypair:SecretKeypair",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#keypair).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret.\n"
                },
                "natsAccount": {
                    "$ref": "#/types/cpln:index/SecretNatsAccount:SecretNatsAccount",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#nats-account).\n"
                },
                "opaque": {
                    "$ref": "#/types/cpln:index/SecretOpaque:SecretOpaque",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#opaque).\n"
                },
                "secretLink": {
                    "type": "string",
                    "description": "Output used when linking a secret to an environment variable or volume.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tls": {
                    "$ref": "#/types/cpln:index/SecretTls:SecretTls",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#tls).\n"
                },
                "userpass": {
                    "$ref": "#/types/cpln:index/SecretUserpass:SecretUserpass",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#username).\n"
                }
            },
            "required": [
                "cplnId",
                "dictionaryAsEnvs",
                "name",
                "secretLink",
                "selfLink"
            ],
            "inputProperties": {
                "aws": {
                    "$ref": "#/types/cpln:index/SecretAws:SecretAws",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#aws).\n"
                },
                "azureConnector": {
                    "$ref": "#/types/cpln:index/SecretAzureConnector:SecretAzureConnector",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#azure-connector).\n"
                },
                "azureSdk": {
                    "type": "string",
                    "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#azure).\n",
                    "secret": true
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Secret.\n"
                },
                "dictionary": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "List of unique key-value pairs. [Reference Page](https://docs.controlplane.com/reference/secret#dictionary).\n"
                },
                "docker": {
                    "type": "string",
                    "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#docker).\n",
                    "secret": true
                },
                "ecr": {
                    "$ref": "#/types/cpln:index/SecretEcr:SecretEcr",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#ecr)\n"
                },
                "gcp": {
                    "type": "string",
                    "description": "JSON string containing the GCP secret. [Reference Page](https://docs.controlplane.com/reference/secret#gcp)\n",
                    "secret": true
                },
                "keypair": {
                    "$ref": "#/types/cpln:index/SecretKeypair:SecretKeypair",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#keypair).\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the secret.\n",
                    "willReplaceOnChanges": true
                },
                "natsAccount": {
                    "$ref": "#/types/cpln:index/SecretNatsAccount:SecretNatsAccount",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#nats-account).\n"
                },
                "opaque": {
                    "$ref": "#/types/cpln:index/SecretOpaque:SecretOpaque",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#opaque).\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "tls": {
                    "$ref": "#/types/cpln:index/SecretTls:SecretTls",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#tls).\n"
                },
                "userpass": {
                    "$ref": "#/types/cpln:index/SecretUserpass:SecretUserpass",
                    "description": "[Reference Page](https://docs.controlplane.com/reference/secret#username).\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "aws": {
                        "$ref": "#/types/cpln:index/SecretAws:SecretAws",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#aws).\n"
                    },
                    "azureConnector": {
                        "$ref": "#/types/cpln:index/SecretAzureConnector:SecretAzureConnector",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#azure-connector).\n"
                    },
                    "azureSdk": {
                        "type": "string",
                        "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#azure).\n",
                        "secret": true
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Secret.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Secret.\n"
                    },
                    "dictionary": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "List of unique key-value pairs. [Reference Page](https://docs.controlplane.com/reference/secret#dictionary).\n"
                    },
                    "dictionaryAsEnvs": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "If a dictionary secret is defined, this output will be a key-value map in the following format: `key =\ncpln://secret/SECRET_NAME.key`.\n"
                    },
                    "docker": {
                        "type": "string",
                        "description": "JSON string containing the Docker secret. [Reference Page](https://docs.controlplane.com/reference/secret#docker).\n",
                        "secret": true
                    },
                    "ecr": {
                        "$ref": "#/types/cpln:index/SecretEcr:SecretEcr",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#ecr)\n"
                    },
                    "gcp": {
                        "type": "string",
                        "description": "JSON string containing the GCP secret. [Reference Page](https://docs.controlplane.com/reference/secret#gcp)\n",
                        "secret": true
                    },
                    "keypair": {
                        "$ref": "#/types/cpln:index/SecretKeypair:SecretKeypair",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#keypair).\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the secret.\n",
                        "willReplaceOnChanges": true
                    },
                    "natsAccount": {
                        "$ref": "#/types/cpln:index/SecretNatsAccount:SecretNatsAccount",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#nats-account).\n"
                    },
                    "opaque": {
                        "$ref": "#/types/cpln:index/SecretOpaque:SecretOpaque",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#opaque).\n"
                    },
                    "secretLink": {
                        "type": "string",
                        "description": "Output used when linking a secret to an environment variable or volume.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "tls": {
                        "$ref": "#/types/cpln:index/SecretTls:SecretTls",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#tls).\n"
                    },
                    "userpass": {
                        "$ref": "#/types/cpln:index/SecretUserpass:SecretUserpass",
                        "description": "[Reference Page](https://docs.controlplane.com/reference/secret#username).\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/serviceAccount:ServiceAccount": {
            "properties": {
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Service Account.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Service Account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Service Account.\n"
                },
                "origin": {
                    "type": "string",
                    "description": "Origin of the Policy. Either `builtin` or `default`.\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "required": [
                "cplnId",
                "name",
                "origin",
                "selfLink"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Service Account.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Service Account.\n",
                    "willReplaceOnChanges": true
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccount resources.\n",
                "properties": {
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Service Account.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Service Account.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Service Account.\n",
                        "willReplaceOnChanges": true
                    },
                    "origin": {
                        "type": "string",
                        "description": "Origin of the Policy. Either `builtin` or `default`.\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/serviceAccountKey:ServiceAccountKey": {
            "properties": {
                "created": {
                    "type": "string",
                    "description": "The timestamp, in UTC, when the key was created.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Service Account Key.\n"
                },
                "key": {
                    "type": "string",
                    "description": "The generated key.\n",
                    "secret": true
                },
                "name": {
                    "type": "string",
                    "description": "The generated name of the key.\n"
                },
                "serviceAccountName": {
                    "type": "string",
                    "description": "The name of an existing Service Account this key will belong to.\n"
                }
            },
            "required": [
                "created",
                "description",
                "key",
                "name",
                "serviceAccountName"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the Service Account Key.\n",
                    "willReplaceOnChanges": true
                },
                "serviceAccountName": {
                    "type": "string",
                    "description": "The name of an existing Service Account this key will belong to.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "description",
                "serviceAccountName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ServiceAccountKey resources.\n",
                "properties": {
                    "created": {
                        "type": "string",
                        "description": "The timestamp, in UTC, when the key was created.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Service Account Key.\n",
                        "willReplaceOnChanges": true
                    },
                    "key": {
                        "type": "string",
                        "description": "The generated key.\n",
                        "secret": true
                    },
                    "name": {
                        "type": "string",
                        "description": "The generated name of the key.\n"
                    },
                    "serviceAccountName": {
                        "type": "string",
                        "description": "The name of an existing Service Account this key will belong to.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/volumeSet:VolumeSet": {
            "properties": {
                "autoscaling": {
                    "$ref": "#/types/cpln:index/VolumeSetAutoscaling:VolumeSetAutoscaling",
                    "description": "Automated adjustment of the volume set's capacity based on predefined metrics or conditions.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "ID, in GUID format, of the Volume Set.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Volume Set.\n"
                },
                "fileSystemType": {
                    "type": "string",
                    "description": "Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the associated GVC.\n"
                },
                "initialCapacity": {
                    "type": "integer",
                    "description": "The initial size in GB of volumes in this set. Minimum value: `10`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Volume Set.\n"
                },
                "performanceClass": {
                    "type": "string",
                    "description": "Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or\n`high-throughput-ssd`\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "snapshots": {
                    "$ref": "#/types/cpln:index/VolumeSetSnapshots:VolumeSetSnapshots",
                    "description": "Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.\n"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/VolumeSetStatus:VolumeSetStatus"
                    },
                    "description": "Status of the Volume Set.\n"
                },
                "storageClassSuffix": {
                    "type": "string",
                    "description": "For self-hosted locations only. The storage class used for volumes in this set will be\n{performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be\n{performanceClass}-{fileSystemType}\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "volumesetLink": {
                    "type": "string",
                    "description": "Output used when linking a volume set to a workload.\n"
                }
            },
            "required": [
                "cplnId",
                "gvc",
                "initialCapacity",
                "name",
                "performanceClass",
                "selfLink",
                "statuses",
                "volumesetLink"
            ],
            "inputProperties": {
                "autoscaling": {
                    "$ref": "#/types/cpln:index/VolumeSetAutoscaling:VolumeSetAutoscaling",
                    "description": "Automated adjustment of the volume set's capacity based on predefined metrics or conditions.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Volume Set.\n"
                },
                "fileSystemType": {
                    "type": "string",
                    "description": "Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`\n",
                    "willReplaceOnChanges": true
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the associated GVC.\n",
                    "willReplaceOnChanges": true
                },
                "initialCapacity": {
                    "type": "integer",
                    "description": "The initial size in GB of volumes in this set. Minimum value: `10`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Volume Set.\n",
                    "willReplaceOnChanges": true
                },
                "performanceClass": {
                    "type": "string",
                    "description": "Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or\n`high-throughput-ssd`\n",
                    "willReplaceOnChanges": true
                },
                "snapshots": {
                    "$ref": "#/types/cpln:index/VolumeSetSnapshots:VolumeSetSnapshots",
                    "description": "Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.\n"
                },
                "storageClassSuffix": {
                    "type": "string",
                    "description": "For self-hosted locations only. The storage class used for volumes in this set will be\n{performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be\n{performanceClass}-{fileSystemType}\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                }
            },
            "requiredInputs": [
                "gvc",
                "initialCapacity",
                "performanceClass"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering VolumeSet resources.\n",
                "properties": {
                    "autoscaling": {
                        "$ref": "#/types/cpln:index/VolumeSetAutoscaling:VolumeSetAutoscaling",
                        "description": "Automated adjustment of the volume set's capacity based on predefined metrics or conditions.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "ID, in GUID format, of the Volume Set.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Volume Set.\n"
                    },
                    "fileSystemType": {
                        "type": "string",
                        "description": "Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`\n",
                        "willReplaceOnChanges": true
                    },
                    "gvc": {
                        "type": "string",
                        "description": "Name of the associated GVC.\n",
                        "willReplaceOnChanges": true
                    },
                    "initialCapacity": {
                        "type": "integer",
                        "description": "The initial size in GB of volumes in this set. Minimum value: `10`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Volume Set.\n",
                        "willReplaceOnChanges": true
                    },
                    "performanceClass": {
                        "type": "string",
                        "description": "Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or\n`high-throughput-ssd`\n",
                        "willReplaceOnChanges": true
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "snapshots": {
                        "$ref": "#/types/cpln:index/VolumeSetSnapshots:VolumeSetSnapshots",
                        "description": "Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.\n"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/VolumeSetStatus:VolumeSetStatus"
                        },
                        "description": "Status of the Volume Set.\n"
                    },
                    "storageClassSuffix": {
                        "type": "string",
                        "description": "For self-hosted locations only. The storage class used for volumes in this set will be\n{performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be\n{performanceClass}-{fileSystemType}\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "volumesetLink": {
                        "type": "string",
                        "description": "Output used when linking a volume set to a workload.\n"
                    }
                },
                "type": "object"
            }
        },
        "cpln:index/workload:Workload": {
            "properties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadContainer:WorkloadContainer"
                    },
                    "description": "An isolated and lightweight runtime environment that encapsulates an application and its dependencies.\n"
                },
                "cplnId": {
                    "type": "string",
                    "description": "The ID, in GUID format, of the Workload.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Workload.\n"
                },
                "firewallSpec": {
                    "$ref": "#/types/cpln:index/WorkloadFirewallSpec:WorkloadFirewallSpec",
                    "description": "Control of inbound and outbound access to the workload for external (public) and internal (service to service) traffic.\nAccess is restricted by default.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the associated GVC.\n"
                },
                "identityLink": {
                    "type": "string",
                    "description": "Full link to an Identity.\n"
                },
                "job": {
                    "$ref": "#/types/cpln:index/WorkloadJob:WorkloadJob",
                    "description": "[Cron Job Reference Page](https://docs.controlplane.com/reference/workload#cron).\n"
                },
                "loadBalancer": {
                    "$ref": "#/types/cpln:index/WorkloadLoadBalancer:WorkloadLoadBalancer"
                },
                "localOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadLocalOption:WorkloadLocalOption"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Workload.\n"
                },
                "options": {
                    "$ref": "#/types/cpln:index/WorkloadOptions:WorkloadOptions",
                    "description": "Configurable settings or parameters that allow fine-tuning and customization of the behavior, performance, and\ncharacteristics of the workload.\n"
                },
                "rolloutOptions": {
                    "$ref": "#/types/cpln:index/WorkloadRolloutOptions:WorkloadRolloutOptions",
                    "description": "Defines the parameters for updating applications and services, including settings for minimum readiness, unavailable\nreplicas, surge replicas, and scaling policies.\n"
                },
                "securityOptions": {
                    "$ref": "#/types/cpln:index/WorkloadSecurityOptions:WorkloadSecurityOptions",
                    "description": "Allows for the configuration of the `file system group id` and `geo location`\n"
                },
                "selfLink": {
                    "type": "string",
                    "description": "Full link to this resource. Can be referenced by other resources.\n"
                },
                "sidecar": {
                    "$ref": "#/types/cpln:index/WorkloadSidecar:WorkloadSidecar"
                },
                "statuses": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadStatus:WorkloadStatus"
                    },
                    "description": "Status of the workload.\n"
                },
                "supportDynamicTags": {
                    "type": "boolean",
                    "description": "Workload will automatically redeploy when one of the container images is updated in the container registry. Default:\nfalse.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Workload Type. Either `serverless`, `standard`, `stateful`, or `cron`.\n"
                }
            },
            "required": [
                "containers",
                "cplnId",
                "gvc",
                "name",
                "selfLink",
                "statuses",
                "type"
            ],
            "inputProperties": {
                "containers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadContainer:WorkloadContainer"
                    },
                    "description": "An isolated and lightweight runtime environment that encapsulates an application and its dependencies.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the Workload.\n"
                },
                "firewallSpec": {
                    "$ref": "#/types/cpln:index/WorkloadFirewallSpec:WorkloadFirewallSpec",
                    "description": "Control of inbound and outbound access to the workload for external (public) and internal (service to service) traffic.\nAccess is restricted by default.\n"
                },
                "gvc": {
                    "type": "string",
                    "description": "Name of the associated GVC.\n",
                    "willReplaceOnChanges": true
                },
                "identityLink": {
                    "type": "string",
                    "description": "Full link to an Identity.\n"
                },
                "job": {
                    "$ref": "#/types/cpln:index/WorkloadJob:WorkloadJob",
                    "description": "[Cron Job Reference Page](https://docs.controlplane.com/reference/workload#cron).\n"
                },
                "loadBalancer": {
                    "$ref": "#/types/cpln:index/WorkloadLoadBalancer:WorkloadLoadBalancer"
                },
                "localOptions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/cpln:index/WorkloadLocalOption:WorkloadLocalOption"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Workload.\n",
                    "willReplaceOnChanges": true
                },
                "options": {
                    "$ref": "#/types/cpln:index/WorkloadOptions:WorkloadOptions",
                    "description": "Configurable settings or parameters that allow fine-tuning and customization of the behavior, performance, and\ncharacteristics of the workload.\n"
                },
                "rolloutOptions": {
                    "$ref": "#/types/cpln:index/WorkloadRolloutOptions:WorkloadRolloutOptions",
                    "description": "Defines the parameters for updating applications and services, including settings for minimum readiness, unavailable\nreplicas, surge replicas, and scaling policies.\n"
                },
                "securityOptions": {
                    "$ref": "#/types/cpln:index/WorkloadSecurityOptions:WorkloadSecurityOptions",
                    "description": "Allows for the configuration of the `file system group id` and `geo location`\n"
                },
                "sidecar": {
                    "$ref": "#/types/cpln:index/WorkloadSidecar:WorkloadSidecar"
                },
                "supportDynamicTags": {
                    "type": "boolean",
                    "description": "Workload will automatically redeploy when one of the container images is updated in the container registry. Default:\nfalse.\n"
                },
                "tags": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "Key-value map of resource tags.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Workload Type. Either `serverless`, `standard`, `stateful`, or `cron`.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "containers",
                "gvc",
                "type"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Workload resources.\n",
                "properties": {
                    "containers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/WorkloadContainer:WorkloadContainer"
                        },
                        "description": "An isolated and lightweight runtime environment that encapsulates an application and its dependencies.\n"
                    },
                    "cplnId": {
                        "type": "string",
                        "description": "The ID, in GUID format, of the Workload.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the Workload.\n"
                    },
                    "firewallSpec": {
                        "$ref": "#/types/cpln:index/WorkloadFirewallSpec:WorkloadFirewallSpec",
                        "description": "Control of inbound and outbound access to the workload for external (public) and internal (service to service) traffic.\nAccess is restricted by default.\n"
                    },
                    "gvc": {
                        "type": "string",
                        "description": "Name of the associated GVC.\n",
                        "willReplaceOnChanges": true
                    },
                    "identityLink": {
                        "type": "string",
                        "description": "Full link to an Identity.\n"
                    },
                    "job": {
                        "$ref": "#/types/cpln:index/WorkloadJob:WorkloadJob",
                        "description": "[Cron Job Reference Page](https://docs.controlplane.com/reference/workload#cron).\n"
                    },
                    "loadBalancer": {
                        "$ref": "#/types/cpln:index/WorkloadLoadBalancer:WorkloadLoadBalancer"
                    },
                    "localOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/WorkloadLocalOption:WorkloadLocalOption"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Workload.\n",
                        "willReplaceOnChanges": true
                    },
                    "options": {
                        "$ref": "#/types/cpln:index/WorkloadOptions:WorkloadOptions",
                        "description": "Configurable settings or parameters that allow fine-tuning and customization of the behavior, performance, and\ncharacteristics of the workload.\n"
                    },
                    "rolloutOptions": {
                        "$ref": "#/types/cpln:index/WorkloadRolloutOptions:WorkloadRolloutOptions",
                        "description": "Defines the parameters for updating applications and services, including settings for minimum readiness, unavailable\nreplicas, surge replicas, and scaling policies.\n"
                    },
                    "securityOptions": {
                        "$ref": "#/types/cpln:index/WorkloadSecurityOptions:WorkloadSecurityOptions",
                        "description": "Allows for the configuration of the `file system group id` and `geo location`\n"
                    },
                    "selfLink": {
                        "type": "string",
                        "description": "Full link to this resource. Can be referenced by other resources.\n"
                    },
                    "sidecar": {
                        "$ref": "#/types/cpln:index/WorkloadSidecar:WorkloadSidecar"
                    },
                    "statuses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/WorkloadStatus:WorkloadStatus"
                        },
                        "description": "Status of the workload.\n"
                    },
                    "supportDynamicTags": {
                        "type": "boolean",
                        "description": "Workload will automatically redeploy when one of the container images is updated in the container registry. Default:\nfalse.\n"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        },
                        "description": "Key-value map of resource tags.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Workload Type. Either `serverless`, `standard`, `stateful`, or `cron`.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "cpln:index/getCloudAccount:getCloudAccount": {
            "description": "Use this data source to access information about an existing [Cloud Account](https://docs.controlplane.com/reference/cloudaccount) within Control Plane.\n\n## Outputs\n\n- **aws_identifiers** (String)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst this = cpln.getCloudAccount({});\nexport const cloudAccount = _this.then(_this =\u003e _this.awsIdentifiers);\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\nthis = cpln.get_cloud_account()\npulumi.export(\"cloudAccount\", this.aws_identifiers)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var @this = Cpln.GetCloudAccount.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"cloudAccount\"] = @this.Apply(@this =\u003e @this.Apply(getCloudAccountResult =\u003e getCloudAccountResult.AwsIdentifiers)),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tthis, err := cpln.LookupCloudAccount(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"cloudAccount\", this.AwsIdentifiers)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var this = CplnFunctions.getCloudAccount();\n\n        ctx.export(\"cloudAccount\", this_.awsIdentifiers());\n    }\n}\n```\n```yaml\nvariables:\n  this:\n    fn::invoke:\n      Function: cpln:getCloudAccount\n      Arguments: {}\noutputs:\n  cloudAccount: ${this.awsIdentifiers}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getCloudAccount.\n",
                "properties": {
                    "awsIdentifiers": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "awsIdentifiers",
                    "id"
                ]
            }
        },
        "cpln:index/getGvc:getGvc": {
            "description": "Use this data source to access information about an existing [Global Virtual Cloud (GVC)](https://docs.controlplane.com/reference/gvc) within Control Plane. \n\n## Required\n\n- **name** (String) Name of the GVC.\n\n## Outputs\n\nThe following attributes are exported:\n\n- **cpln_id** (String) The ID, in GUID format, of the GVC.\n- **name** (String) Name of the GVC.\n- **alias** (String) The alias name of the GVC.\n- **description** (String) Description of the GVC.\n- **tags** (Map of String) Key-value map of resource tags.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n- **domain** (String) Custom domain name used by associated workloads.\n- **locations** (List of String) A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.\n- **pull_secrets** (List of String) A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any private image repository referenced by Workloads within the GVC.\n- **lightstep_tracing** (Block List, Max: 1) (see below).\n- **otel_tracing** (Block List, Max: 1) (see below).\n- **controlplane_tracing** (Block List, Max: 1) (see below).\n- **load_balancer** (Block List, Max: 1) (see below).\n\n\u003ca id=\"nestedblock--lightstep_tracing\"\u003e\u003c/a\u003e\n\n### `lightstep_tracing`\n\n- **sampling** (Int) Sampling percentage.\n- **endpoint** (String) Tracing Endpoint Workload. Either the canonical endpoint or the internal endpoint.\n- **credentials** (String) Full link to referenced Opaque Secret.\n\n\u003ca id=\"nestedblock--otel_tracing\"\u003e\u003c/a\u003e\n\n### `otel_tracing`\n\n- **sampling** (Int) Determines what percentage of requests should be traced.\n- **endpoint** (String) Tracing Endpoint Workload. Either the canonical endpoint or internal endpoint.\n- **custom_tags** (Map of String) Key-value map of custom tags.\n\n\u003ca id=\"nestedblock--controlplane_tracing\"\u003e\u003c/a\u003e\n\n### `controlplane_tracing`\n\n- **sampling** (Int) Determines what percentage of requests should be traced.\n- **custom_tags** (Map of String) Key-value map of custom tags.\n\n\u003ca id=\"nestedblock--load_balancer\"\u003e\u003c/a\u003e\n\n### `load_balancer`\n\n- **dedicated** (Boolean) Creates a dedicated load balancer in each location and enables additional Domain features: custom ports, protocols and wildcard hostnames. Charges apply for each location.\n\n- **trusted_proxies** (Int) Controls the address used for request logging and for setting the X-Envoy-External-Address header. If set to 1, then the last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If set to 2, then the second to last address in an existing X-Forwarded-For header will be used in place of the source client IP address. If the XFF header does not have at least two addresses or does not exist then the source client IP address will be used instead.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst gvc = cpln.getGvc({\n    name: \"gvc-example\",\n});\nexport const gvcId = gvc.then(gvc =\u003e gvc.id);\nexport const gvcLocations = gvc.then(gvc =\u003e gvc.locations);\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\ngvc = cpln.get_gvc(name=\"gvc-example\")\npulumi.export(\"gvcId\", gvc.id)\npulumi.export(\"gvcLocations\", gvc.locations)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var gvc = Cpln.GetGvc.Invoke(new()\n    {\n        Name = \"gvc-example\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"gvcId\"] = gvc.Apply(getGvcResult =\u003e getGvcResult.Id),\n        [\"gvcLocations\"] = gvc.Apply(getGvcResult =\u003e getGvcResult.Locations),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tgvc, err := cpln.LookupGvc(ctx, \u0026cpln.LookupGvcArgs{\n\t\t\tName: \"gvc-example\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"gvcId\", gvc.Id)\n\t\tctx.Export(\"gvcLocations\", gvc.Locations)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport com.pulumi.cpln.inputs.GetGvcArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var gvc = CplnFunctions.getGvc(GetGvcArgs.builder()\n            .name(\"gvc-example\")\n            .build());\n\n        ctx.export(\"gvcId\", gvc.applyValue(getGvcResult -\u003e getGvcResult.id()));\n        ctx.export(\"gvcLocations\", gvc.applyValue(getGvcResult -\u003e getGvcResult.locations()));\n    }\n}\n```\n```yaml\nvariables:\n  gvc:\n    fn::invoke:\n      Function: cpln:getGvc\n      Arguments:\n        name: gvc-example\noutputs:\n  gvcId: ${gvc.id}\n  gvcLocations: ${gvc.locations}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getGvc.\n",
                "properties": {
                    "controlplaneTracing": {
                        "$ref": "#/types/cpln:index/getGvcControlplaneTracing:getGvcControlplaneTracing"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string",
                        "deprecationMessage": "Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead."
                    },
                    "env": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "lightstepTracing": {
                        "$ref": "#/types/cpln:index/getGvcLightstepTracing:getGvcLightstepTracing"
                    },
                    "loadBalancer": {
                        "$ref": "#/types/cpln:index/getGvcLoadBalancer:getGvcLoadBalancer"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "otelTracing": {
                        "$ref": "#/types/cpln:index/getGvcOtelTracing:getGvcOtelTracing"
                    },
                    "pullSecrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "sidecar": {
                        "$ref": "#/types/cpln:index/getGvcSidecar:getGvcSidecar"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGvc.\n",
                "properties": {
                    "alias": {
                        "type": "string"
                    },
                    "controlplaneTracing": {
                        "$ref": "#/types/cpln:index/getGvcControlplaneTracing:getGvcControlplaneTracing"
                    },
                    "cplnId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "domain": {
                        "type": "string",
                        "deprecationMessage": "Selecting a domain on a GVC will be deprecated in the future. Use the 'cpln_domain resource' instead."
                    },
                    "env": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lightstepTracing": {
                        "$ref": "#/types/cpln:index/getGvcLightstepTracing:getGvcLightstepTracing"
                    },
                    "loadBalancer": {
                        "$ref": "#/types/cpln:index/getGvcLoadBalancer:getGvcLoadBalancer"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "otelTracing": {
                        "$ref": "#/types/cpln:index/getGvcOtelTracing:getGvcOtelTracing"
                    },
                    "pullSecrets": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "sidecar": {
                        "$ref": "#/types/cpln:index/getGvcSidecar:getGvcSidecar"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "alias",
                    "cplnId",
                    "name",
                    "selfLink",
                    "id"
                ]
            }
        },
        "cpln:index/getImage:getImage": {
            "description": "Use this data source to access information about an [Image](https://docs.controlplane.com/reference/image) within Control Plane.\n\n## Required\n\n- **name** (String) Name of the image. If the tag of the image is not specified, the latest image will be fetched for this data source.\n\n## Outputs\n\nThe following attributes are exported:\n\n- **cpln_id** (String) The ID, in GUID format, of the Image.\n- **name** (String) Name of the Image.\n- **tags** (Map of String) Key-value map of resource tags.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n- **tag** (String) Tag of the image.\n- **repository** (String) Respository name of the image.\n- **digest** (String) A unique SHA256 hash used to identify a specific image version within the image registry.\n- **manifest** (Block List, Max: 1) (see below)\n\n\u003ca id=\"nestedblock--manifest\"\u003e\u003c/a\u003e\n\n### `manifest`\n\n The manifest provides configuration and layers information about the image. It plays a crucial role in the Docker image distribution system, enabling image creation, verification, and replication in a consistent and secure manner.\n\n- **config** (Block List, Max: 1) (see below).\n- **layers** (Block List) (see below).\n- **media_type** (String) Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n- **schema_version** (Number) The version of the Docker Image Manifest format.\n\n\u003ca id=\"nestedblock--config--layers\"\u003e\u003c/a\u003e\n\n### `config` and `layers`\n\nThe config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.\n\nLayers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.\n\n- **size** (Number) The size of the image or layer in bytes. This helps in estimating the space required and the download time.\n- **digest** (String) A unique SHA256 hash used to identify a specific image version within the image registry.\n- **media_type** (String) Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst image-name-only = cpln.getImage({\n    name: \"IMAGE_NAME\",\n});\nconst image-name-with-tag = cpln.getImage({\n    name: \"IMAGE_NAME:TAG\",\n});\nexport const latestImage = image_name_only;\nexport const specificImage = image_name_with_tag;\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\nimage_name_only = cpln.get_image(name=\"IMAGE_NAME\")\nimage_name_with_tag = cpln.get_image(name=\"IMAGE_NAME:TAG\")\npulumi.export(\"latestImage\", image_name_only)\npulumi.export(\"specificImage\", image_name_with_tag)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var image_name_only = Cpln.GetImage.Invoke(new()\n    {\n        Name = \"IMAGE_NAME\",\n    });\n\n    var image_name_with_tag = Cpln.GetImage.Invoke(new()\n    {\n        Name = \"IMAGE_NAME:TAG\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"latestImage\"] = image_name_only,\n        [\"specificImage\"] = image_name_with_tag,\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\timage_name_only, err := cpln.GetImage(ctx, \u0026cpln.GetImageArgs{\n\t\t\tName: \"IMAGE_NAME\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\timage_name_with_tag, err := cpln.GetImage(ctx, \u0026cpln.GetImageArgs{\n\t\t\tName: \"IMAGE_NAME:TAG\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"latestImage\", image_name_only)\n\t\tctx.Export(\"specificImage\", image_name_with_tag)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport com.pulumi.cpln.inputs.GetImageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var image-name-only = CplnFunctions.getImage(GetImageArgs.builder()\n            .name(\"IMAGE_NAME\")\n            .build());\n\n        final var image-name-with-tag = CplnFunctions.getImage(GetImageArgs.builder()\n            .name(\"IMAGE_NAME:TAG\")\n            .build());\n\n        ctx.export(\"latestImage\", image_name_only);\n        ctx.export(\"specificImage\", image_name_with_tag);\n    }\n}\n```\n```yaml\nvariables:\n  image-name-only:\n    fn::invoke:\n      Function: cpln:getImage\n      Arguments:\n        name: IMAGE_NAME\n  image-name-with-tag:\n    fn::invoke:\n      Function: cpln:getImage\n      Arguments:\n        name: IMAGE_NAME:TAG\noutputs:\n  latestImage: ${[\"image-name-only\"]}\n  specificImage: ${[\"image-name-with-tag\"]}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getImage.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getImage.\n",
                "properties": {
                    "cplnId": {
                        "type": "string"
                    },
                    "digest": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "manifests": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/getImageManifest:getImageManifest"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "repository": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "tag": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "cplnId",
                    "digest",
                    "manifests",
                    "name",
                    "repository",
                    "selfLink",
                    "tag",
                    "tags",
                    "id"
                ]
            }
        },
        "cpln:index/getImages:getImages": {
            "description": "Use this data source to access information about all [Images](https://docs.controlplane.com/reference/image) within Control Plane.\n\n## Optional\n\n- **query** (Block List, Max: 1) (see below).\n\n\u003ca id=\"nestedblock--query\"\u003e\u003c/a\u003e\n\n### `query`\n\nOptional:\n\n- **fetch** (String) Type of fetch. Specify either: `links` or `items`. Default: `items`.\n- **spec** (Block List, Max: 1) (see below).\n\n\u003ca id=\"nestedblock--query--spec\"\u003e\u003c/a\u003e\n\n### `query.spec`\n\nOptional:\n\n- **match** (String) Type of match. Available values: `all`, `any`, `none`. Default: `all`.\n- **terms** (Block List) (see below).\n\n\u003ca id=\"nestedblock--query--spec--terms\"\u003e\u003c/a\u003e\n\n### `query.spec.terms`\n\n\u003c!-- Terms can only contain one of the following attributes: `property`, `rel`, `tag`. --\u003e\n\nTerms can only contain one of the following attributes: `property`, `rel`, `tag`.\n\nOptional:\n\n- **op** (String) Type of query operation. Available values: `=`, `\u003e`, `\u003e=`, `\u003c`, `\u003c=`, `!=`, `exists`, `!exists`. Default: `=`.\n\n- **property** (String) Property to use for query evaluation.\n- **rel** (String) Rel to use use for query evaluation.\n- **tag** (String) Tag key to use for query evaluation.\n- **value** (String) Testing value for query evaluation.\n\n## Outputs\n\nThe following attributes are exported:\n\n- **images** (Block List) (see below).\n\n\u003ca id=\"nestedblock--images\"\u003e\u003c/a\u003e\n\n### `images`\n\n- **cpln_id** (String) The ID, in GUID format, of the Image.\n- **name** (String) Name of the Image.\n- **tags** (Map of String) Key-value map of resource tags.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n- **tag** (String) Tag of the image.\n- **repository** (String) Respository name of the image.\n- **digest** (String) A unique SHA256 hash used to identify a specific image version within the image registry.\n- **manifest** (Block List, Max: 1) (see below)\n\n\u003ca id=\"nestedblock--manifest\"\u003e\u003c/a\u003e\n\n### `manifest`\n\n The manifest provides configuration and layers information about the image. It plays a crucial role in the Docker image distribution system, enabling image creation, verification, and replication in a consistent and secure manner.\n\n- **config** (Block List, Max: 1) (see below).\n- **layers** (Block List) (see below).\n- **media_type** (String) Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n- **schema_version** (Number) The version of the Docker Image Manifest format.\n\n\u003ca id=\"nestedblock--config--layers\"\u003e\u003c/a\u003e\n\n### `config` and `layers`\n\nThe config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.\n\nLayers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.\n\n- **size** (Number) The size of the image or layer in bytes. This helps in estimating the space required and the download time.\n- **digest** (String) A unique SHA256 hash used to identify a specific image version within the image registry.\n- **media_type** (String) Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getImages.\n",
                "properties": {
                    "query": {
                        "$ref": "#/types/cpln:index/getImagesQuery:getImagesQuery"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getImages.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "images": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/getImagesImage:getImagesImage"
                        }
                    },
                    "query": {
                        "$ref": "#/types/cpln:index/getImagesQuery:getImagesQuery"
                    }
                },
                "type": "object",
                "required": [
                    "images",
                    "id"
                ]
            }
        },
        "cpln:index/getLocation:getLocation": {
            "description": "Use this data source to access information about a [Location](https://docs.controlplane.com/reference/location) within Control Plane.\n\n## Required\n\n- **name** (String) Name of the location (i.e. `aws-us-west-2`).\n\n## Outputs\n\nThe following attributes are exported:\n\n- **cpln_id** (String) The ID, in GUID format, of the location.\n- **name** (String) Name of the location.\n- **description** (String) Description of the location.\n- **tags** (Map of String) Key-value map of resource tags.\n- **cloud_provider** (String) Cloud Provider of the location.\n- **region** (String) Region of the location.\n- **enabled** (Boolean) Indication if location is enabled.\n- **geo** (Block List, Max: 1) (see below)\n- **ip_ranges** (List of String) A list of IP ranges of the location.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n\n\u003ca id=\"nestedblock--geo\"\u003e\u003c/a\u003e\n\n### `geo`\n\nLocation geographical details\n\n- **lat** (Number) Latitude.\n- **lon** (Number) Longitude.\n- **country** (String) Country.\n- **state** (String) State.\n- **city** (String) City.\n- **continent** (String) Continent.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst locationLocation = cpln.getLocation({\n    name: \"aws-us-west-2\",\n});\nexport const location = locationLocation;\nexport const locationEnabled = locationLocation.then(locationLocation =\u003e locationLocation.enabled);\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\nlocation_location = cpln.get_location(name=\"aws-us-west-2\")\npulumi.export(\"location\", location_location)\npulumi.export(\"locationEnabled\", location_location.enabled)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var locationLocation = Cpln.GetLocation.Invoke(new()\n    {\n        Name = \"aws-us-west-2\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"location\"] = locationLocation,\n        [\"locationEnabled\"] = locationLocation.Apply(getLocationResult =\u003e getLocationResult.Enabled),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocationLocation, err := cpln.LookupLocation(ctx, \u0026cpln.LookupLocationArgs{\n\t\t\tName: \"aws-us-west-2\",\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"location\", locationLocation)\n\t\tctx.Export(\"locationEnabled\", locationLocation.Enabled)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport com.pulumi.cpln.inputs.GetLocationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var locationLocation = CplnFunctions.getLocation(GetLocationArgs.builder()\n            .name(\"aws-us-west-2\")\n            .build());\n\n        ctx.export(\"location\", locationLocation.applyValue(getLocationResult -\u003e getLocationResult));\n        ctx.export(\"locationEnabled\", locationLocation.applyValue(getLocationResult -\u003e getLocationResult.enabled()));\n    }\n}\n```\n```yaml\nvariables:\n  locationLocation:\n    fn::invoke:\n      Function: cpln:getLocation\n      Arguments:\n        name: aws-us-west-2\noutputs:\n  location: ${locationLocation}\n  locationEnabled: ${locationLocation.enabled}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLocation.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getLocation.\n",
                "properties": {
                    "cloudProvider": {
                        "type": "string"
                    },
                    "cplnId": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "geos": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/getLocationGeo:getLocationGeo"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string"
                    },
                    "selfLink": {
                        "type": "string"
                    },
                    "tags": {
                        "type": "object",
                        "additionalProperties": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "cloudProvider",
                    "cplnId",
                    "description",
                    "enabled",
                    "geos",
                    "ipRanges",
                    "name",
                    "region",
                    "selfLink",
                    "tags",
                    "id"
                ]
            }
        },
        "cpln:index/getLocations:getLocations": {
            "description": "Use this data source to access information about all [Locations](https://docs.controlplane.com/reference/location) within Control Plane.\n\n## Outputs\n\nThe following attributes are exported:\n\n- **locations** (Block List) (see below).\n\n\u003ca id=\"nestedblock--locations\"\u003e\u003c/a\u003e\n\n### `locations`\n\n- **cpln_id** (String) The ID, in GUID format, of the location.\n- **name** (String) Name of the location.\n- **description** (String) Description of the location.\n- **tags** (Map of String) Key-value map of resource tags.\n- **cloud_provider** (String) Cloud Provider of the location.\n- **region** (String) Region of the location.\n- **enabled** (Boolean) Indication if location is enabled.\n- **geo** (Block List, Max: 1) (see below)\n- **ip_ranges** (List of String) A list of IP ranges of the location.\n- **self_link** (String) Full link to this resource. Can be referenced by other resources.\n\n\u003ca id=\"nestedblock--geo\"\u003e\u003c/a\u003e\n\n### `geo`\n\nLocation geographical details\n\n- **lat** (Number) Latitude.\n- **lon** (Number) Longitude.\n- **country** (String) Country.\n- **state** (String) State.\n- **city** (String) City.\n- **continent** (String) Continent.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst locationsLocations = cpln.getLocations({});\nexport const locations = locationsLocations.then(locationsLocations =\u003e locationsLocations.locations);\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\nlocations_locations = cpln.get_locations()\npulumi.export(\"locations\", locations_locations.locations)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var locationsLocations = Cpln.GetLocations.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"locations\"] = locationsLocations.Apply(getLocationsResult =\u003e getLocationsResult.Locations),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tlocationsLocations, err := cpln.GetLocations(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"locations\", locationsLocations.Locations)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var locationsLocations = CplnFunctions.getLocations();\n\n        ctx.export(\"locations\", locationsLocations.applyValue(getLocationsResult -\u003e getLocationsResult.locations()));\n    }\n}\n```\n```yaml\nvariables:\n  locationsLocations:\n    fn::invoke:\n      Function: cpln:getLocations\n      Arguments: {}\noutputs:\n  locations: ${locationsLocations.locations}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getLocations.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/cpln:index/getLocationsLocation:getLocationsLocation"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "locations",
                    "id"
                ]
            }
        },
        "cpln:index/getOrg:getOrg": {
            "description": "Output the ID and name of the current [org](https://docs.controlplane.com/reference/org). \n\n## Outputs\n\nThe following attributes are exported:\n\n- **cpln_id** (String) The ID, in GUID format, of the org.\n- **name** (String) The name of org.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as cpln from \"@pulumi/cpln\";\n\nconst org = cpln.getOrg({});\nexport const orgId = org.then(org =\u003e org.id);\nexport const orgName = org.then(org =\u003e org.name);\n```\n```python\nimport pulumi\nimport pulumi_cpln as cpln\n\norg = cpln.get_org()\npulumi.export(\"orgId\", org.id)\npulumi.export(\"orgName\", org.name)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Cpln = Pulumi.Cpln;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var org = Cpln.GetOrg.Invoke();\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"orgId\"] = org.Apply(getOrgResult =\u003e getOrgResult.Id),\n        [\"orgName\"] = org.Apply(getOrgResult =\u003e getOrgResult.Name),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\torg, err := cpln.LookupOrg(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"orgId\", org.Id)\n\t\tctx.Export(\"orgName\", org.Name)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.cpln.CplnFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var org = CplnFunctions.getOrg();\n\n        ctx.export(\"orgId\", org.applyValue(getOrgResult -\u003e getOrgResult.id()));\n        ctx.export(\"orgName\", org.applyValue(getOrgResult -\u003e getOrgResult.name()));\n    }\n}\n```\n```yaml\nvariables:\n  org:\n    fn::invoke:\n      Function: cpln:getOrg\n      Arguments: {}\noutputs:\n  orgId: ${org.id}\n  orgName: ${org.name}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getOrg.\n",
                "properties": {
                    "cplnId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "cplnId",
                    "name",
                    "id"
                ]
            }
        }
    }
}