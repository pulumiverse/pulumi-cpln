// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln
{
    public static class GetOrg
    {
        /// <summary>
        /// Output the ID and name of the current [org](https://docs.controlplane.com/reference/org). 
        /// 
        /// ## Outputs
        /// 
        /// The following attributes are exported:
        /// 
        /// - **cpln_id** (String) The ID, in GUID format, of the org.
        /// - **name** (String) The name of org.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cpln = Pulumi.Cpln;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var org = Cpln.GetOrg.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["orgId"] = org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         ["orgName"] = org.Apply(getOrgResult =&gt; getOrgResult.Name),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetOrgResult> InvokeAsync(GetOrgArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetOrgResult>("cpln:index/getOrg:getOrg", args ?? new GetOrgArgs(), options.WithDefaults());

        /// <summary>
        /// Output the ID and name of the current [org](https://docs.controlplane.com/reference/org). 
        /// 
        /// ## Outputs
        /// 
        /// The following attributes are exported:
        /// 
        /// - **cpln_id** (String) The ID, in GUID format, of the org.
        /// - **name** (String) The name of org.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cpln = Pulumi.Cpln;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var org = Cpln.GetOrg.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["orgId"] = org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         ["orgName"] = org.Apply(getOrgResult =&gt; getOrgResult.Name),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrgResult> Invoke(GetOrgInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrgResult>("cpln:index/getOrg:getOrg", args ?? new GetOrgInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// Output the ID and name of the current [org](https://docs.controlplane.com/reference/org). 
        /// 
        /// ## Outputs
        /// 
        /// The following attributes are exported:
        /// 
        /// - **cpln_id** (String) The ID, in GUID format, of the org.
        /// - **name** (String) The name of org.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Cpln = Pulumi.Cpln;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var org = Cpln.GetOrg.Invoke();
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["orgId"] = org.Apply(getOrgResult =&gt; getOrgResult.Id),
        ///         ["orgName"] = org.Apply(getOrgResult =&gt; getOrgResult.Name),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetOrgResult> Invoke(GetOrgInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetOrgResult>("cpln:index/getOrg:getOrg", args ?? new GetOrgInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetOrgArgs : global::Pulumi.InvokeArgs
    {
        [Input("authConfig")]
        public Inputs.GetOrgAuthConfigArgs? AuthConfig { get; set; }

        [Input("observability")]
        public Inputs.GetOrgObservabilityArgs? Observability { get; set; }

        [Input("security")]
        public Inputs.GetOrgSecurityArgs? Security { get; set; }

        public GetOrgArgs()
        {
        }
        public static new GetOrgArgs Empty => new GetOrgArgs();
    }

    public sealed class GetOrgInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("authConfig")]
        public Input<Inputs.GetOrgAuthConfigInputArgs>? AuthConfig { get; set; }

        [Input("observability")]
        public Input<Inputs.GetOrgObservabilityInputArgs>? Observability { get; set; }

        [Input("security")]
        public Input<Inputs.GetOrgSecurityInputArgs>? Security { get; set; }

        public GetOrgInvokeArgs()
        {
        }
        public static new GetOrgInvokeArgs Empty => new GetOrgInvokeArgs();
    }


    [OutputType]
    public sealed class GetOrgResult
    {
        public readonly string AccountId;
        public readonly Outputs.GetOrgAuthConfigResult? AuthConfig;
        public readonly string CplnId;
        public readonly string Description;
        public readonly string Id;
        public readonly ImmutableArray<string> Invitees;
        public readonly string Name;
        public readonly Outputs.GetOrgObservabilityResult? Observability;
        public readonly Outputs.GetOrgSecurityResult? Security;
        public readonly string SelfLink;
        public readonly int SessionTimeoutSeconds;
        public readonly ImmutableArray<Outputs.GetOrgStatusResult> Statuses;
        public readonly ImmutableDictionary<string, string> Tags;

        [OutputConstructor]
        private GetOrgResult(
            string accountId,

            Outputs.GetOrgAuthConfigResult? authConfig,

            string cplnId,

            string description,

            string id,

            ImmutableArray<string> invitees,

            string name,

            Outputs.GetOrgObservabilityResult? observability,

            Outputs.GetOrgSecurityResult? security,

            string selfLink,

            int sessionTimeoutSeconds,

            ImmutableArray<Outputs.GetOrgStatusResult> statuses,

            ImmutableDictionary<string, string> tags)
        {
            AccountId = accountId;
            AuthConfig = authConfig;
            CplnId = cplnId;
            Description = description;
            Id = id;
            Invitees = invitees;
            Name = name;
            Observability = observability;
            Security = security;
            SelfLink = selfLink;
            SessionTimeoutSeconds = sessionTimeoutSeconds;
            Statuses = statuses;
            Tags = tags;
        }
    }
}
