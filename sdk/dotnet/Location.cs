// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln
{
    /// <summary>
    /// Manages an org's [Location](https://docs.controlplane.com/reference/location).
    /// 
    /// ## Declaration
    /// 
    /// ### Required
    /// 
    /// - **name** (String) Name of the Location.
    /// - **tags** (Map of String) Key-value map of resource tags.
    /// - **enabled** (Boolean) Indication if location is enabled.
    /// 
    /// &gt; **Note** You need to associate the same tags that are defined in a location; otherwise, the pulumi preview will not be empty. It is common practice to reference the tags from a location data source.
    /// 
    /// ## Outputs
    /// 
    /// - **cpln_id** (String) The ID, in GUID format, of the location.
    /// - **description** (String) Description of the location.
    /// - **cloud_provider** (String) Cloud Provider of the location.
    /// - **region** (String) Region of the location.
    /// - **geo** (Block List, Max: 1) (see below)
    /// - **ip_ranges** (List of String) A list of IP ranges of the location.
    /// - **self_link** (String) Full link to this resource. Can be referenced by other resources.
    /// 
    /// &lt;a id="nestedblock--geo"&gt;&lt;/a&gt;
    /// 
    /// ### `geo`
    /// 
    /// Location geographical details
    /// 
    /// - **lat** (Number) Latitude.
    /// - **lon** (Number) Longitude.
    /// - **country** (String) Country.
    /// - **state** (String) State.
    /// - **city** (String) City.
    /// - **continent** (String) Continent.
    /// 
    /// ## Example Usage
    /// ### Reference Tags from Data Source
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cpln = Pulumi.Cpln;
    /// using Cpln = Pulumiverse.Cpln;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var main_location = Cpln.GetLocation.Invoke(new()
    ///     {
    ///         Name = "aws-eu-central-1",
    ///     });
    /// 
    ///     var reference_tags_example = new Cpln.Location("reference-tags-example", new()
    ///     {
    ///         Enabled = true,
    ///         Tags = main_location.Apply(main_location =&gt; main_location.Apply(getLocationResult =&gt; getLocationResult.Tags)),
    ///     });
    /// 
    /// });
    /// ```
    /// ### Hard Code Location Tags
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Cpln = Pulumiverse.Cpln;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Cpln.Location("example", new()
    ///     {
    ///         Enabled = true,
    ///         Tags = 
    ///         {
    ///             { "cpln/city", "Frankfurt" },
    ///             { "cpln/continent", "Europe" },
    ///             { "cpln/country", "Germany" },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [CplnResourceType("cpln:index/location:Location")]
    public partial class Location : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Cloud Provider of the location.
        /// </summary>
        [Output("cloudProvider")]
        public Output<string> CloudProvider { get; private set; } = null!;

        /// <summary>
        /// The ID, in GUID format, of the location.
        /// </summary>
        [Output("cplnId")]
        public Output<string> CplnId { get; private set; } = null!;

        /// <summary>
        /// Description of the location.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Indication if location is enabled.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        [Output("geos")]
        public Output<ImmutableArray<Outputs.LocationGeo>> Geos { get; private set; } = null!;

        /// <summary>
        /// A list of IP ranges of the location.
        /// </summary>
        [Output("ipRanges")]
        public Output<ImmutableArray<string>> IpRanges { get; private set; } = null!;

        /// <summary>
        /// Name of the Location.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Region of the location.
        /// </summary>
        [Output("region")]
        public Output<string> Region { get; private set; } = null!;

        /// <summary>
        /// Full link to this resource. Can be referenced by other resources.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Location resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Location(string name, LocationArgs args, CustomResourceOptions? options = null)
            : base("cpln:index/location:Location", name, args ?? new LocationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Location(string name, Input<string> id, LocationState? state = null, CustomResourceOptions? options = null)
            : base("cpln:index/location:Location", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Location resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Location Get(string name, Input<string> id, LocationState? state = null, CustomResourceOptions? options = null)
        {
            return new Location(name, id, state, options);
        }
    }

    public sealed class LocationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indication if location is enabled.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// Name of the Location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags", required: true)]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LocationArgs()
        {
        }
        public static new LocationArgs Empty => new LocationArgs();
    }

    public sealed class LocationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Cloud Provider of the location.
        /// </summary>
        [Input("cloudProvider")]
        public Input<string>? CloudProvider { get; set; }

        /// <summary>
        /// The ID, in GUID format, of the location.
        /// </summary>
        [Input("cplnId")]
        public Input<string>? CplnId { get; set; }

        /// <summary>
        /// Description of the location.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Indication if location is enabled.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("geos")]
        private InputList<Inputs.LocationGeoGetArgs>? _geos;
        public InputList<Inputs.LocationGeoGetArgs> Geos
        {
            get => _geos ?? (_geos = new InputList<Inputs.LocationGeoGetArgs>());
            set => _geos = value;
        }

        [Input("ipRanges")]
        private InputList<string>? _ipRanges;

        /// <summary>
        /// A list of IP ranges of the location.
        /// </summary>
        public InputList<string> IpRanges
        {
            get => _ipRanges ?? (_ipRanges = new InputList<string>());
            set => _ipRanges = value;
        }

        /// <summary>
        /// Name of the Location.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Region of the location.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Full link to this resource. Can be referenced by other resources.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public LocationState()
        {
        }
        public static new LocationState Empty => new LocationState();
    }
}
