// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln
{
    [CplnResourceType("cpln:index/mk8s:Mk8s")]
    public partial class Mk8s : global::Pulumi.CustomResource
    {
        [Output("addOns")]
        public Output<Outputs.Mk8sAddOns?> AddOns { get; private set; } = null!;

        /// <summary>
        /// The alias name of the Mk8s.
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        [Output("awsProvider")]
        public Output<Outputs.Mk8sAwsProvider?> AwsProvider { get; private set; } = null!;

        /// <summary>
        /// The ID, in GUID format, of the Mk8s.
        /// </summary>
        [Output("cplnId")]
        public Output<string> CplnId { get; private set; } = null!;

        /// <summary>
        /// Description of the Mk8s.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        [Output("ephemeralProvider")]
        public Output<Outputs.Mk8sEphemeralProvider?> EphemeralProvider { get; private set; } = null!;

        /// <summary>
        /// Allow-list.
        /// </summary>
        [Output("firewalls")]
        public Output<ImmutableArray<Outputs.Mk8sFirewall>> Firewalls { get; private set; } = null!;

        [Output("genericProvider")]
        public Output<Outputs.Mk8sGenericProvider?> GenericProvider { get; private set; } = null!;

        [Output("hetznerProvider")]
        public Output<Outputs.Mk8sHetznerProvider?> HetznerProvider { get; private set; } = null!;

        /// <summary>
        /// Name of the Mk8s.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Full link to this resource. Can be referenced by other resources.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Status of the mk8s.
        /// </summary>
        [Output("statuses")]
        public Output<ImmutableArray<Outputs.Mk8sStatus>> Statuses { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        [Output("version")]
        public Output<string> Version { get; private set; } = null!;


        /// <summary>
        /// Create a Mk8s resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Mk8s(string name, Mk8sArgs args, CustomResourceOptions? options = null)
            : base("cpln:index/mk8s:Mk8s", name, args ?? new Mk8sArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Mk8s(string name, Input<string> id, Mk8sState? state = null, CustomResourceOptions? options = null)
            : base("cpln:index/mk8s:Mk8s", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Mk8s resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Mk8s Get(string name, Input<string> id, Mk8sState? state = null, CustomResourceOptions? options = null)
        {
            return new Mk8s(name, id, state, options);
        }
    }

    public sealed class Mk8sArgs : global::Pulumi.ResourceArgs
    {
        [Input("addOns")]
        public Input<Inputs.Mk8sAddOnsArgs>? AddOns { get; set; }

        [Input("awsProvider")]
        public Input<Inputs.Mk8sAwsProviderArgs>? AwsProvider { get; set; }

        /// <summary>
        /// Description of the Mk8s.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ephemeralProvider")]
        public Input<Inputs.Mk8sEphemeralProviderArgs>? EphemeralProvider { get; set; }

        [Input("firewalls")]
        private InputList<Inputs.Mk8sFirewallArgs>? _firewalls;

        /// <summary>
        /// Allow-list.
        /// </summary>
        public InputList<Inputs.Mk8sFirewallArgs> Firewalls
        {
            get => _firewalls ?? (_firewalls = new InputList<Inputs.Mk8sFirewallArgs>());
            set => _firewalls = value;
        }

        [Input("genericProvider")]
        public Input<Inputs.Mk8sGenericProviderArgs>? GenericProvider { get; set; }

        [Input("hetznerProvider")]
        public Input<Inputs.Mk8sHetznerProviderArgs>? HetznerProvider { get; set; }

        /// <summary>
        /// Name of the Mk8s.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("version", required: true)]
        public Input<string> Version { get; set; } = null!;

        public Mk8sArgs()
        {
        }
        public static new Mk8sArgs Empty => new Mk8sArgs();
    }

    public sealed class Mk8sState : global::Pulumi.ResourceArgs
    {
        [Input("addOns")]
        public Input<Inputs.Mk8sAddOnsGetArgs>? AddOns { get; set; }

        /// <summary>
        /// The alias name of the Mk8s.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("awsProvider")]
        public Input<Inputs.Mk8sAwsProviderGetArgs>? AwsProvider { get; set; }

        /// <summary>
        /// The ID, in GUID format, of the Mk8s.
        /// </summary>
        [Input("cplnId")]
        public Input<string>? CplnId { get; set; }

        /// <summary>
        /// Description of the Mk8s.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("ephemeralProvider")]
        public Input<Inputs.Mk8sEphemeralProviderGetArgs>? EphemeralProvider { get; set; }

        [Input("firewalls")]
        private InputList<Inputs.Mk8sFirewallGetArgs>? _firewalls;

        /// <summary>
        /// Allow-list.
        /// </summary>
        public InputList<Inputs.Mk8sFirewallGetArgs> Firewalls
        {
            get => _firewalls ?? (_firewalls = new InputList<Inputs.Mk8sFirewallGetArgs>());
            set => _firewalls = value;
        }

        [Input("genericProvider")]
        public Input<Inputs.Mk8sGenericProviderGetArgs>? GenericProvider { get; set; }

        [Input("hetznerProvider")]
        public Input<Inputs.Mk8sHetznerProviderGetArgs>? HetznerProvider { get; set; }

        /// <summary>
        /// Name of the Mk8s.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Full link to this resource. Can be referenced by other resources.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("statuses")]
        private InputList<Inputs.Mk8sStatusGetArgs>? _statuses;

        /// <summary>
        /// Status of the mk8s.
        /// </summary>
        public InputList<Inputs.Mk8sStatusGetArgs> Statuses
        {
            get => _statuses ?? (_statuses = new InputList<Inputs.Mk8sStatusGetArgs>());
            set => _statuses = value;
        }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        [Input("version")]
        public Input<string>? Version { get; set; }

        public Mk8sState()
        {
        }
        public static new Mk8sState Empty => new Mk8sState();
    }
}
