// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Outputs
{

    [OutputType]
    public sealed class Mk8sAddOnsByokConfig
    {
        /// <summary>
        /// Resource tuning for the actuator component.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigActuator? Actuator;
        /// <summary>
        /// Shared rollout settings for BYOK workloads.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigCommon? Common;
        /// <summary>
        /// Ingress controller resource configuration.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigIngress? Ingress;
        /// <summary>
        /// Internal DNS deployment settings.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigInternalDns? InternalDns;
        /// <summary>
        /// Istio service mesh configuration.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigIstio? Istio;
        /// <summary>
        /// Log splitter deployment configuration.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigLogSplitter? LogSplitter;
        /// <summary>
        /// Longhorn persistent volume settings.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigLonghorn? Longhorn;
        /// <summary>
        /// Configuration for the optional middlebox traffic shaper.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigMiddlebox? Middlebox;
        /// <summary>
        /// Monitoring stack configuration.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigMonitoring? Monitoring;
        /// <summary>
        /// Redis cache configuration.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigRedis? Redis;
        /// <summary>
        /// High-availability Redis configuration.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigRedisHa? RedisHa;
        /// <summary>
        /// Redis Sentinel configuration.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigRedisSentinel? RedisSentinel;
        /// <summary>
        /// Tempo agent resource configuration.
        /// </summary>
        public readonly Outputs.Mk8sAddOnsByokConfigTempoAgent? TempoAgent;

        [OutputConstructor]
        private Mk8sAddOnsByokConfig(
            Outputs.Mk8sAddOnsByokConfigActuator? actuator,

            Outputs.Mk8sAddOnsByokConfigCommon? common,

            Outputs.Mk8sAddOnsByokConfigIngress? ingress,

            Outputs.Mk8sAddOnsByokConfigInternalDns? internalDns,

            Outputs.Mk8sAddOnsByokConfigIstio? istio,

            Outputs.Mk8sAddOnsByokConfigLogSplitter? logSplitter,

            Outputs.Mk8sAddOnsByokConfigLonghorn? longhorn,

            Outputs.Mk8sAddOnsByokConfigMiddlebox? middlebox,

            Outputs.Mk8sAddOnsByokConfigMonitoring? monitoring,

            Outputs.Mk8sAddOnsByokConfigRedis? redis,

            Outputs.Mk8sAddOnsByokConfigRedisHa? redisHa,

            Outputs.Mk8sAddOnsByokConfigRedisSentinel? redisSentinel,

            Outputs.Mk8sAddOnsByokConfigTempoAgent? tempoAgent)
        {
            Actuator = actuator;
            Common = common;
            Ingress = ingress;
            InternalDns = internalDns;
            Istio = istio;
            LogSplitter = logSplitter;
            Longhorn = longhorn;
            Middlebox = middlebox;
            Monitoring = monitoring;
            Redis = redis;
            RedisHa = redisHa;
            RedisSentinel = redisSentinel;
            TempoAgent = tempoAgent;
        }
    }
}
