// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Outputs
{

    [OutputType]
    public sealed class WorkloadContainer
    {
        /// <summary>
        /// Command line arguments passed to the container at runtime. Replaces the CMD arguments of the running container. It is an ordered list.
        /// </summary>
        public readonly ImmutableArray<string> Args;
        /// <summary>
        /// Override the entry point.
        /// </summary>
        public readonly string? Command;
        /// <summary>
        /// Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: "50m".
        /// </summary>
        public readonly string? Cpu;
        /// <summary>
        /// Name-Value list of environment variables.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Env;
        public readonly Outputs.WorkloadContainerGpuCustom? GpuCustom;
        /// <summary>
        /// GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.
        /// </summary>
        public readonly Outputs.WorkloadContainerGpuNvidia? GpuNvidia;
        /// <summary>
        /// The full image and tag path.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.
        /// </summary>
        public readonly bool? InheritEnv;
        /// <summary>
        /// Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).
        /// </summary>
        public readonly Outputs.WorkloadContainerLifecycle? Lifecycle;
        /// <summary>
        /// Liveness Probe
        /// </summary>
        public readonly Outputs.WorkloadContainerLivenessProbe? LivenessProbe;
        /// <summary>
        /// Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: "128Mi".
        /// </summary>
        public readonly string? Memory;
        /// <summary>
        /// [Reference Page](https://docs.controlplane.com/reference/workload#metrics).
        /// </summary>
        public readonly Outputs.WorkloadContainerMetrics? Metrics;
        /// <summary>
        /// Minimum CPU when capacity AI is enabled.
        /// </summary>
        public readonly string? MinCpu;
        /// <summary>
        /// Minimum memory when capacity AI is enabled.
        /// </summary>
        public readonly string? MinMemory;
        /// <summary>
        /// Name of the container.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `serverless` Workload type. **DEPRECATED - Use `ports`.**
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Communication endpoints used by the workload to send and receive network traffic.
        /// </summary>
        public readonly ImmutableArray<Outputs.WorkloadContainerPort> Ports;
        /// <summary>
        /// Readiness Probe
        /// </summary>
        public readonly Outputs.WorkloadContainerReadinessProbe? ReadinessProbe;
        /// <summary>
        /// Mount Object Store (S3, GCS, AzureBlob) buckets as file system.
        /// </summary>
        public readonly ImmutableArray<Outputs.WorkloadContainerVolume> Volumes;
        /// <summary>
        /// Override the working directory. Must be an absolute path.
        /// </summary>
        public readonly string? WorkingDirectory;

        [OutputConstructor]
        private WorkloadContainer(
            ImmutableArray<string> args,

            string? command,

            string? cpu,

            ImmutableDictionary<string, string>? env,

            Outputs.WorkloadContainerGpuCustom? gpuCustom,

            Outputs.WorkloadContainerGpuNvidia? gpuNvidia,

            string image,

            bool? inheritEnv,

            Outputs.WorkloadContainerLifecycle? lifecycle,

            Outputs.WorkloadContainerLivenessProbe? livenessProbe,

            string? memory,

            Outputs.WorkloadContainerMetrics? metrics,

            string? minCpu,

            string? minMemory,

            string name,

            int? port,

            ImmutableArray<Outputs.WorkloadContainerPort> ports,

            Outputs.WorkloadContainerReadinessProbe? readinessProbe,

            ImmutableArray<Outputs.WorkloadContainerVolume> volumes,

            string? workingDirectory)
        {
            Args = args;
            Command = command;
            Cpu = cpu;
            Env = env;
            GpuCustom = gpuCustom;
            GpuNvidia = gpuNvidia;
            Image = image;
            InheritEnv = inheritEnv;
            Lifecycle = lifecycle;
            LivenessProbe = livenessProbe;
            Memory = memory;
            Metrics = metrics;
            MinCpu = minCpu;
            MinMemory = minMemory;
            Name = name;
            Port = port;
            Ports = ports;
            ReadinessProbe = readinessProbe;
            Volumes = volumes;
            WorkingDirectory = workingDirectory;
        }
    }
}
