// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Outputs
{

    [OutputType]
    public sealed class GetWorkloadLocalOptionResult
    {
        /// <summary>
        /// Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetWorkloadLocalOptionAutoscalingResult> Autoscalings;
        /// <summary>
        /// Capacity AI. Default: `True`.
        /// </summary>
        public readonly bool CapacityAi;
        /// <summary>
        /// The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        /// </summary>
        public readonly int CapacityAiUpdateMinutes;
        /// <summary>
        /// Debug mode. Default: `False`.
        /// </summary>
        public readonly bool Debug;
        /// <summary>
        /// Valid only for `LocalOptions`. Override options for a specific location.
        /// </summary>
        public readonly string Location;
        public readonly ImmutableArray<Outputs.GetWorkloadLocalOptionMultiZoneResult> MultiZones;
        /// <summary>
        /// Workload suspend. Default: `False`.
        /// </summary>
        public readonly bool Suspend;
        /// <summary>
        /// Timeout in seconds. Default: `5`.
        /// </summary>
        public readonly int TimeoutSeconds;

        [OutputConstructor]
        private GetWorkloadLocalOptionResult(
            ImmutableArray<Outputs.GetWorkloadLocalOptionAutoscalingResult> autoscalings,

            bool capacityAi,

            int capacityAiUpdateMinutes,

            bool debug,

            string location,

            ImmutableArray<Outputs.GetWorkloadLocalOptionMultiZoneResult> multiZones,

            bool suspend,

            int timeoutSeconds)
        {
            Autoscalings = autoscalings;
            CapacityAi = capacityAi;
            CapacityAiUpdateMinutes = capacityAiUpdateMinutes;
            Debug = debug;
            Location = location;
            MultiZones = multiZones;
            Suspend = suspend;
            TimeoutSeconds = timeoutSeconds;
        }
    }
}
