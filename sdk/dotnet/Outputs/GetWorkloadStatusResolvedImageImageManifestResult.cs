// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Outputs
{

    [OutputType]
    public sealed class GetWorkloadStatusResolvedImageImageManifestResult
    {
        /// <summary>
        /// A SHA256 hash that uniquely identifies the specific image manifest.
        /// </summary>
        public readonly string Digest;
        /// <summary>
        /// The name and tag of the resolved image.
        /// </summary>
        public readonly string Image;
        /// <summary>
        /// The MIME type used in the Docker Registry HTTP API to specify the format of the data being sent or received. Docker uses media types to distinguish between different kinds of JSON objects and binary data formats within the registry protocol, enabling the Docker client and registry to understand and process different components of Docker images correctly.
        /// </summary>
        public readonly string MediaType;
        /// <summary>
        /// Key-value map of strings. The combination of the operating system and architecture for which the image is built.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Platform;

        [OutputConstructor]
        private GetWorkloadStatusResolvedImageImageManifestResult(
            string digest,

            string image,

            string mediaType,

            ImmutableDictionary<string, string> platform)
        {
            Digest = digest;
            Image = image;
            MediaType = mediaType;
            Platform = platform;
        }
    }
}
