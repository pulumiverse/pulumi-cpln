// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Outputs
{

    [OutputType]
    public sealed class GetWorkloadRolloutOptionResult
    {
        /// <summary>
        /// The number of replicas that can be created above the desired amount of replicas during an update.
        /// </summary>
        public readonly string MaxSurgeReplicas;
        /// <summary>
        /// The number of replicas that can be unavailable during the update process.
        /// </summary>
        public readonly string MaxUnavailableReplicas;
        /// <summary>
        /// The minimum number of seconds a container must run without crashing to be considered available.
        /// </summary>
        public readonly int MinReadySeconds;
        /// <summary>
        /// The strategies used to update applications and services deployed. Valid values: `OrderedReady` (Updates workloads in a rolling fashion, taking down old ones and bringing up new ones incrementally, ensuring that the service remains available during the update.), `Parallel` (Causes all pods affected by a scaling operation to be created or destroyed simultaneously. This does not affect update operations.). Default: `OrderedReady`.
        /// </summary>
        public readonly string ScalingPolicy;
        /// <summary>
        /// The amount of time in seconds a workload has to gracefully terminate before forcefully terminating it. This includes the time it takes for the preStop hook to run.
        /// </summary>
        public readonly int TerminationGracePeriodSeconds;

        [OutputConstructor]
        private GetWorkloadRolloutOptionResult(
            string maxSurgeReplicas,

            string maxUnavailableReplicas,

            int minReadySeconds,

            string scalingPolicy,

            int terminationGracePeriodSeconds)
        {
            MaxSurgeReplicas = maxSurgeReplicas;
            MaxUnavailableReplicas = maxUnavailableReplicas;
            MinReadySeconds = minReadySeconds;
            ScalingPolicy = scalingPolicy;
            TerminationGracePeriodSeconds = terminationGracePeriodSeconds;
        }
    }
}
