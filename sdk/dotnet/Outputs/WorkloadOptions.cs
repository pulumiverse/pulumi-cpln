// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Outputs
{

    [OutputType]
    public sealed class WorkloadOptions
    {
        /// <summary>
        /// Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        /// </summary>
        public readonly Outputs.WorkloadOptionsAutoscaling? Autoscaling;
        /// <summary>
        /// Capacity AI. Default: `True`.
        /// </summary>
        public readonly bool? CapacityAi;
        /// <summary>
        /// The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        /// </summary>
        public readonly int? CapacityAiUpdateMinutes;
        /// <summary>
        /// Debug mode. Default: `False`.
        /// </summary>
        public readonly bool? Debug;
        public readonly Outputs.WorkloadOptionsMultiZone? MultiZone;
        /// <summary>
        /// Workload suspend. Default: `False`.
        /// </summary>
        public readonly bool? Suspend;
        /// <summary>
        /// Timeout in seconds. Default: `5`.
        /// </summary>
        public readonly int? TimeoutSeconds;

        [OutputConstructor]
        private WorkloadOptions(
            Outputs.WorkloadOptionsAutoscaling? autoscaling,

            bool? capacityAi,

            int? capacityAiUpdateMinutes,

            bool? debug,

            Outputs.WorkloadOptionsMultiZone? multiZone,

            bool? suspend,

            int? timeoutSeconds)
        {
            Autoscaling = autoscaling;
            CapacityAi = capacityAi;
            CapacityAiUpdateMinutes = capacityAiUpdateMinutes;
            Debug = debug;
            MultiZone = multiZone;
            Suspend = suspend;
            TimeoutSeconds = timeoutSeconds;
        }
    }
}
