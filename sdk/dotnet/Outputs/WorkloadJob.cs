// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Outputs
{

    [OutputType]
    public sealed class WorkloadJob
    {
        /// <summary>
        /// The maximum number of seconds Control Plane will wait for the job to complete. If a job does not succeed or fail in the allotted time, Control Plane will stop the job, moving it into the Removed status.
        /// </summary>
        public readonly int? ActiveDeadlineSeconds;
        /// <summary>
        /// Either 'Forbid' or 'Replace'. This determines what Control Plane will do when the schedule requires a job to start, while a prior instance of the job is still running. Enum: [ Forbid, Replace ] Default: `Forbid`.
        /// </summary>
        public readonly string? ConcurrencyPolicy;
        /// <summary>
        /// The maximum number of completed job instances to display. This should be an integer between 1 and 10. Default: `5`.
        /// </summary>
        public readonly int? HistoryLimit;
        /// <summary>
        /// Either 'OnFailure' or 'Never'. This determines what Control Plane will do when a job instance fails. Enum: [ OnFailure, Never ] Default: `Never`.
        /// </summary>
        public readonly string? RestartPolicy;
        /// <summary>
        /// A standard cron [schedule expression](https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#schedule-syntax) used to determine when your job should execute.
        /// </summary>
        public readonly string Schedule;

        [OutputConstructor]
        private WorkloadJob(
            int? activeDeadlineSeconds,

            string? concurrencyPolicy,

            int? historyLimit,

            string? restartPolicy,

            string schedule)
        {
            ActiveDeadlineSeconds = activeDeadlineSeconds;
            ConcurrencyPolicy = concurrencyPolicy;
            HistoryLimit = historyLimit;
            RestartPolicy = restartPolicy;
            Schedule = schedule;
        }
    }
}
