// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Inputs
{

    public sealed class WorkloadContainerArgs : global::Pulumi.ResourceArgs
    {
        [Input("args")]
        private InputList<string>? _args;

        /// <summary>
        /// Command line arguments passed to the container at runtime. Replaces the CMD arguments of the running container. It is an ordered list.
        /// </summary>
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        /// <summary>
        /// Override the entry point.
        /// </summary>
        [Input("command")]
        public Input<string>? Command { get; set; }

        /// <summary>
        /// Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: "50m".
        /// </summary>
        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        [Input("env")]
        private InputMap<string>? _env;

        /// <summary>
        /// Name-Value list of environment variables.
        /// </summary>
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        [Input("gpuCustom")]
        public Input<Inputs.WorkloadContainerGpuCustomArgs>? GpuCustom { get; set; }

        /// <summary>
        /// GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.
        /// </summary>
        [Input("gpuNvidia")]
        public Input<Inputs.WorkloadContainerGpuNvidiaArgs>? GpuNvidia { get; set; }

        /// <summary>
        /// The full image and tag path.
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.
        /// </summary>
        [Input("inheritEnv")]
        public Input<bool>? InheritEnv { get; set; }

        /// <summary>
        /// Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).
        /// </summary>
        [Input("lifecycle")]
        public Input<Inputs.WorkloadContainerLifecycleArgs>? Lifecycle { get; set; }

        /// <summary>
        /// Liveness Probe
        /// </summary>
        [Input("livenessProbe")]
        public Input<Inputs.WorkloadContainerLivenessProbeArgs>? LivenessProbe { get; set; }

        /// <summary>
        /// Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: "128Mi".
        /// </summary>
        [Input("memory")]
        public Input<string>? Memory { get; set; }

        /// <summary>
        /// [Reference Page](https://docs.controlplane.com/reference/workload#metrics).
        /// </summary>
        [Input("metrics")]
        public Input<Inputs.WorkloadContainerMetricsArgs>? Metrics { get; set; }

        /// <summary>
        /// Minimum CPU when capacity AI is enabled.
        /// </summary>
        [Input("minCpu")]
        public Input<string>? MinCpu { get; set; }

        /// <summary>
        /// Minimum memory when capacity AI is enabled.
        /// </summary>
        [Input("minMemory")]
        public Input<string>? MinMemory { get; set; }

        /// <summary>
        /// Name of the container.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `Serverless` Workload type. **DEPRECATED - Use `Ports`.**
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("ports")]
        private InputList<Inputs.WorkloadContainerPortArgs>? _ports;

        /// <summary>
        /// Communication endpoints used by the workload to send and receive network traffic.
        /// </summary>
        public InputList<Inputs.WorkloadContainerPortArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<Inputs.WorkloadContainerPortArgs>());
            set => _ports = value;
        }

        /// <summary>
        /// Readiness Probe
        /// </summary>
        [Input("readinessProbe")]
        public Input<Inputs.WorkloadContainerReadinessProbeArgs>? ReadinessProbe { get; set; }

        [Input("volumes")]
        private InputList<Inputs.WorkloadContainerVolumeArgs>? _volumes;

        /// <summary>
        /// Mount Object Store (S3, GCS, AzureBlob) buckets as file system.
        /// </summary>
        public InputList<Inputs.WorkloadContainerVolumeArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.WorkloadContainerVolumeArgs>());
            set => _volumes = value;
        }

        /// <summary>
        /// Override the working directory. Must be an absolute path.
        /// </summary>
        [Input("workingDirectory")]
        public Input<string>? WorkingDirectory { get; set; }

        public WorkloadContainerArgs()
        {
        }
        public static new WorkloadContainerArgs Empty => new WorkloadContainerArgs();
    }
}
