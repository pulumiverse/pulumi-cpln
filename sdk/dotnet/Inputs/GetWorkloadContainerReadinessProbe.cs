// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Inputs
{

    public sealed class GetWorkloadContainerReadinessProbeArgs : global::Pulumi.InvokeArgs
    {
        [Input("execs")]
        private List<Inputs.GetWorkloadContainerReadinessProbeExecArgs>? _execs;
        public List<Inputs.GetWorkloadContainerReadinessProbeExecArgs> Execs
        {
            get => _execs ?? (_execs = new List<Inputs.GetWorkloadContainerReadinessProbeExecArgs>());
            set => _execs = value;
        }

        [Input("failureThreshold", required: true)]
        public int FailureThreshold { get; set; }

        [Input("grpcs")]
        private List<Inputs.GetWorkloadContainerReadinessProbeGrpcArgs>? _grpcs;
        public List<Inputs.GetWorkloadContainerReadinessProbeGrpcArgs> Grpcs
        {
            get => _grpcs ?? (_grpcs = new List<Inputs.GetWorkloadContainerReadinessProbeGrpcArgs>());
            set => _grpcs = value;
        }

        [Input("httpGets")]
        private List<Inputs.GetWorkloadContainerReadinessProbeHttpGetArgs>? _httpGets;
        public List<Inputs.GetWorkloadContainerReadinessProbeHttpGetArgs> HttpGets
        {
            get => _httpGets ?? (_httpGets = new List<Inputs.GetWorkloadContainerReadinessProbeHttpGetArgs>());
            set => _httpGets = value;
        }

        [Input("initialDelaySeconds", required: true)]
        public int InitialDelaySeconds { get; set; }

        [Input("periodSeconds", required: true)]
        public int PeriodSeconds { get; set; }

        [Input("successThreshold", required: true)]
        public int SuccessThreshold { get; set; }

        [Input("tcpSockets")]
        private List<Inputs.GetWorkloadContainerReadinessProbeTcpSocketArgs>? _tcpSockets;
        public List<Inputs.GetWorkloadContainerReadinessProbeTcpSocketArgs> TcpSockets
        {
            get => _tcpSockets ?? (_tcpSockets = new List<Inputs.GetWorkloadContainerReadinessProbeTcpSocketArgs>());
            set => _tcpSockets = value;
        }

        [Input("timeoutSeconds", required: true)]
        public int TimeoutSeconds { get; set; }

        public GetWorkloadContainerReadinessProbeArgs()
        {
        }
        public static new GetWorkloadContainerReadinessProbeArgs Empty => new GetWorkloadContainerReadinessProbeArgs();
    }
}
