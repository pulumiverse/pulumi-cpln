// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Inputs
{

    public sealed class GetWorkloadOptionArgs : global::Pulumi.InvokeArgs
    {
        [Input("autoscalings")]
        private List<Inputs.GetWorkloadOptionAutoscalingArgs>? _autoscalings;

        /// <summary>
        /// Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        /// </summary>
        public List<Inputs.GetWorkloadOptionAutoscalingArgs> Autoscalings
        {
            get => _autoscalings ?? (_autoscalings = new List<Inputs.GetWorkloadOptionAutoscalingArgs>());
            set => _autoscalings = value;
        }

        /// <summary>
        /// Capacity AI. Default: `True`.
        /// </summary>
        [Input("capacityAi", required: true)]
        public bool CapacityAi { get; set; }

        /// <summary>
        /// The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        /// </summary>
        [Input("capacityAiUpdateMinutes", required: true)]
        public int CapacityAiUpdateMinutes { get; set; }

        /// <summary>
        /// Debug mode. Default: `False`.
        /// </summary>
        [Input("debug", required: true)]
        public bool Debug { get; set; }

        [Input("multiZones")]
        private List<Inputs.GetWorkloadOptionMultiZoneArgs>? _multiZones;
        public List<Inputs.GetWorkloadOptionMultiZoneArgs> MultiZones
        {
            get => _multiZones ?? (_multiZones = new List<Inputs.GetWorkloadOptionMultiZoneArgs>());
            set => _multiZones = value;
        }

        /// <summary>
        /// Workload suspend. Default: `False`.
        /// </summary>
        [Input("suspend", required: true)]
        public bool Suspend { get; set; }

        /// <summary>
        /// Timeout in seconds. Default: `5`.
        /// </summary>
        [Input("timeoutSeconds", required: true)]
        public int TimeoutSeconds { get; set; }

        public GetWorkloadOptionArgs()
        {
        }
        public static new GetWorkloadOptionArgs Empty => new GetWorkloadOptionArgs();
    }
}
