// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Inputs
{

    public sealed class WorkloadLocalOptionGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Auto-scaling adjusts horizontal scaling based on a set strategy, target value, and possibly a metric percentile.
        /// </summary>
        [Input("autoscaling")]
        public Input<Inputs.WorkloadLocalOptionAutoscalingGetArgs>? Autoscaling { get; set; }

        /// <summary>
        /// Capacity AI. Default: `True`.
        /// </summary>
        [Input("capacityAi")]
        public Input<bool>? CapacityAi { get; set; }

        /// <summary>
        /// The highest frequency capacity AI is allowed to update resource reservations when CapacityAI is enabled.
        /// </summary>
        [Input("capacityAiUpdateMinutes")]
        public Input<int>? CapacityAiUpdateMinutes { get; set; }

        /// <summary>
        /// Debug mode. Default: `False`.
        /// </summary>
        [Input("debug")]
        public Input<bool>? Debug { get; set; }

        /// <summary>
        /// Valid only for `LocalOptions`. Override options for a specific location.
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        [Input("multiZone")]
        public Input<Inputs.WorkloadLocalOptionMultiZoneGetArgs>? MultiZone { get; set; }

        /// <summary>
        /// Workload suspend. Default: `False`.
        /// </summary>
        [Input("suspend")]
        public Input<bool>? Suspend { get; set; }

        /// <summary>
        /// Timeout in seconds. Default: `5`.
        /// </summary>
        [Input("timeoutSeconds")]
        public Input<int>? TimeoutSeconds { get; set; }

        public WorkloadLocalOptionGetArgs()
        {
        }
        public static new WorkloadLocalOptionGetArgs Empty => new WorkloadLocalOptionGetArgs();
    }
}
