// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Inputs
{

    public sealed class WorkloadOptionsAutoscalingKedaTriggerArgs : global::Pulumi.ResourceArgs
    {
        [Input("metadata")]
        private InputMap<string>? _metadata;

        /// <summary>
        /// The configuration parameters that the trigger requires.
        /// </summary>
        public InputMap<string> Metadata
        {
            get => _metadata ?? (_metadata = new InputMap<string>());
            set => _metadata = value;
        }

        /// <summary>
        /// The type of metric to be used for scaling.
        /// </summary>
        [Input("metricType")]
        public Input<string>? MetricType { get; set; }

        /// <summary>
        /// An optional name for the trigger. If not provided, a default name will be generated based on the trigger type.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The type of KEDA trigger, e.g "prometheus", "aws-sqs", etc.
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        /// <summary>
        /// Enables caching of metric values during polling interval.
        /// </summary>
        [Input("useCachedMetrics")]
        public Input<bool>? UseCachedMetrics { get; set; }

        public WorkloadOptionsAutoscalingKedaTriggerArgs()
        {
        }
        public static new WorkloadOptionsAutoscalingKedaTriggerArgs Empty => new WorkloadOptionsAutoscalingKedaTriggerArgs();
    }
}
