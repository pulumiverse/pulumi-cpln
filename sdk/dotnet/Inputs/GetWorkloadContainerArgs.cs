// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Inputs
{

    public sealed class GetWorkloadContainerInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("args", required: true)]
        private InputList<string>? _args;

        /// <summary>
        /// Command line arguments passed to the container at runtime. Replaces the CMD arguments of the running container. It is an ordered list.
        /// </summary>
        public InputList<string> Args
        {
            get => _args ?? (_args = new InputList<string>());
            set => _args = value;
        }

        /// <summary>
        /// Override the entry point.
        /// </summary>
        [Input("command", required: true)]
        public Input<string> Command { get; set; } = null!;

        /// <summary>
        /// Reserved CPU of the workload when capacityAI is disabled. Maximum CPU when CapacityAI is enabled. Default: "50m".
        /// </summary>
        [Input("cpu", required: true)]
        public Input<string> Cpu { get; set; } = null!;

        [Input("env", required: true)]
        private InputMap<string>? _env;

        /// <summary>
        /// Name-Value list of environment variables.
        /// </summary>
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        [Input("gpuCustoms")]
        private InputList<Inputs.GetWorkloadContainerGpuCustomInputArgs>? _gpuCustoms;
        public InputList<Inputs.GetWorkloadContainerGpuCustomInputArgs> GpuCustoms
        {
            get => _gpuCustoms ?? (_gpuCustoms = new InputList<Inputs.GetWorkloadContainerGpuCustomInputArgs>());
            set => _gpuCustoms = value;
        }

        [Input("gpuNvidias")]
        private InputList<Inputs.GetWorkloadContainerGpuNvidiaInputArgs>? _gpuNvidias;

        /// <summary>
        /// GPUs manufactured by NVIDIA, which are specialized hardware accelerators used to offload and accelerate computationally intensive tasks within the workload.
        /// </summary>
        public InputList<Inputs.GetWorkloadContainerGpuNvidiaInputArgs> GpuNvidias
        {
            get => _gpuNvidias ?? (_gpuNvidias = new InputList<Inputs.GetWorkloadContainerGpuNvidiaInputArgs>());
            set => _gpuNvidias = value;
        }

        /// <summary>
        /// The full image and tag path.
        /// </summary>
        [Input("image", required: true)]
        public Input<string> Image { get; set; } = null!;

        /// <summary>
        /// Enables inheritance of GVC environment variables. A variable in spec.env will override a GVC variable with the same name.
        /// </summary>
        [Input("inheritEnv", required: true)]
        public Input<bool> InheritEnv { get; set; } = null!;

        [Input("lifecycles")]
        private InputList<Inputs.GetWorkloadContainerLifecycleInputArgs>? _lifecycles;

        /// <summary>
        /// Lifecycle [Reference Page](https://docs.controlplane.com/reference/workload#lifecycle).
        /// </summary>
        public InputList<Inputs.GetWorkloadContainerLifecycleInputArgs> Lifecycles
        {
            get => _lifecycles ?? (_lifecycles = new InputList<Inputs.GetWorkloadContainerLifecycleInputArgs>());
            set => _lifecycles = value;
        }

        [Input("livenessProbes")]
        private InputList<Inputs.GetWorkloadContainerLivenessProbeInputArgs>? _livenessProbes;

        /// <summary>
        /// Liveness Probe
        /// </summary>
        public InputList<Inputs.GetWorkloadContainerLivenessProbeInputArgs> LivenessProbes
        {
            get => _livenessProbes ?? (_livenessProbes = new InputList<Inputs.GetWorkloadContainerLivenessProbeInputArgs>());
            set => _livenessProbes = value;
        }

        /// <summary>
        /// Reserved memory of the workload when capacityAI is disabled. Maximum memory when CapacityAI is enabled. Default: "128Mi".
        /// </summary>
        [Input("memory", required: true)]
        public Input<string> Memory { get; set; } = null!;

        [Input("metrics")]
        private InputList<Inputs.GetWorkloadContainerMetricInputArgs>? _metrics;

        /// <summary>
        /// [Reference Page](https://docs.controlplane.com/reference/workload#metrics).
        /// </summary>
        public InputList<Inputs.GetWorkloadContainerMetricInputArgs> Metrics
        {
            get => _metrics ?? (_metrics = new InputList<Inputs.GetWorkloadContainerMetricInputArgs>());
            set => _metrics = value;
        }

        /// <summary>
        /// Minimum CPU when capacity AI is enabled.
        /// </summary>
        [Input("minCpu", required: true)]
        public Input<string> MinCpu { get; set; } = null!;

        /// <summary>
        /// Minimum memory when capacity AI is enabled.
        /// </summary>
        [Input("minMemory", required: true)]
        public Input<string> MinMemory { get; set; } = null!;

        /// <summary>
        /// Name of the container.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The port the container exposes. Only one container is allowed to specify a port. Min: `80`. Max: `65535`. Used by `Serverless` Workload type. **DEPRECATED - Use `Ports`.**
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        [Input("ports")]
        private InputList<Inputs.GetWorkloadContainerPortInputArgs>? _ports;

        /// <summary>
        /// Communication endpoints used by the workload to send and receive network traffic.
        /// </summary>
        public InputList<Inputs.GetWorkloadContainerPortInputArgs> Ports
        {
            get => _ports ?? (_ports = new InputList<Inputs.GetWorkloadContainerPortInputArgs>());
            set => _ports = value;
        }

        [Input("readinessProbes")]
        private InputList<Inputs.GetWorkloadContainerReadinessProbeInputArgs>? _readinessProbes;

        /// <summary>
        /// Readiness Probe
        /// </summary>
        public InputList<Inputs.GetWorkloadContainerReadinessProbeInputArgs> ReadinessProbes
        {
            get => _readinessProbes ?? (_readinessProbes = new InputList<Inputs.GetWorkloadContainerReadinessProbeInputArgs>());
            set => _readinessProbes = value;
        }

        [Input("volumes")]
        private InputList<Inputs.GetWorkloadContainerVolumeInputArgs>? _volumes;

        /// <summary>
        /// Mount Object Store (S3, GCS, AzureBlob) buckets as file system.
        /// </summary>
        public InputList<Inputs.GetWorkloadContainerVolumeInputArgs> Volumes
        {
            get => _volumes ?? (_volumes = new InputList<Inputs.GetWorkloadContainerVolumeInputArgs>());
            set => _volumes = value;
        }

        /// <summary>
        /// Override the working directory. Must be an absolute path.
        /// </summary>
        [Input("workingDirectory", required: true)]
        public Input<string> WorkingDirectory { get; set; } = null!;

        public GetWorkloadContainerInputArgs()
        {
        }
        public static new GetWorkloadContainerInputArgs Empty => new GetWorkloadContainerInputArgs();
    }
}
