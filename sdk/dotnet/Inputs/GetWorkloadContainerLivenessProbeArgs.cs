// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln.Inputs
{

    public sealed class GetWorkloadContainerLivenessProbeInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("execs")]
        private InputList<Inputs.GetWorkloadContainerLivenessProbeExecInputArgs>? _execs;
        public InputList<Inputs.GetWorkloadContainerLivenessProbeExecInputArgs> Execs
        {
            get => _execs ?? (_execs = new InputList<Inputs.GetWorkloadContainerLivenessProbeExecInputArgs>());
            set => _execs = value;
        }

        [Input("failureThreshold", required: true)]
        public Input<int> FailureThreshold { get; set; } = null!;

        [Input("grpcs")]
        private InputList<Inputs.GetWorkloadContainerLivenessProbeGrpcInputArgs>? _grpcs;
        public InputList<Inputs.GetWorkloadContainerLivenessProbeGrpcInputArgs> Grpcs
        {
            get => _grpcs ?? (_grpcs = new InputList<Inputs.GetWorkloadContainerLivenessProbeGrpcInputArgs>());
            set => _grpcs = value;
        }

        [Input("httpGets")]
        private InputList<Inputs.GetWorkloadContainerLivenessProbeHttpGetInputArgs>? _httpGets;
        public InputList<Inputs.GetWorkloadContainerLivenessProbeHttpGetInputArgs> HttpGets
        {
            get => _httpGets ?? (_httpGets = new InputList<Inputs.GetWorkloadContainerLivenessProbeHttpGetInputArgs>());
            set => _httpGets = value;
        }

        [Input("initialDelaySeconds", required: true)]
        public Input<int> InitialDelaySeconds { get; set; } = null!;

        [Input("periodSeconds", required: true)]
        public Input<int> PeriodSeconds { get; set; } = null!;

        [Input("successThreshold", required: true)]
        public Input<int> SuccessThreshold { get; set; } = null!;

        [Input("tcpSockets")]
        private InputList<Inputs.GetWorkloadContainerLivenessProbeTcpSocketInputArgs>? _tcpSockets;
        public InputList<Inputs.GetWorkloadContainerLivenessProbeTcpSocketInputArgs> TcpSockets
        {
            get => _tcpSockets ?? (_tcpSockets = new InputList<Inputs.GetWorkloadContainerLivenessProbeTcpSocketInputArgs>());
            set => _tcpSockets = value;
        }

        [Input("timeoutSeconds", required: true)]
        public Input<int> TimeoutSeconds { get; set; } = null!;

        public GetWorkloadContainerLivenessProbeInputArgs()
        {
        }
        public static new GetWorkloadContainerLivenessProbeInputArgs Empty => new GetWorkloadContainerLivenessProbeInputArgs();
    }
}
