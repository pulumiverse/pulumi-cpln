// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln
{
    [CplnResourceType("cpln:index/gvc:Gvc")]
    public partial class Gvc : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The alias name of the GVC.
        /// </summary>
        [Output("alias")]
        public Output<string> Alias { get; private set; } = null!;

        [Output("controlplaneTracing")]
        public Output<Outputs.GvcControlplaneTracing?> ControlplaneTracing { get; private set; } = null!;

        /// <summary>
        /// The ID, in GUID format, of the Global Virtual Cloud.
        /// </summary>
        [Output("cplnId")]
        public Output<string> CplnId { get; private set; } = null!;

        /// <summary>
        /// Description of the Global Virtual Cloud.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Custom domain name used by associated workloads.
        /// </summary>
        [Output("domain")]
        public Output<string?> Domain { get; private set; } = null!;

        /// <summary>
        /// Customizes the subdomain format for the canonical workload endpoint. `Legacy` leaves it as '${workloadName}-${gvcName}.cpln.app'. `Org` follows the scheme '${workloadName}-${gvcName}.${orgEndpointPrefix}.cpln.app'.
        /// </summary>
        [Output("endpointNamingFormat")]
        public Output<string> EndpointNamingFormat { get; private set; } = null!;

        /// <summary>
        /// Key-value array of resource environment variables.
        /// </summary>
        [Output("env")]
        public Output<ImmutableDictionary<string, string>?> Env { get; private set; } = null!;

        /// <summary>
        /// KEDA configuration for the GVC.
        /// </summary>
        [Output("keda")]
        public Output<Outputs.GvcKeda?> Keda { get; private set; } = null!;

        [Output("lightstepTracing")]
        public Output<Outputs.GvcLightstepTracing?> LightstepTracing { get; private set; } = null!;

        /// <summary>
        /// Dedicated load balancer configuration.
        /// </summary>
        [Output("loadBalancer")]
        public Output<Outputs.GvcLoadBalancer?> LoadBalancer { get; private set; } = null!;

        /// <summary>
        /// A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<string>> Locations { get; private set; } = null!;

        /// <summary>
        /// Name of the Global Virtual Cloud.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("otelTracing")]
        public Output<Outputs.GvcOtelTracing?> OtelTracing { get; private set; } = null!;

        /// <summary>
        /// A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any private image repository referenced by Workloads within the GVC.
        /// </summary>
        [Output("pullSecrets")]
        public Output<ImmutableArray<string>> PullSecrets { get; private set; } = null!;

        /// <summary>
        /// Full link to this resource. Can be referenced by other resources.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        [Output("sidecar")]
        public Output<Outputs.GvcSidecar?> Sidecar { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>> Tags { get; private set; } = null!;


        /// <summary>
        /// Create a Gvc resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Gvc(string name, GvcArgs? args = null, CustomResourceOptions? options = null)
            : base("cpln:index/gvc:Gvc", name, args ?? new GvcArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Gvc(string name, Input<string> id, GvcState? state = null, CustomResourceOptions? options = null)
            : base("cpln:index/gvc:Gvc", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Gvc resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Gvc Get(string name, Input<string> id, GvcState? state = null, CustomResourceOptions? options = null)
        {
            return new Gvc(name, id, state, options);
        }
    }

    public sealed class GvcArgs : global::Pulumi.ResourceArgs
    {
        [Input("controlplaneTracing")]
        public Input<Inputs.GvcControlplaneTracingArgs>? ControlplaneTracing { get; set; }

        /// <summary>
        /// Description of the Global Virtual Cloud.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Custom domain name used by associated workloads.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Customizes the subdomain format for the canonical workload endpoint. `Legacy` leaves it as '${workloadName}-${gvcName}.cpln.app'. `Org` follows the scheme '${workloadName}-${gvcName}.${orgEndpointPrefix}.cpln.app'.
        /// </summary>
        [Input("endpointNamingFormat")]
        public Input<string>? EndpointNamingFormat { get; set; }

        [Input("env")]
        private InputMap<string>? _env;

        /// <summary>
        /// Key-value array of resource environment variables.
        /// </summary>
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        /// <summary>
        /// KEDA configuration for the GVC.
        /// </summary>
        [Input("keda")]
        public Input<Inputs.GvcKedaArgs>? Keda { get; set; }

        [Input("lightstepTracing")]
        public Input<Inputs.GvcLightstepTracingArgs>? LightstepTracing { get; set; }

        /// <summary>
        /// Dedicated load balancer configuration.
        /// </summary>
        [Input("loadBalancer")]
        public Input<Inputs.GvcLoadBalancerArgs>? LoadBalancer { get; set; }

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// Name of the Global Virtual Cloud.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("otelTracing")]
        public Input<Inputs.GvcOtelTracingArgs>? OtelTracing { get; set; }

        [Input("pullSecrets")]
        private InputList<string>? _pullSecrets;

        /// <summary>
        /// A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any private image repository referenced by Workloads within the GVC.
        /// </summary>
        public InputList<string> PullSecrets
        {
            get => _pullSecrets ?? (_pullSecrets = new InputList<string>());
            set => _pullSecrets = value;
        }

        [Input("sidecar")]
        public Input<Inputs.GvcSidecarArgs>? Sidecar { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GvcArgs()
        {
        }
        public static new GvcArgs Empty => new GvcArgs();
    }

    public sealed class GvcState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The alias name of the GVC.
        /// </summary>
        [Input("alias")]
        public Input<string>? Alias { get; set; }

        [Input("controlplaneTracing")]
        public Input<Inputs.GvcControlplaneTracingGetArgs>? ControlplaneTracing { get; set; }

        /// <summary>
        /// The ID, in GUID format, of the Global Virtual Cloud.
        /// </summary>
        [Input("cplnId")]
        public Input<string>? CplnId { get; set; }

        /// <summary>
        /// Description of the Global Virtual Cloud.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Custom domain name used by associated workloads.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Customizes the subdomain format for the canonical workload endpoint. `Legacy` leaves it as '${workloadName}-${gvcName}.cpln.app'. `Org` follows the scheme '${workloadName}-${gvcName}.${orgEndpointPrefix}.cpln.app'.
        /// </summary>
        [Input("endpointNamingFormat")]
        public Input<string>? EndpointNamingFormat { get; set; }

        [Input("env")]
        private InputMap<string>? _env;

        /// <summary>
        /// Key-value array of resource environment variables.
        /// </summary>
        public InputMap<string> Env
        {
            get => _env ?? (_env = new InputMap<string>());
            set => _env = value;
        }

        /// <summary>
        /// KEDA configuration for the GVC.
        /// </summary>
        [Input("keda")]
        public Input<Inputs.GvcKedaGetArgs>? Keda { get; set; }

        [Input("lightstepTracing")]
        public Input<Inputs.GvcLightstepTracingGetArgs>? LightstepTracing { get; set; }

        /// <summary>
        /// Dedicated load balancer configuration.
        /// </summary>
        [Input("loadBalancer")]
        public Input<Inputs.GvcLoadBalancerGetArgs>? LoadBalancer { get; set; }

        [Input("locations")]
        private InputList<string>? _locations;

        /// <summary>
        /// A list of [locations](https://docs.controlplane.com/reference/location#current) making up the Global Virtual Cloud.
        /// </summary>
        public InputList<string> Locations
        {
            get => _locations ?? (_locations = new InputList<string>());
            set => _locations = value;
        }

        /// <summary>
        /// Name of the Global Virtual Cloud.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("otelTracing")]
        public Input<Inputs.GvcOtelTracingGetArgs>? OtelTracing { get; set; }

        [Input("pullSecrets")]
        private InputList<string>? _pullSecrets;

        /// <summary>
        /// A list of [pull secret](https://docs.controlplane.com/reference/gvc#pull-secrets) names used to authenticate to any private image repository referenced by Workloads within the GVC.
        /// </summary>
        public InputList<string> PullSecrets
        {
            get => _pullSecrets ?? (_pullSecrets = new InputList<string>());
            set => _pullSecrets = value;
        }

        /// <summary>
        /// Full link to this resource. Can be referenced by other resources.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("sidecar")]
        public Input<Inputs.GvcSidecarGetArgs>? Sidecar { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        public GvcState()
        {
        }
        public static new GvcState Empty => new GvcState();
    }
}
