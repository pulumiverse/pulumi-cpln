// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace Pulumiverse.Cpln
{
    [CplnResourceType("cpln:index/policy:Policy")]
    public partial class Policy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The association between a target kind and the bound permissions to service principals.
        /// </summary>
        [Output("bindings")]
        public Output<ImmutableArray<Outputs.PolicyBinding>> Bindings { get; private set; } = null!;

        /// <summary>
        /// The ID, in GUID format, of the Policy.
        /// </summary>
        [Output("cplnId")]
        public Output<string> CplnId { get; private set; } = null!;

        /// <summary>
        /// Description of the Policy.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The GVC for `identity`, `workload` and `volumeset` target kinds only.
        /// </summary>
        [Output("gvc")]
        public Output<string?> Gvc { get; private set; } = null!;

        /// <summary>
        /// Name of the Policy.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Origin of the Policy. Either `builtin` or `default`.
        /// </summary>
        [Output("origin")]
        public Output<string> Origin { get; private set; } = null!;

        /// <summary>
        /// Full link to this resource. Can be referenced by other resources.
        /// </summary>
        [Output("selfLink")]
        public Output<string> SelfLink { get; private set; } = null!;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,
        /// do not include the attribute.
        /// </summary>
        [Output("target")]
        public Output<string?> Target { get; private set; } = null!;

        /// <summary>
        /// The kind of resource to target (e.g., gvc, serviceaccount, etc.).
        /// </summary>
        [Output("targetKind")]
        public Output<string> TargetKind { get; private set; } = null!;

        /// <summary>
        /// List of the targets this policy will be applied to. Not used if `target` is set to `all`.
        /// </summary>
        [Output("targetLinks")]
        public Output<ImmutableArray<string>> TargetLinks { get; private set; } = null!;

        /// <summary>
        /// A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.
        /// </summary>
        [Output("targetQuery")]
        public Output<Outputs.PolicyTargetQuery?> TargetQuery { get; private set; } = null!;


        /// <summary>
        /// Create a Policy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Policy(string name, PolicyArgs args, CustomResourceOptions? options = null)
            : base("cpln:index/policy:Policy", name, args ?? new PolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Policy(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
            : base("cpln:index/policy:Policy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/pulumiverse",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Policy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Policy Get(string name, Input<string> id, PolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new Policy(name, id, state, options);
        }
    }

    public sealed class PolicyArgs : global::Pulumi.ResourceArgs
    {
        [Input("bindings")]
        private InputList<Inputs.PolicyBindingArgs>? _bindings;

        /// <summary>
        /// The association between a target kind and the bound permissions to service principals.
        /// </summary>
        public InputList<Inputs.PolicyBindingArgs> Bindings
        {
            get => _bindings ?? (_bindings = new InputList<Inputs.PolicyBindingArgs>());
            set => _bindings = value;
        }

        /// <summary>
        /// Description of the Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The GVC for `identity`, `workload` and `volumeset` target kinds only.
        /// </summary>
        [Input("gvc")]
        public Input<string>? Gvc { get; set; }

        /// <summary>
        /// Name of the Policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,
        /// do not include the attribute.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// The kind of resource to target (e.g., gvc, serviceaccount, etc.).
        /// </summary>
        [Input("targetKind", required: true)]
        public Input<string> TargetKind { get; set; } = null!;

        [Input("targetLinks")]
        private InputList<string>? _targetLinks;

        /// <summary>
        /// List of the targets this policy will be applied to. Not used if `target` is set to `all`.
        /// </summary>
        public InputList<string> TargetLinks
        {
            get => _targetLinks ?? (_targetLinks = new InputList<string>());
            set => _targetLinks = value;
        }

        /// <summary>
        /// A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.
        /// </summary>
        [Input("targetQuery")]
        public Input<Inputs.PolicyTargetQueryArgs>? TargetQuery { get; set; }

        public PolicyArgs()
        {
        }
        public static new PolicyArgs Empty => new PolicyArgs();
    }

    public sealed class PolicyState : global::Pulumi.ResourceArgs
    {
        [Input("bindings")]
        private InputList<Inputs.PolicyBindingGetArgs>? _bindings;

        /// <summary>
        /// The association between a target kind and the bound permissions to service principals.
        /// </summary>
        public InputList<Inputs.PolicyBindingGetArgs> Bindings
        {
            get => _bindings ?? (_bindings = new InputList<Inputs.PolicyBindingGetArgs>());
            set => _bindings = value;
        }

        /// <summary>
        /// The ID, in GUID format, of the Policy.
        /// </summary>
        [Input("cplnId")]
        public Input<string>? CplnId { get; set; }

        /// <summary>
        /// Description of the Policy.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The GVC for `identity`, `workload` and `volumeset` target kinds only.
        /// </summary>
        [Input("gvc")]
        public Input<string>? Gvc { get; set; }

        /// <summary>
        /// Name of the Policy.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Origin of the Policy. Either `builtin` or `default`.
        /// </summary>
        [Input("origin")]
        public Input<string>? Origin { get; set; }

        /// <summary>
        /// Full link to this resource. Can be referenced by other resources.
        /// </summary>
        [Input("selfLink")]
        public Input<string>? SelfLink { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Key-value map of resource tags.
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,
        /// do not include the attribute.
        /// </summary>
        [Input("target")]
        public Input<string>? Target { get; set; }

        /// <summary>
        /// The kind of resource to target (e.g., gvc, serviceaccount, etc.).
        /// </summary>
        [Input("targetKind")]
        public Input<string>? TargetKind { get; set; }

        [Input("targetLinks")]
        private InputList<string>? _targetLinks;

        /// <summary>
        /// List of the targets this policy will be applied to. Not used if `target` is set to `all`.
        /// </summary>
        public InputList<string> TargetLinks
        {
            get => _targetLinks ?? (_targetLinks = new InputList<string>());
            set => _targetLinks = value;
        }

        /// <summary>
        /// A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.
        /// </summary>
        [Input("targetQuery")]
        public Input<Inputs.PolicyTargetQueryGetArgs>? TargetQuery { get; set; }

        public PolicyState()
        {
        }
        public static new PolicyState Empty => new PolicyState();
    }
}
