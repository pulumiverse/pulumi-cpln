// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrgLogging extends pulumi.CustomResource {
    /**
     * Get an existing OrgLogging resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgLoggingState, opts?: pulumi.CustomResourceOptions): OrgLogging {
        return new OrgLogging(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cpln:index/orgLogging:OrgLogging';

    /**
     * Returns true if the given object is an instance of OrgLogging.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgLogging {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgLogging.__pulumiType;
    }

    declare public readonly cloudWatchLoggings: pulumi.Output<outputs.OrgLoggingCloudWatchLogging[] | undefined>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/coralogix)
     */
    declare public readonly coralogixLoggings: pulumi.Output<outputs.OrgLoggingCoralogixLogging[] | undefined>;
    /**
     * The ID, in GUID format, of the Org.
     */
    declare public /*out*/ readonly cplnId: pulumi.Output<string>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/datadog)
     */
    declare public readonly datadogLoggings: pulumi.Output<outputs.OrgLoggingDatadogLogging[] | undefined>;
    /**
     * Description of the Org.
     */
    declare public /*out*/ readonly description: pulumi.Output<string>;
    /**
     * For logging and analyzing data within an org using Elastic Logging.
     */
    declare public readonly elasticLoggings: pulumi.Output<outputs.OrgLoggingElasticLogging[] | undefined>;
    declare public readonly fluentdLoggings: pulumi.Output<outputs.OrgLoggingFluentdLogging[] | undefined>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/logz-io)
     */
    declare public readonly logzioLoggings: pulumi.Output<outputs.OrgLoggingLogzioLogging[] | undefined>;
    /**
     * Name of the Org.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/s3)
     */
    declare public readonly s3Loggings: pulumi.Output<outputs.OrgLoggingS3Logging[] | undefined>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    declare public /*out*/ readonly selfLink: pulumi.Output<string>;
    declare public readonly stackdriverLoggings: pulumi.Output<outputs.OrgLoggingStackdriverLogging[] | undefined>;
    declare public readonly syslogLoggings: pulumi.Output<outputs.OrgLoggingSyslogLogging[] | undefined>;
    /**
     * Key-value map of resource tags.
     */
    declare public /*out*/ readonly tags: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a OrgLogging resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OrgLoggingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgLoggingArgs | OrgLoggingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgLoggingState | undefined;
            resourceInputs["cloudWatchLoggings"] = state?.cloudWatchLoggings;
            resourceInputs["coralogixLoggings"] = state?.coralogixLoggings;
            resourceInputs["cplnId"] = state?.cplnId;
            resourceInputs["datadogLoggings"] = state?.datadogLoggings;
            resourceInputs["description"] = state?.description;
            resourceInputs["elasticLoggings"] = state?.elasticLoggings;
            resourceInputs["fluentdLoggings"] = state?.fluentdLoggings;
            resourceInputs["logzioLoggings"] = state?.logzioLoggings;
            resourceInputs["name"] = state?.name;
            resourceInputs["s3Loggings"] = state?.s3Loggings;
            resourceInputs["selfLink"] = state?.selfLink;
            resourceInputs["stackdriverLoggings"] = state?.stackdriverLoggings;
            resourceInputs["syslogLoggings"] = state?.syslogLoggings;
            resourceInputs["tags"] = state?.tags;
        } else {
            const args = argsOrState as OrgLoggingArgs | undefined;
            resourceInputs["cloudWatchLoggings"] = args?.cloudWatchLoggings;
            resourceInputs["coralogixLoggings"] = args?.coralogixLoggings;
            resourceInputs["datadogLoggings"] = args?.datadogLoggings;
            resourceInputs["elasticLoggings"] = args?.elasticLoggings;
            resourceInputs["fluentdLoggings"] = args?.fluentdLoggings;
            resourceInputs["logzioLoggings"] = args?.logzioLoggings;
            resourceInputs["s3Loggings"] = args?.s3Loggings;
            resourceInputs["stackdriverLoggings"] = args?.stackdriverLoggings;
            resourceInputs["syslogLoggings"] = args?.syslogLoggings;
            resourceInputs["cplnId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgLogging.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgLogging resources.
 */
export interface OrgLoggingState {
    cloudWatchLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingCloudWatchLogging>[]>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/coralogix)
     */
    coralogixLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingCoralogixLogging>[]>;
    /**
     * The ID, in GUID format, of the Org.
     */
    cplnId?: pulumi.Input<string>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/datadog)
     */
    datadogLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingDatadogLogging>[]>;
    /**
     * Description of the Org.
     */
    description?: pulumi.Input<string>;
    /**
     * For logging and analyzing data within an org using Elastic Logging.
     */
    elasticLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingElasticLogging>[]>;
    fluentdLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingFluentdLogging>[]>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/logz-io)
     */
    logzioLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingLogzioLogging>[]>;
    /**
     * Name of the Org.
     */
    name?: pulumi.Input<string>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/s3)
     */
    s3Loggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingS3Logging>[]>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    selfLink?: pulumi.Input<string>;
    stackdriverLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingStackdriverLogging>[]>;
    syslogLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingSyslogLogging>[]>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a OrgLogging resource.
 */
export interface OrgLoggingArgs {
    cloudWatchLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingCloudWatchLogging>[]>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/coralogix)
     */
    coralogixLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingCoralogixLogging>[]>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/datadog)
     */
    datadogLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingDatadogLogging>[]>;
    /**
     * For logging and analyzing data within an org using Elastic Logging.
     */
    elasticLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingElasticLogging>[]>;
    fluentdLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingFluentdLogging>[]>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/logz-io)
     */
    logzioLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingLogzioLogging>[]>;
    /**
     * [Documentation Reference](https://docs.controlplane.com/external-logging/s3)
     */
    s3Loggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingS3Logging>[]>;
    stackdriverLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingStackdriverLogging>[]>;
    syslogLoggings?: pulumi.Input<pulumi.Input<inputs.OrgLoggingSyslogLogging>[]>;
}
