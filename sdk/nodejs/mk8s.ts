// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Mk8s extends pulumi.CustomResource {
    /**
     * Get an existing Mk8s resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: Mk8sState, opts?: pulumi.CustomResourceOptions): Mk8s {
        return new Mk8s(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cpln:index/mk8s:Mk8s';

    /**
     * Returns true if the given object is an instance of Mk8s.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Mk8s {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Mk8s.__pulumiType;
    }

    declare public readonly addOns: pulumi.Output<outputs.Mk8sAddOns | undefined>;
    /**
     * The alias name of the Mk8s.
     */
    declare public /*out*/ readonly alias: pulumi.Output<string>;
    declare public readonly awsProvider: pulumi.Output<outputs.Mk8sAwsProvider | undefined>;
    declare public readonly azureProvider: pulumi.Output<outputs.Mk8sAzureProvider | undefined>;
    /**
     * The ID, in GUID format, of the mk8s.
     */
    declare public /*out*/ readonly cplnId: pulumi.Output<string>;
    /**
     * Description of the mk8s.
     */
    declare public readonly description: pulumi.Output<string>;
    declare public readonly digitalOceanProvider: pulumi.Output<outputs.Mk8sDigitalOceanProvider | undefined>;
    declare public readonly ephemeralProvider: pulumi.Output<outputs.Mk8sEphemeralProvider | undefined>;
    /**
     * Allow-list.
     */
    declare public readonly firewalls: pulumi.Output<outputs.Mk8sFirewall[] | undefined>;
    declare public readonly gcpProvider: pulumi.Output<outputs.Mk8sGcpProvider | undefined>;
    declare public readonly genericProvider: pulumi.Output<outputs.Mk8sGenericProvider | undefined>;
    declare public readonly hetznerProvider: pulumi.Output<outputs.Mk8sHetznerProvider | undefined>;
    declare public readonly lambdalabsProvider: pulumi.Output<outputs.Mk8sLambdalabsProvider | undefined>;
    declare public readonly linodeProvider: pulumi.Output<outputs.Mk8sLinodeProvider | undefined>;
    /**
     * Name of the mk8s.
     */
    declare public readonly name: pulumi.Output<string>;
    declare public readonly oblivusProvider: pulumi.Output<outputs.Mk8sOblivusProvider | undefined>;
    declare public readonly paperspaceProvider: pulumi.Output<outputs.Mk8sPaperspaceProvider | undefined>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    declare public /*out*/ readonly selfLink: pulumi.Output<string>;
    /**
     * Status of the mk8s.
     */
    declare public /*out*/ readonly statuses: pulumi.Output<outputs.Mk8sStatus[]>;
    /**
     * Key-value map of resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    declare public readonly tritonProvider: pulumi.Output<outputs.Mk8sTritonProvider | undefined>;
    declare public readonly version: pulumi.Output<string>;

    /**
     * Create a Mk8s resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: Mk8sArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: Mk8sArgs | Mk8sState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as Mk8sState | undefined;
            resourceInputs["addOns"] = state?.addOns;
            resourceInputs["alias"] = state?.alias;
            resourceInputs["awsProvider"] = state?.awsProvider;
            resourceInputs["azureProvider"] = state?.azureProvider;
            resourceInputs["cplnId"] = state?.cplnId;
            resourceInputs["description"] = state?.description;
            resourceInputs["digitalOceanProvider"] = state?.digitalOceanProvider;
            resourceInputs["ephemeralProvider"] = state?.ephemeralProvider;
            resourceInputs["firewalls"] = state?.firewalls;
            resourceInputs["gcpProvider"] = state?.gcpProvider;
            resourceInputs["genericProvider"] = state?.genericProvider;
            resourceInputs["hetznerProvider"] = state?.hetznerProvider;
            resourceInputs["lambdalabsProvider"] = state?.lambdalabsProvider;
            resourceInputs["linodeProvider"] = state?.linodeProvider;
            resourceInputs["name"] = state?.name;
            resourceInputs["oblivusProvider"] = state?.oblivusProvider;
            resourceInputs["paperspaceProvider"] = state?.paperspaceProvider;
            resourceInputs["selfLink"] = state?.selfLink;
            resourceInputs["statuses"] = state?.statuses;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["tritonProvider"] = state?.tritonProvider;
            resourceInputs["version"] = state?.version;
        } else {
            const args = argsOrState as Mk8sArgs | undefined;
            if (args?.version === undefined && !opts.urn) {
                throw new Error("Missing required property 'version'");
            }
            resourceInputs["addOns"] = args?.addOns;
            resourceInputs["awsProvider"] = args?.awsProvider;
            resourceInputs["azureProvider"] = args?.azureProvider;
            resourceInputs["description"] = args?.description;
            resourceInputs["digitalOceanProvider"] = args?.digitalOceanProvider;
            resourceInputs["ephemeralProvider"] = args?.ephemeralProvider;
            resourceInputs["firewalls"] = args?.firewalls;
            resourceInputs["gcpProvider"] = args?.gcpProvider;
            resourceInputs["genericProvider"] = args?.genericProvider;
            resourceInputs["hetznerProvider"] = args?.hetznerProvider;
            resourceInputs["lambdalabsProvider"] = args?.lambdalabsProvider;
            resourceInputs["linodeProvider"] = args?.linodeProvider;
            resourceInputs["name"] = args?.name;
            resourceInputs["oblivusProvider"] = args?.oblivusProvider;
            resourceInputs["paperspaceProvider"] = args?.paperspaceProvider;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["tritonProvider"] = args?.tritonProvider;
            resourceInputs["version"] = args?.version;
            resourceInputs["alias"] = undefined /*out*/;
            resourceInputs["cplnId"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["statuses"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Mk8s.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Mk8s resources.
 */
export interface Mk8sState {
    addOns?: pulumi.Input<inputs.Mk8sAddOns>;
    /**
     * The alias name of the Mk8s.
     */
    alias?: pulumi.Input<string>;
    awsProvider?: pulumi.Input<inputs.Mk8sAwsProvider>;
    azureProvider?: pulumi.Input<inputs.Mk8sAzureProvider>;
    /**
     * The ID, in GUID format, of the mk8s.
     */
    cplnId?: pulumi.Input<string>;
    /**
     * Description of the mk8s.
     */
    description?: pulumi.Input<string>;
    digitalOceanProvider?: pulumi.Input<inputs.Mk8sDigitalOceanProvider>;
    ephemeralProvider?: pulumi.Input<inputs.Mk8sEphemeralProvider>;
    /**
     * Allow-list.
     */
    firewalls?: pulumi.Input<pulumi.Input<inputs.Mk8sFirewall>[]>;
    gcpProvider?: pulumi.Input<inputs.Mk8sGcpProvider>;
    genericProvider?: pulumi.Input<inputs.Mk8sGenericProvider>;
    hetznerProvider?: pulumi.Input<inputs.Mk8sHetznerProvider>;
    lambdalabsProvider?: pulumi.Input<inputs.Mk8sLambdalabsProvider>;
    linodeProvider?: pulumi.Input<inputs.Mk8sLinodeProvider>;
    /**
     * Name of the mk8s.
     */
    name?: pulumi.Input<string>;
    oblivusProvider?: pulumi.Input<inputs.Mk8sOblivusProvider>;
    paperspaceProvider?: pulumi.Input<inputs.Mk8sPaperspaceProvider>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Status of the mk8s.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.Mk8sStatus>[]>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tritonProvider?: pulumi.Input<inputs.Mk8sTritonProvider>;
    version?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Mk8s resource.
 */
export interface Mk8sArgs {
    addOns?: pulumi.Input<inputs.Mk8sAddOns>;
    awsProvider?: pulumi.Input<inputs.Mk8sAwsProvider>;
    azureProvider?: pulumi.Input<inputs.Mk8sAzureProvider>;
    /**
     * Description of the mk8s.
     */
    description?: pulumi.Input<string>;
    digitalOceanProvider?: pulumi.Input<inputs.Mk8sDigitalOceanProvider>;
    ephemeralProvider?: pulumi.Input<inputs.Mk8sEphemeralProvider>;
    /**
     * Allow-list.
     */
    firewalls?: pulumi.Input<pulumi.Input<inputs.Mk8sFirewall>[]>;
    gcpProvider?: pulumi.Input<inputs.Mk8sGcpProvider>;
    genericProvider?: pulumi.Input<inputs.Mk8sGenericProvider>;
    hetznerProvider?: pulumi.Input<inputs.Mk8sHetznerProvider>;
    lambdalabsProvider?: pulumi.Input<inputs.Mk8sLambdalabsProvider>;
    linodeProvider?: pulumi.Input<inputs.Mk8sLinodeProvider>;
    /**
     * Name of the mk8s.
     */
    name?: pulumi.Input<string>;
    oblivusProvider?: pulumi.Input<inputs.Mk8sOblivusProvider>;
    paperspaceProvider?: pulumi.Input<inputs.Mk8sPaperspaceProvider>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tritonProvider?: pulumi.Input<inputs.Mk8sTritonProvider>;
    version: pulumi.Input<string>;
}
