// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages an org's [Custom Location](https://docs.controlplane.com/reference/location#byok-locations).
 *
 * ## Declaration
 *
 * ### Required
 *
 * - **name** (String) Name of the Custom Location.
 * - **enabled** (Boolean) Indication if custom location is enabled.
 * - **cloud_provider** (String) Provider of the custom location, must be `byok`.
 *
 * ### Optional
 *
 * - **tags** (Map of String) Key-value map of resource tags.
 * - **description** - (String) Description of Custom Location.
 *
 * ## Outputs
 *
 * - **cpln_id** (String) The ID, in GUID format, of the custom location.
 * - **self_link** (String) Full link to this resource. Can be referenced by other resources.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as cpln from "@pulumiverse/cpln";
 *
 * const example = new cpln.CustomLocation("example", {
 *     cloudProvider: "byok",
 *     description: "custom location description",
 *     enabled: true,
 *     tags: {
 *         baz: "qux",
 *         foo: "bar",
 *     },
 * });
 * ```
 */
export class CustomLocation extends pulumi.CustomResource {
    /**
     * Get an existing CustomLocation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CustomLocationState, opts?: pulumi.CustomResourceOptions): CustomLocation {
        return new CustomLocation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cpln:index/customLocation:CustomLocation';

    /**
     * Returns true if the given object is an instance of CustomLocation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CustomLocation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CustomLocation.__pulumiType;
    }

    /**
     * Cloud Provider of the custom location.
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * The ID, in GUID format, of the custom location.
     */
    public /*out*/ readonly cplnId!: pulumi.Output<string>;
    /**
     * Description of the custom location.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indication if the custom location is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * Name of the custom location.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;

    /**
     * Create a CustomLocation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CustomLocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CustomLocationArgs | CustomLocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CustomLocationState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["cplnId"] = state ? state.cplnId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as CustomLocationArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["cplnId"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CustomLocation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CustomLocation resources.
 */
export interface CustomLocationState {
    /**
     * Cloud Provider of the custom location.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The ID, in GUID format, of the custom location.
     */
    cplnId?: pulumi.Input<string>;
    /**
     * Description of the custom location.
     */
    description?: pulumi.Input<string>;
    /**
     * Indication if the custom location is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * Name of the custom location.
     */
    name?: pulumi.Input<string>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a CustomLocation resource.
 */
export interface CustomLocationArgs {
    /**
     * Cloud Provider of the custom location.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Description of the custom location.
     */
    description?: pulumi.Input<string>;
    /**
     * Indication if the custom location is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Name of the custom location.
     */
    name?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
