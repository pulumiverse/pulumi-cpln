// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface CloudAccountAws {
    roleArn: string;
}

export interface CloudAccountAzure {
    secretLink: string;
}

export interface CloudAccountGcp {
    projectId: string;
}

export interface CloudAccountNgs {
    secretLink: string;
}

export interface DomainSpec {
    acceptAllHosts?: boolean;
    dnsMode?: string;
    gvcLink?: string;
    ports: outputs.DomainSpecPort[];
}

export interface DomainSpecPort {
    cors?: outputs.DomainSpecPortCors;
    number?: number;
    protocol?: string;
    tls: outputs.DomainSpecPortTls;
}

export interface DomainSpecPortCors {
    allowCredentials?: boolean;
    allowHeaders?: string[];
    allowMethods?: string[];
    allowOrigins?: outputs.DomainSpecPortCorsAllowOrigin[];
    exposeHeaders?: string[];
    maxAge?: string;
}

export interface DomainSpecPortCorsAllowOrigin {
    exact: string;
}

export interface DomainSpecPortTls {
    cipherSuites?: string[];
    clientCertificate?: outputs.DomainSpecPortTlsClientCertificate;
    minProtocolVersion?: string;
    serverCertificate?: outputs.DomainSpecPortTlsServerCertificate;
}

export interface DomainSpecPortTlsClientCertificate {
    secretLink?: string;
}

export interface DomainSpecPortTlsServerCertificate {
    secretLink?: string;
}

export interface DomainStatus {
    dnsConfigs?: outputs.DomainStatusDnsConfig[];
    endpoints?: outputs.DomainStatusEndpoint[];
    fingerprint?: string;
    locations?: outputs.DomainStatusLocation[];
    status?: string;
    warning?: string;
}

export interface DomainStatusDnsConfig {
    host?: string;
    ttl?: number;
    type?: string;
    value?: string;
}

export interface DomainStatusEndpoint {
    url?: string;
    workloadLink?: string;
}

export interface DomainStatusLocation {
    certificateStatus?: string;
    name?: string;
}

export interface GetGvcControlplaneTracing {
    customTags?: {[key: string]: string};
    sampling: number;
}

export interface GetGvcLightstepTracing {
    credentials?: string;
    customTags?: {[key: string]: string};
    endpoint: string;
    sampling: number;
}

export interface GetGvcLoadBalancer {
    dedicated: boolean;
    trustedProxies?: number;
}

export interface GetGvcOtelTracing {
    customTags?: {[key: string]: string};
    endpoint: string;
    sampling: number;
}

export interface GetGvcSidecar {
    envoy: string;
}

export interface GetImageManifest {
    configs: outputs.GetImageManifestConfig[];
    layers: outputs.GetImageManifestLayer[];
    mediaType: string;
    schemaVersion: number;
}

export interface GetImageManifestConfig {
    digest: string;
    mediaType: string;
    size: number;
}

export interface GetImageManifestLayer {
    digest: string;
    mediaType: string;
    size: number;
}

export interface GetImagesImage {
    cplnId: string;
    digest: string;
    manifests: outputs.GetImagesImageManifest[];
    name: string;
    repository: string;
    selfLink: string;
    tag: string;
    tags: {[key: string]: string};
}

export interface GetImagesImageManifest {
    configs: outputs.GetImagesImageManifestConfig[];
    layers: outputs.GetImagesImageManifestLayer[];
    mediaType: string;
    schemaVersion: number;
}

export interface GetImagesImageManifestConfig {
    digest: string;
    mediaType: string;
    size: number;
}

export interface GetImagesImageManifestLayer {
    digest: string;
    mediaType: string;
    size: number;
}

export interface GetImagesQuery {
    fetch?: string;
    spec?: outputs.GetImagesQuerySpec;
}

export interface GetImagesQuerySpec {
    match?: string;
    terms?: outputs.GetImagesQuerySpecTerm[];
}

export interface GetImagesQuerySpecTerm {
    op?: string;
    property?: string;
    tag?: string;
    value?: string;
}

export interface GetLocationGeo {
    city?: string;
    continent?: string;
    country?: string;
    lat?: number;
    lon?: number;
    state?: string;
}

export interface GetLocationsLocation {
    cloudProvider: string;
    cplnId: string;
    description: string;
    enabled: boolean;
    geos: outputs.GetLocationsLocationGeo[];
    ipRanges: string[];
    name: string;
    region: string;
    selfLink: string;
    tags: {[key: string]: string};
}

export interface GetLocationsLocationGeo {
    city?: string;
    continent?: string;
    country?: string;
    lat?: number;
    lon?: number;
    state?: string;
}

export interface GroupIdentityMatcher {
    expression: string;
    language?: string;
}

export interface GroupMemberQuery {
    fetch?: string;
    spec?: outputs.GroupMemberQuerySpec;
}

export interface GroupMemberQuerySpec {
    match?: string;
    terms?: outputs.GroupMemberQuerySpecTerm[];
}

export interface GroupMemberQuerySpecTerm {
    op?: string;
    property?: string;
    tag?: string;
    value?: string;
}

export interface GvcControlplaneTracing {
    customTags?: {[key: string]: string};
    sampling: number;
}

export interface GvcLightstepTracing {
    credentials?: string;
    customTags?: {[key: string]: string};
    endpoint: string;
    sampling: number;
}

export interface GvcLoadBalancer {
    dedicated: boolean;
    trustedProxies?: number;
}

export interface GvcOtelTracing {
    customTags?: {[key: string]: string};
    endpoint: string;
    sampling: number;
}

export interface GvcSidecar {
    envoy: string;
}

export interface IdentityAwsAccessPolicy {
    cloudAccountLink: string;
    policyRefs?: string[];
    roleName?: string;
}

export interface IdentityAzureAccessPolicy {
    cloudAccountLink: string;
    roleAssignments?: outputs.IdentityAzureAccessPolicyRoleAssignment[];
}

export interface IdentityAzureAccessPolicyRoleAssignment {
    roles?: string[];
    scope?: string;
}

export interface IdentityGcpAccessPolicy {
    bindings?: outputs.IdentityGcpAccessPolicyBinding[];
    cloudAccountLink: string;
    scopes?: string;
    serviceAccount?: string;
}

export interface IdentityGcpAccessPolicyBinding {
    resource?: string;
    roles?: string[];
}

export interface IdentityNativeNetworkResource {
    awsPrivateLink?: outputs.IdentityNativeNetworkResourceAwsPrivateLink;
    fqdn: string;
    gcpServiceConnect?: outputs.IdentityNativeNetworkResourceGcpServiceConnect;
    name: string;
    ports: number[];
}

export interface IdentityNativeNetworkResourceAwsPrivateLink {
    endpointServiceName: string;
}

export interface IdentityNativeNetworkResourceGcpServiceConnect {
    targetService: string;
}

export interface IdentityNetworkResource {
    agentLink: string;
    fqdn?: string;
    ips?: string[];
    name: string;
    ports?: number[];
    resolverIp?: string;
}

export interface IdentityNgsAccessPolicy {
    cloudAccountLink: string;
    data?: number;
    payload?: number;
    pub?: outputs.IdentityNgsAccessPolicyPub;
    resp?: outputs.IdentityNgsAccessPolicyResp;
    sub?: outputs.IdentityNgsAccessPolicySub;
    subs?: number;
}

export interface IdentityNgsAccessPolicyPub {
    allows?: string[];
    denies?: string[];
}

export interface IdentityNgsAccessPolicyResp {
    max?: number;
    ttl?: string;
}

export interface IdentityNgsAccessPolicySub {
    allows?: string[];
    denies?: string[];
}

export interface OrgAuthConfig {
    domainAutoMembers: string[];
    samlOnly?: boolean;
}

export interface OrgLoggingCloudWatchLogging {
    credentials: string;
    groupName: string;
    region: string;
    retentionDays?: number;
    streamName: string;
}

export interface OrgLoggingCoralogixLogging {
    app: string;
    cluster: string;
    credentials: string;
    subsystem: string;
}

export interface OrgLoggingDatadogLogging {
    credentials: string;
    host: string;
}

export interface OrgLoggingElasticLogging {
    aws?: outputs.OrgLoggingElasticLoggingAws;
    elasticCloud?: outputs.OrgLoggingElasticLoggingElasticCloud;
    generic?: outputs.OrgLoggingElasticLoggingGeneric;
}

export interface OrgLoggingElasticLoggingAws {
    credentials: string;
    host: string;
    index: string;
    port: number;
    region: string;
    type: string;
}

export interface OrgLoggingElasticLoggingElasticCloud {
    cloudId: string;
    credentials: string;
    index: string;
    type: string;
}

export interface OrgLoggingElasticLoggingGeneric {
    credentials: string;
    host: string;
    index: string;
    path: string;
    port: number;
    type: string;
}

export interface OrgLoggingFluentdLogging {
    host: string;
    port?: number;
}

export interface OrgLoggingLogzioLogging {
    credentials: string;
    listenerHost: string;
}

export interface OrgLoggingS3Logging {
    bucket: string;
    credentials: string;
    prefix?: string;
    region: string;
}

export interface OrgLoggingStackdriverLogging {
    credentials: string;
    location: string;
}

export interface OrgObservability {
    logsRetentionDays?: number;
    metricsRetentionDays?: number;
    tracesRetentionDays?: number;
}

export interface OrgStatus {
    accountLink?: string;
    active?: boolean;
}

export interface OrgTracingControlplaneTracing {
    customTags?: {[key: string]: string};
    sampling: number;
}

export interface OrgTracingLightstepTracing {
    credentials?: string;
    customTags?: {[key: string]: string};
    endpoint: string;
    sampling: number;
}

export interface OrgTracingOtelTracing {
    customTags?: {[key: string]: string};
    endpoint: string;
    sampling: number;
}

export interface PolicyBinding {
    permissions: string[];
    principalLinks: string[];
}

export interface PolicyTargetQuery {
    fetch?: string;
    spec?: outputs.PolicyTargetQuerySpec;
}

export interface PolicyTargetQuerySpec {
    match?: string;
    terms?: outputs.PolicyTargetQuerySpecTerm[];
}

export interface PolicyTargetQuerySpecTerm {
    op?: string;
    property?: string;
    tag?: string;
    value?: string;
}

export interface SecretAws {
    accessKey: string;
    externalId?: string;
    roleArn?: string;
    secretKey: string;
}

export interface SecretAzureConnector {
    code: string;
    url: string;
}

export interface SecretEcr {
    accessKey: string;
    externalId?: string;
    repos: string[];
    roleArn?: string;
    secretKey: string;
}

export interface SecretKeypair {
    passphrase?: string;
    publicKey?: string;
    secretKey: string;
}

export interface SecretNatsAccount {
    accountId: string;
    privateKey: string;
}

export interface SecretOpaque {
    encoding?: string;
    payload: string;
}

export interface SecretTls {
    cert: string;
    chain?: string;
    key: string;
}

export interface SecretUserpass {
    encoding?: string;
    password: string;
    username: string;
}

export interface VolumeSetAutoscaling {
    maxCapacity: number;
    minFreePercentage: number;
    scalingFactor: number;
}

export interface VolumeSetSnapshots {
    createFinalSnapshot?: boolean;
    retentionDuration?: string;
    schedule?: string;
}

export interface VolumeSetStatus {
    bindingId: string;
    locations: string[];
    parentId: string;
    usedByWorkload: string;
}

export interface WorkloadContainer {
    args?: string[];
    command?: string;
    cpu?: string;
    env?: {[key: string]: string};
    gpuNvidia?: outputs.WorkloadContainerGpuNvidia;
    image: string;
    inheritEnv?: boolean;
    lifecycle?: outputs.WorkloadContainerLifecycle;
    livenessProbe?: outputs.WorkloadContainerLivenessProbe;
    memory?: string;
    metrics?: outputs.WorkloadContainerMetrics;
    minCpu?: string;
    minMemory?: string;
    name: string;
    /**
     * @deprecated The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.
     */
    port?: number;
    ports?: outputs.WorkloadContainerPort[];
    readinessProbe?: outputs.WorkloadContainerReadinessProbe;
    volumes?: outputs.WorkloadContainerVolume[];
    workingDirectory?: string;
}

export interface WorkloadContainerGpuNvidia {
    model: string;
    quantity: number;
}

export interface WorkloadContainerLifecycle {
    postStart?: outputs.WorkloadContainerLifecyclePostStart;
    preStop?: outputs.WorkloadContainerLifecyclePreStop;
}

export interface WorkloadContainerLifecyclePostStart {
    exec: outputs.WorkloadContainerLifecyclePostStartExec;
}

export interface WorkloadContainerLifecyclePostStartExec {
    commands: string[];
}

export interface WorkloadContainerLifecyclePreStop {
    exec: outputs.WorkloadContainerLifecyclePreStopExec;
}

export interface WorkloadContainerLifecyclePreStopExec {
    commands: string[];
}

export interface WorkloadContainerLivenessProbe {
    exec?: outputs.WorkloadContainerLivenessProbeExec;
    failureThreshold?: number;
    grpc?: outputs.WorkloadContainerLivenessProbeGrpc;
    httpGet?: outputs.WorkloadContainerLivenessProbeHttpGet;
    initialDelaySeconds?: number;
    periodSeconds?: number;
    successThreshold?: number;
    tcpSocket?: outputs.WorkloadContainerLivenessProbeTcpSocket;
    timeoutSeconds?: number;
}

export interface WorkloadContainerLivenessProbeExec {
    commands: string[];
}

export interface WorkloadContainerLivenessProbeGrpc {
    port?: number;
}

export interface WorkloadContainerLivenessProbeHttpGet {
    httpHeaders?: {[key: string]: string};
    path?: string;
    port?: number;
    scheme?: string;
}

export interface WorkloadContainerLivenessProbeTcpSocket {
    port?: number;
}

export interface WorkloadContainerMetrics {
    path: string;
    port: number;
}

export interface WorkloadContainerPort {
    number: number;
    protocol?: string;
}

export interface WorkloadContainerReadinessProbe {
    exec?: outputs.WorkloadContainerReadinessProbeExec;
    failureThreshold?: number;
    grpc?: outputs.WorkloadContainerReadinessProbeGrpc;
    httpGet?: outputs.WorkloadContainerReadinessProbeHttpGet;
    initialDelaySeconds?: number;
    periodSeconds?: number;
    successThreshold?: number;
    tcpSocket?: outputs.WorkloadContainerReadinessProbeTcpSocket;
    timeoutSeconds?: number;
}

export interface WorkloadContainerReadinessProbeExec {
    commands: string[];
}

export interface WorkloadContainerReadinessProbeGrpc {
    port?: number;
}

export interface WorkloadContainerReadinessProbeHttpGet {
    httpHeaders?: {[key: string]: string};
    path?: string;
    port?: number;
    scheme?: string;
}

export interface WorkloadContainerReadinessProbeTcpSocket {
    port?: number;
}

export interface WorkloadContainerVolume {
    path: string;
    recoveryPolicy?: string;
    uri: string;
}

export interface WorkloadFirewallSpec {
    external?: outputs.WorkloadFirewallSpecExternal;
    internal?: outputs.WorkloadFirewallSpecInternal;
}

export interface WorkloadFirewallSpecExternal {
    inboundAllowCidrs?: string[];
    outboundAllowCidrs?: string[];
    outboundAllowHostnames?: string[];
    outboundAllowPorts?: outputs.WorkloadFirewallSpecExternalOutboundAllowPort[];
}

export interface WorkloadFirewallSpecExternalOutboundAllowPort {
    number: number;
    protocol: string;
}

export interface WorkloadFirewallSpecInternal {
    inboundAllowType?: string;
    inboundAllowWorkloads?: string[];
}

export interface WorkloadJob {
    activeDeadlineSeconds?: number;
    concurrencyPolicy?: string;
    historyLimit?: number;
    restartPolicy?: string;
    schedule: string;
}

export interface WorkloadLocalOption {
    autoscaling?: outputs.WorkloadLocalOptionAutoscaling;
    capacityAi?: boolean;
    debug?: boolean;
    location: string;
    suspend?: boolean;
    timeoutSeconds?: number;
}

export interface WorkloadLocalOptionAutoscaling {
    maxConcurrency?: number;
    maxScale?: number;
    metric?: string;
    metricPercentile?: string;
    minScale?: number;
    scaleToZeroDelay?: number;
    target?: number;
}

export interface WorkloadOptions {
    autoscaling?: outputs.WorkloadOptionsAutoscaling;
    capacityAi?: boolean;
    debug?: boolean;
    suspend?: boolean;
    timeoutSeconds?: number;
}

export interface WorkloadOptionsAutoscaling {
    maxConcurrency?: number;
    maxScale?: number;
    metric?: string;
    metricPercentile?: string;
    minScale?: number;
    scaleToZeroDelay?: number;
    target?: number;
}

export interface WorkloadRolloutOptions {
    maxSurgeReplicas?: string;
    maxUnavailableReplicas?: string;
    minReadySeconds?: number;
    scalingPolicy?: string;
}

export interface WorkloadSecurityOptions {
    fileSystemGroupId: number;
}

export interface WorkloadSidecar {
    envoy: string;
}

export interface WorkloadStatus {
    canonicalEndpoint?: string;
    currentReplicaCount?: number;
    endpoint?: string;
    healthChecks?: outputs.WorkloadStatusHealthCheck[];
    internalName?: string;
    parentId?: string;
    resolvedImages?: outputs.WorkloadStatusResolvedImage[];
}

export interface WorkloadStatusHealthCheck {
    active: boolean;
    code?: number;
    failures?: number;
    lastChecked?: string;
    message?: string;
    success?: boolean;
    successes?: number;
}

export interface WorkloadStatusResolvedImage {
    images?: outputs.WorkloadStatusResolvedImageImage[];
    resolvedAt?: string;
    resolvedForVersion?: number;
}

export interface WorkloadStatusResolvedImageImage {
    digest?: string;
    manifests?: outputs.WorkloadStatusResolvedImageImageManifest[];
}

export interface WorkloadStatusResolvedImageImageManifest {
    digest?: string;
    image?: string;
    mediaType?: string;
    platform?: {[key: string]: string};
}

