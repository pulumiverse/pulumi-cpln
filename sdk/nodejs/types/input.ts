// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface CloudAccountAws {
    roleArn: pulumi.Input<string>;
}

export interface CloudAccountAzure {
    secretLink: pulumi.Input<string>;
}

export interface CloudAccountGcp {
    projectId: pulumi.Input<string>;
}

export interface CloudAccountNgs {
    secretLink: pulumi.Input<string>;
}

export interface DomainSpec {
    acceptAllHosts?: pulumi.Input<boolean>;
    dnsMode?: pulumi.Input<string>;
    gvcLink?: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<inputs.DomainSpecPort>[]>;
}

export interface DomainSpecPort {
    cors?: pulumi.Input<inputs.DomainSpecPortCors>;
    number?: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
    tls: pulumi.Input<inputs.DomainSpecPortTls>;
}

export interface DomainSpecPortCors {
    allowCredentials?: pulumi.Input<boolean>;
    allowHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    allowMethods?: pulumi.Input<pulumi.Input<string>[]>;
    allowOrigins?: pulumi.Input<pulumi.Input<inputs.DomainSpecPortCorsAllowOrigin>[]>;
    exposeHeaders?: pulumi.Input<pulumi.Input<string>[]>;
    maxAge?: pulumi.Input<string>;
}

export interface DomainSpecPortCorsAllowOrigin {
    exact: pulumi.Input<string>;
}

export interface DomainSpecPortTls {
    cipherSuites?: pulumi.Input<pulumi.Input<string>[]>;
    clientCertificate?: pulumi.Input<inputs.DomainSpecPortTlsClientCertificate>;
    minProtocolVersion?: pulumi.Input<string>;
    serverCertificate?: pulumi.Input<inputs.DomainSpecPortTlsServerCertificate>;
}

export interface DomainSpecPortTlsClientCertificate {
    secretLink?: pulumi.Input<string>;
}

export interface DomainSpecPortTlsServerCertificate {
    secretLink?: pulumi.Input<string>;
}

export interface DomainStatus {
    dnsConfigs?: pulumi.Input<pulumi.Input<inputs.DomainStatusDnsConfig>[]>;
    endpoints?: pulumi.Input<pulumi.Input<inputs.DomainStatusEndpoint>[]>;
    fingerprint?: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<inputs.DomainStatusLocation>[]>;
    status?: pulumi.Input<string>;
    warning?: pulumi.Input<string>;
}

export interface DomainStatusDnsConfig {
    host?: pulumi.Input<string>;
    ttl?: pulumi.Input<number>;
    type?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface DomainStatusEndpoint {
    url?: pulumi.Input<string>;
    workloadLink?: pulumi.Input<string>;
}

export interface DomainStatusLocation {
    certificateStatus?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface GetGvcControlplaneTracing {
    customTags?: {[key: string]: string};
    sampling: number;
}

export interface GetGvcControlplaneTracingArgs {
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sampling: pulumi.Input<number>;
}

export interface GetGvcLightstepTracing {
    credentials?: string;
    customTags?: {[key: string]: string};
    endpoint: string;
    sampling: number;
}

export interface GetGvcLightstepTracingArgs {
    credentials?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpoint: pulumi.Input<string>;
    sampling: pulumi.Input<number>;
}

export interface GetGvcLoadBalancer {
    dedicated: boolean;
    trustedProxies?: number;
}

export interface GetGvcLoadBalancerArgs {
    dedicated: pulumi.Input<boolean>;
    trustedProxies?: pulumi.Input<number>;
}

export interface GetGvcOtelTracing {
    customTags?: {[key: string]: string};
    endpoint: string;
    sampling: number;
}

export interface GetGvcOtelTracingArgs {
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpoint: pulumi.Input<string>;
    sampling: pulumi.Input<number>;
}

export interface GetGvcSidecar {
    envoy: string;
}

export interface GetGvcSidecarArgs {
    envoy: pulumi.Input<string>;
}

export interface GetImagesQuery {
    fetch?: string;
    spec?: inputs.GetImagesQuerySpec;
}

export interface GetImagesQueryArgs {
    fetch?: pulumi.Input<string>;
    spec?: pulumi.Input<inputs.GetImagesQuerySpecArgs>;
}

export interface GetImagesQuerySpec {
    match?: string;
    terms?: inputs.GetImagesQuerySpecTerm[];
}

export interface GetImagesQuerySpecArgs {
    match?: pulumi.Input<string>;
    terms?: pulumi.Input<pulumi.Input<inputs.GetImagesQuerySpecTermArgs>[]>;
}

export interface GetImagesQuerySpecTerm {
    op?: string;
    property?: string;
    tag?: string;
    value?: string;
}

export interface GetImagesQuerySpecTermArgs {
    op?: pulumi.Input<string>;
    property?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GroupIdentityMatcher {
    expression: pulumi.Input<string>;
    language?: pulumi.Input<string>;
}

export interface GroupMemberQuery {
    fetch?: pulumi.Input<string>;
    spec?: pulumi.Input<inputs.GroupMemberQuerySpec>;
}

export interface GroupMemberQuerySpec {
    match?: pulumi.Input<string>;
    terms?: pulumi.Input<pulumi.Input<inputs.GroupMemberQuerySpecTerm>[]>;
}

export interface GroupMemberQuerySpecTerm {
    op?: pulumi.Input<string>;
    property?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface GvcControlplaneTracing {
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sampling: pulumi.Input<number>;
}

export interface GvcLightstepTracing {
    credentials?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpoint: pulumi.Input<string>;
    sampling: pulumi.Input<number>;
}

export interface GvcLoadBalancer {
    dedicated: pulumi.Input<boolean>;
    trustedProxies?: pulumi.Input<number>;
}

export interface GvcOtelTracing {
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpoint: pulumi.Input<string>;
    sampling: pulumi.Input<number>;
}

export interface GvcSidecar {
    envoy: pulumi.Input<string>;
}

export interface IdentityAwsAccessPolicy {
    cloudAccountLink: pulumi.Input<string>;
    policyRefs?: pulumi.Input<pulumi.Input<string>[]>;
    roleName?: pulumi.Input<string>;
}

export interface IdentityAzureAccessPolicy {
    cloudAccountLink: pulumi.Input<string>;
    roleAssignments?: pulumi.Input<pulumi.Input<inputs.IdentityAzureAccessPolicyRoleAssignment>[]>;
}

export interface IdentityAzureAccessPolicyRoleAssignment {
    roles?: pulumi.Input<pulumi.Input<string>[]>;
    scope?: pulumi.Input<string>;
}

export interface IdentityGcpAccessPolicy {
    bindings?: pulumi.Input<pulumi.Input<inputs.IdentityGcpAccessPolicyBinding>[]>;
    cloudAccountLink: pulumi.Input<string>;
    scopes?: pulumi.Input<string>;
    serviceAccount?: pulumi.Input<string>;
}

export interface IdentityGcpAccessPolicyBinding {
    resource?: pulumi.Input<string>;
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IdentityNativeNetworkResource {
    awsPrivateLink?: pulumi.Input<inputs.IdentityNativeNetworkResourceAwsPrivateLink>;
    fqdn: pulumi.Input<string>;
    gcpServiceConnect?: pulumi.Input<inputs.IdentityNativeNetworkResourceGcpServiceConnect>;
    name: pulumi.Input<string>;
    ports: pulumi.Input<pulumi.Input<number>[]>;
}

export interface IdentityNativeNetworkResourceAwsPrivateLink {
    endpointServiceName: pulumi.Input<string>;
}

export interface IdentityNativeNetworkResourceGcpServiceConnect {
    targetService: pulumi.Input<string>;
}

export interface IdentityNetworkResource {
    agentLink: pulumi.Input<string>;
    fqdn?: pulumi.Input<string>;
    ips?: pulumi.Input<pulumi.Input<string>[]>;
    name: pulumi.Input<string>;
    ports?: pulumi.Input<pulumi.Input<number>[]>;
    resolverIp?: pulumi.Input<string>;
}

export interface IdentityNgsAccessPolicy {
    cloudAccountLink: pulumi.Input<string>;
    data?: pulumi.Input<number>;
    payload?: pulumi.Input<number>;
    pub?: pulumi.Input<inputs.IdentityNgsAccessPolicyPub>;
    resp?: pulumi.Input<inputs.IdentityNgsAccessPolicyResp>;
    sub?: pulumi.Input<inputs.IdentityNgsAccessPolicySub>;
    subs?: pulumi.Input<number>;
}

export interface IdentityNgsAccessPolicyPub {
    allows?: pulumi.Input<pulumi.Input<string>[]>;
    denies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface IdentityNgsAccessPolicyResp {
    max?: pulumi.Input<number>;
    ttl?: pulumi.Input<string>;
}

export interface IdentityNgsAccessPolicySub {
    allows?: pulumi.Input<pulumi.Input<string>[]>;
    denies?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface LocationGeo {
    city?: pulumi.Input<string>;
    continent?: pulumi.Input<string>;
    country?: pulumi.Input<string>;
    lat?: pulumi.Input<number>;
    lon?: pulumi.Input<number>;
    state?: pulumi.Input<string>;
}

export interface Mk8sAddOns {
    awsEcr?: pulumi.Input<inputs.Mk8sAddOnsAwsEcr>;
    awsEfs?: pulumi.Input<inputs.Mk8sAddOnsAwsEfs>;
    awsElb?: pulumi.Input<inputs.Mk8sAddOnsAwsElb>;
    awsWorkloadIdentity?: pulumi.Input<boolean>;
    azureAcr?: pulumi.Input<inputs.Mk8sAddOnsAzureAcr>;
    azureWorkloadIdentity?: pulumi.Input<inputs.Mk8sAddOnsAzureWorkloadIdentity>;
    dashboard?: pulumi.Input<boolean>;
    localPathStorage?: pulumi.Input<boolean>;
    logs?: pulumi.Input<inputs.Mk8sAddOnsLogs>;
    metrics?: pulumi.Input<inputs.Mk8sAddOnsMetrics>;
    nvidia?: pulumi.Input<inputs.Mk8sAddOnsNvidia>;
    sysbox?: pulumi.Input<boolean>;
}

export interface Mk8sAddOnsAwsEcr {
    roleArn: pulumi.Input<string>;
}

export interface Mk8sAddOnsAwsEfs {
    roleArn: pulumi.Input<string>;
}

export interface Mk8sAddOnsAwsElb {
    roleArn: pulumi.Input<string>;
}

export interface Mk8sAddOnsAzureAcr {
    clientId: pulumi.Input<string>;
}

export interface Mk8sAddOnsAzureWorkloadIdentity {
    tenantId: pulumi.Input<string>;
}

export interface Mk8sAddOnsLogs {
    auditEnabled?: pulumi.Input<boolean>;
    excludeNamespaces?: pulumi.Input<string>;
    includeNamespaces?: pulumi.Input<string>;
}

export interface Mk8sAddOnsMetrics {
    apiServer?: pulumi.Input<boolean>;
    cadvisor?: pulumi.Input<boolean>;
    coreDns?: pulumi.Input<boolean>;
    kubeState?: pulumi.Input<boolean>;
    kubelet?: pulumi.Input<boolean>;
    nodeExporter?: pulumi.Input<boolean>;
    scrapeAnnotated?: pulumi.Input<inputs.Mk8sAddOnsMetricsScrapeAnnotated>;
}

export interface Mk8sAddOnsMetricsScrapeAnnotated {
    excludeNamespaces?: pulumi.Input<string>;
    includeNamespaces?: pulumi.Input<string>;
    intervalSeconds?: pulumi.Input<number>;
    retainLabels?: pulumi.Input<string>;
}

export interface Mk8sAddOnsNvidia {
    taintGpuNodes: pulumi.Input<boolean>;
}

export interface Mk8sAwsProvider {
    autoscaler?: pulumi.Input<inputs.Mk8sAwsProviderAutoscaler>;
    awsTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    deployRoleArn: pulumi.Input<string>;
    diskEncryptionKeyArn?: pulumi.Input<string>;
    image: pulumi.Input<inputs.Mk8sAwsProviderImage>;
    keyPair?: pulumi.Input<string>;
    networking?: pulumi.Input<inputs.Mk8sAwsProviderNetworking>;
    nodePools?: pulumi.Input<pulumi.Input<inputs.Mk8sAwsProviderNodePool>[]>;
    preInstallScript?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    skipCreateRoles?: pulumi.Input<boolean>;
    vpcId: pulumi.Input<string>;
}

export interface Mk8sAwsProviderAutoscaler {
    expanders: pulumi.Input<pulumi.Input<string>[]>;
    unneededTime?: pulumi.Input<string>;
    unreadyTime?: pulumi.Input<string>;
    utilizationThreshold?: pulumi.Input<number>;
}

export interface Mk8sAwsProviderImage {
    exact?: pulumi.Input<string>;
    recommended?: pulumi.Input<string>;
}

export interface Mk8sAwsProviderNetworking {
    podNetwork?: pulumi.Input<string>;
    serviceNetwork?: pulumi.Input<string>;
}

export interface Mk8sAwsProviderNodePool {
    bootDiskSize?: pulumi.Input<number>;
    extraSecurityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    instanceTypes: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    onDemandBaseCapacity?: pulumi.Input<number>;
    onDemandPercentageAboveBaseCapacity?: pulumi.Input<number>;
    overrideImage: pulumi.Input<inputs.Mk8sAwsProviderNodePoolOverrideImage>;
    spotAllocationStrategy?: pulumi.Input<string>;
    subnetIds: pulumi.Input<pulumi.Input<string>[]>;
    taints?: pulumi.Input<pulumi.Input<inputs.Mk8sAwsProviderNodePoolTaint>[]>;
}

export interface Mk8sAwsProviderNodePoolOverrideImage {
    exact?: pulumi.Input<string>;
    recommended?: pulumi.Input<string>;
}

export interface Mk8sAwsProviderNodePoolTaint {
    effect?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface Mk8sFirewall {
    description?: pulumi.Input<string>;
    sourceCidr: pulumi.Input<string>;
}

export interface Mk8sGenericProvider {
    location: pulumi.Input<string>;
    networking?: pulumi.Input<inputs.Mk8sGenericProviderNetworking>;
    nodePools?: pulumi.Input<pulumi.Input<inputs.Mk8sGenericProviderNodePool>[]>;
}

export interface Mk8sGenericProviderNetworking {
    podNetwork?: pulumi.Input<string>;
    serviceNetwork?: pulumi.Input<string>;
}

export interface Mk8sGenericProviderNodePool {
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    taints?: pulumi.Input<pulumi.Input<inputs.Mk8sGenericProviderNodePoolTaint>[]>;
}

export interface Mk8sGenericProviderNodePoolTaint {
    effect?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface Mk8sHetznerProvider {
    autoscaler?: pulumi.Input<inputs.Mk8sHetznerProviderAutoscaler>;
    dedicatedServerNodePools?: pulumi.Input<pulumi.Input<inputs.Mk8sHetznerProviderDedicatedServerNodePool>[]>;
    firewallId?: pulumi.Input<string>;
    hetznerLabels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    image?: pulumi.Input<string>;
    networkId: pulumi.Input<string>;
    networking?: pulumi.Input<inputs.Mk8sHetznerProviderNetworking>;
    nodePools?: pulumi.Input<pulumi.Input<inputs.Mk8sHetznerProviderNodePool>[]>;
    preInstallScript?: pulumi.Input<string>;
    region: pulumi.Input<string>;
    sshKey?: pulumi.Input<string>;
    tokenSecretLink: pulumi.Input<string>;
}

export interface Mk8sHetznerProviderAutoscaler {
    expanders: pulumi.Input<pulumi.Input<string>[]>;
    unneededTime?: pulumi.Input<string>;
    unreadyTime?: pulumi.Input<string>;
    utilizationThreshold?: pulumi.Input<number>;
}

export interface Mk8sHetznerProviderDedicatedServerNodePool {
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    name: pulumi.Input<string>;
    taints?: pulumi.Input<pulumi.Input<inputs.Mk8sHetznerProviderDedicatedServerNodePoolTaint>[]>;
}

export interface Mk8sHetznerProviderDedicatedServerNodePoolTaint {
    effect?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface Mk8sHetznerProviderNetworking {
    podNetwork?: pulumi.Input<string>;
    serviceNetwork?: pulumi.Input<string>;
}

export interface Mk8sHetznerProviderNodePool {
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maxSize?: pulumi.Input<number>;
    minSize?: pulumi.Input<number>;
    name: pulumi.Input<string>;
    overrideImage?: pulumi.Input<string>;
    serverType: pulumi.Input<string>;
    taints?: pulumi.Input<pulumi.Input<inputs.Mk8sHetznerProviderNodePoolTaint>[]>;
}

export interface Mk8sHetznerProviderNodePoolTaint {
    effect?: pulumi.Input<string>;
    key?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface Mk8sStatus {
    addOns?: pulumi.Input<pulumi.Input<inputs.Mk8sStatusAddOn>[]>;
    homeLocation?: pulumi.Input<string>;
    oidcProviderUrl?: pulumi.Input<string>;
    serverUrl?: pulumi.Input<string>;
}

export interface Mk8sStatusAddOn {
    awsEcrs?: pulumi.Input<pulumi.Input<inputs.Mk8sStatusAddOnAwsEcr>[]>;
    awsEfs?: pulumi.Input<pulumi.Input<inputs.Mk8sStatusAddOnAwsEf>[]>;
    awsElbs?: pulumi.Input<pulumi.Input<inputs.Mk8sStatusAddOnAwsElb>[]>;
    awsWorkloadIdentities?: pulumi.Input<pulumi.Input<inputs.Mk8sStatusAddOnAwsWorkloadIdentity>[]>;
    dashboards?: pulumi.Input<pulumi.Input<inputs.Mk8sStatusAddOnDashboard>[]>;
    logs?: pulumi.Input<pulumi.Input<inputs.Mk8sStatusAddOnLog>[]>;
    metrics?: pulumi.Input<pulumi.Input<inputs.Mk8sStatusAddOnMetric>[]>;
}

export interface Mk8sStatusAddOnAwsEcr {
    trustPolicy?: pulumi.Input<string>;
}

export interface Mk8sStatusAddOnAwsEf {
    trustPolicy?: pulumi.Input<string>;
}

export interface Mk8sStatusAddOnAwsElb {
    trustPolicy?: pulumi.Input<string>;
}

export interface Mk8sStatusAddOnAwsWorkloadIdentity {
    oidcProviderConfigs?: pulumi.Input<pulumi.Input<inputs.Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig>[]>;
    trustPolicy?: pulumi.Input<string>;
}

export interface Mk8sStatusAddOnAwsWorkloadIdentityOidcProviderConfig {
    audience?: pulumi.Input<string>;
    providerUrl?: pulumi.Input<string>;
}

export interface Mk8sStatusAddOnDashboard {
    url?: pulumi.Input<string>;
}

export interface Mk8sStatusAddOnLog {
    lokiAddress?: pulumi.Input<string>;
}

export interface Mk8sStatusAddOnMetric {
    prometheusEndpoint?: pulumi.Input<string>;
    remoteWriteConfig?: pulumi.Input<string>;
}

export interface OrgAuthConfig {
    domainAutoMembers: pulumi.Input<pulumi.Input<string>[]>;
    samlOnly?: pulumi.Input<boolean>;
}

export interface OrgLoggingCloudWatchLogging {
    credentials: pulumi.Input<string>;
    groupName: pulumi.Input<string>;
    region: pulumi.Input<string>;
    retentionDays?: pulumi.Input<number>;
    streamName: pulumi.Input<string>;
}

export interface OrgLoggingCoralogixLogging {
    app: pulumi.Input<string>;
    cluster: pulumi.Input<string>;
    credentials: pulumi.Input<string>;
    subsystem: pulumi.Input<string>;
}

export interface OrgLoggingDatadogLogging {
    credentials: pulumi.Input<string>;
    host: pulumi.Input<string>;
}

export interface OrgLoggingElasticLogging {
    aws?: pulumi.Input<inputs.OrgLoggingElasticLoggingAws>;
    elasticCloud?: pulumi.Input<inputs.OrgLoggingElasticLoggingElasticCloud>;
    generic?: pulumi.Input<inputs.OrgLoggingElasticLoggingGeneric>;
}

export interface OrgLoggingElasticLoggingAws {
    credentials: pulumi.Input<string>;
    host: pulumi.Input<string>;
    index: pulumi.Input<string>;
    port: pulumi.Input<number>;
    region: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface OrgLoggingElasticLoggingElasticCloud {
    cloudId: pulumi.Input<string>;
    credentials: pulumi.Input<string>;
    index: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface OrgLoggingElasticLoggingGeneric {
    credentials: pulumi.Input<string>;
    host: pulumi.Input<string>;
    index: pulumi.Input<string>;
    path: pulumi.Input<string>;
    port: pulumi.Input<number>;
    type: pulumi.Input<string>;
}

export interface OrgLoggingFluentdLogging {
    host: pulumi.Input<string>;
    port?: pulumi.Input<number>;
}

export interface OrgLoggingLogzioLogging {
    credentials: pulumi.Input<string>;
    listenerHost: pulumi.Input<string>;
}

export interface OrgLoggingS3Logging {
    bucket: pulumi.Input<string>;
    credentials: pulumi.Input<string>;
    prefix?: pulumi.Input<string>;
    region: pulumi.Input<string>;
}

export interface OrgLoggingStackdriverLogging {
    credentials: pulumi.Input<string>;
    location: pulumi.Input<string>;
}

export interface OrgLoggingSyslogLogging {
    format?: pulumi.Input<string>;
    host: pulumi.Input<string>;
    mode?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    severity?: pulumi.Input<number>;
}

export interface OrgObservability {
    logsRetentionDays?: pulumi.Input<number>;
    metricsRetentionDays?: pulumi.Input<number>;
    tracesRetentionDays?: pulumi.Input<number>;
}

export interface OrgSecurity {
    threatDetection?: pulumi.Input<inputs.OrgSecurityThreatDetection>;
}

export interface OrgSecurityThreatDetection {
    enabled?: pulumi.Input<boolean>;
    minimumSeverity?: pulumi.Input<string>;
    syslog?: pulumi.Input<inputs.OrgSecurityThreatDetectionSyslog>;
}

export interface OrgSecurityThreatDetectionSyslog {
    host?: pulumi.Input<string>;
    port: pulumi.Input<number>;
    transport?: pulumi.Input<string>;
}

export interface OrgStatus {
    accountLink?: pulumi.Input<string>;
    active?: pulumi.Input<boolean>;
}

export interface OrgTracingControlplaneTracing {
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    sampling: pulumi.Input<number>;
}

export interface OrgTracingLightstepTracing {
    credentials?: pulumi.Input<string>;
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpoint: pulumi.Input<string>;
    sampling: pulumi.Input<number>;
}

export interface OrgTracingOtelTracing {
    customTags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    endpoint: pulumi.Input<string>;
    sampling: pulumi.Input<number>;
}

export interface PolicyBinding {
    permissions: pulumi.Input<pulumi.Input<string>[]>;
    principalLinks: pulumi.Input<pulumi.Input<string>[]>;
}

export interface PolicyTargetQuery {
    fetch?: pulumi.Input<string>;
    spec?: pulumi.Input<inputs.PolicyTargetQuerySpec>;
}

export interface PolicyTargetQuerySpec {
    match?: pulumi.Input<string>;
    terms?: pulumi.Input<pulumi.Input<inputs.PolicyTargetQuerySpecTerm>[]>;
}

export interface PolicyTargetQuerySpecTerm {
    op?: pulumi.Input<string>;
    property?: pulumi.Input<string>;
    tag?: pulumi.Input<string>;
    value?: pulumi.Input<string>;
}

export interface SecretAws {
    accessKey: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    roleArn?: pulumi.Input<string>;
    secretKey: pulumi.Input<string>;
}

export interface SecretAzureConnector {
    code: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface SecretEcr {
    accessKey: pulumi.Input<string>;
    externalId?: pulumi.Input<string>;
    repos: pulumi.Input<pulumi.Input<string>[]>;
    roleArn?: pulumi.Input<string>;
    secretKey: pulumi.Input<string>;
}

export interface SecretKeypair {
    passphrase?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    secretKey: pulumi.Input<string>;
}

export interface SecretNatsAccount {
    accountId: pulumi.Input<string>;
    privateKey: pulumi.Input<string>;
}

export interface SecretOpaque {
    encoding?: pulumi.Input<string>;
    payload: pulumi.Input<string>;
}

export interface SecretTls {
    cert: pulumi.Input<string>;
    chain?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface SecretUserpass {
    encoding?: pulumi.Input<string>;
    password: pulumi.Input<string>;
    username: pulumi.Input<string>;
}

export interface VolumeSetAutoscaling {
    maxCapacity: pulumi.Input<number>;
    minFreePercentage: pulumi.Input<number>;
    scalingFactor: pulumi.Input<number>;
}

export interface VolumeSetSnapshots {
    createFinalSnapshot?: pulumi.Input<boolean>;
    retentionDuration?: pulumi.Input<string>;
    schedule?: pulumi.Input<string>;
}

export interface VolumeSetStatus {
    bindingId?: pulumi.Input<string>;
    locations?: pulumi.Input<pulumi.Input<string>[]>;
    parentId?: pulumi.Input<string>;
    usedByWorkload?: pulumi.Input<string>;
}

export interface WorkloadContainer {
    args?: pulumi.Input<pulumi.Input<string>[]>;
    command?: pulumi.Input<string>;
    cpu?: pulumi.Input<string>;
    env?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    gpuNvidia?: pulumi.Input<inputs.WorkloadContainerGpuNvidia>;
    image: pulumi.Input<string>;
    inheritEnv?: pulumi.Input<boolean>;
    lifecycle?: pulumi.Input<inputs.WorkloadContainerLifecycle>;
    livenessProbe?: pulumi.Input<inputs.WorkloadContainerLivenessProbe>;
    memory?: pulumi.Input<string>;
    metrics?: pulumi.Input<inputs.WorkloadContainerMetrics>;
    minCpu?: pulumi.Input<string>;
    minMemory?: pulumi.Input<string>;
    name: pulumi.Input<string>;
    /**
     * @deprecated The 'port' attribute will be deprecated in the next major version. Use the 'ports' attribute instead.
     */
    port?: pulumi.Input<number>;
    ports?: pulumi.Input<pulumi.Input<inputs.WorkloadContainerPort>[]>;
    readinessProbe?: pulumi.Input<inputs.WorkloadContainerReadinessProbe>;
    volumes?: pulumi.Input<pulumi.Input<inputs.WorkloadContainerVolume>[]>;
    workingDirectory?: pulumi.Input<string>;
}

export interface WorkloadContainerGpuNvidia {
    model: pulumi.Input<string>;
    quantity: pulumi.Input<number>;
}

export interface WorkloadContainerLifecycle {
    postStart?: pulumi.Input<inputs.WorkloadContainerLifecyclePostStart>;
    preStop?: pulumi.Input<inputs.WorkloadContainerLifecyclePreStop>;
}

export interface WorkloadContainerLifecyclePostStart {
    exec: pulumi.Input<inputs.WorkloadContainerLifecyclePostStartExec>;
}

export interface WorkloadContainerLifecyclePostStartExec {
    commands: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkloadContainerLifecyclePreStop {
    exec: pulumi.Input<inputs.WorkloadContainerLifecyclePreStopExec>;
}

export interface WorkloadContainerLifecyclePreStopExec {
    commands: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkloadContainerLivenessProbe {
    exec?: pulumi.Input<inputs.WorkloadContainerLivenessProbeExec>;
    failureThreshold?: pulumi.Input<number>;
    grpc?: pulumi.Input<inputs.WorkloadContainerLivenessProbeGrpc>;
    httpGet?: pulumi.Input<inputs.WorkloadContainerLivenessProbeHttpGet>;
    initialDelaySeconds?: pulumi.Input<number>;
    periodSeconds?: pulumi.Input<number>;
    successThreshold?: pulumi.Input<number>;
    tcpSocket?: pulumi.Input<inputs.WorkloadContainerLivenessProbeTcpSocket>;
    timeoutSeconds?: pulumi.Input<number>;
}

export interface WorkloadContainerLivenessProbeExec {
    commands: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkloadContainerLivenessProbeGrpc {
    port?: pulumi.Input<number>;
}

export interface WorkloadContainerLivenessProbeHttpGet {
    httpHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    path?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    scheme?: pulumi.Input<string>;
}

export interface WorkloadContainerLivenessProbeTcpSocket {
    port?: pulumi.Input<number>;
}

export interface WorkloadContainerMetrics {
    path: pulumi.Input<string>;
    port: pulumi.Input<number>;
}

export interface WorkloadContainerPort {
    number: pulumi.Input<number>;
    protocol?: pulumi.Input<string>;
}

export interface WorkloadContainerReadinessProbe {
    exec?: pulumi.Input<inputs.WorkloadContainerReadinessProbeExec>;
    failureThreshold?: pulumi.Input<number>;
    grpc?: pulumi.Input<inputs.WorkloadContainerReadinessProbeGrpc>;
    httpGet?: pulumi.Input<inputs.WorkloadContainerReadinessProbeHttpGet>;
    initialDelaySeconds?: pulumi.Input<number>;
    periodSeconds?: pulumi.Input<number>;
    successThreshold?: pulumi.Input<number>;
    tcpSocket?: pulumi.Input<inputs.WorkloadContainerReadinessProbeTcpSocket>;
    timeoutSeconds?: pulumi.Input<number>;
}

export interface WorkloadContainerReadinessProbeExec {
    commands: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkloadContainerReadinessProbeGrpc {
    port?: pulumi.Input<number>;
}

export interface WorkloadContainerReadinessProbeHttpGet {
    httpHeaders?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    path?: pulumi.Input<string>;
    port?: pulumi.Input<number>;
    scheme?: pulumi.Input<string>;
}

export interface WorkloadContainerReadinessProbeTcpSocket {
    port?: pulumi.Input<number>;
}

export interface WorkloadContainerVolume {
    path: pulumi.Input<string>;
    recoveryPolicy?: pulumi.Input<string>;
    uri: pulumi.Input<string>;
}

export interface WorkloadFirewallSpec {
    external?: pulumi.Input<inputs.WorkloadFirewallSpecExternal>;
    internal?: pulumi.Input<inputs.WorkloadFirewallSpecInternal>;
}

export interface WorkloadFirewallSpecExternal {
    inboundAllowCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    outboundAllowCidrs?: pulumi.Input<pulumi.Input<string>[]>;
    outboundAllowHostnames?: pulumi.Input<pulumi.Input<string>[]>;
    outboundAllowPorts?: pulumi.Input<pulumi.Input<inputs.WorkloadFirewallSpecExternalOutboundAllowPort>[]>;
}

export interface WorkloadFirewallSpecExternalOutboundAllowPort {
    number: pulumi.Input<number>;
    protocol: pulumi.Input<string>;
}

export interface WorkloadFirewallSpecInternal {
    inboundAllowType?: pulumi.Input<string>;
    inboundAllowWorkloads?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkloadJob {
    activeDeadlineSeconds?: pulumi.Input<number>;
    concurrencyPolicy?: pulumi.Input<string>;
    historyLimit?: pulumi.Input<number>;
    restartPolicy?: pulumi.Input<string>;
    schedule: pulumi.Input<string>;
}

export interface WorkloadLocalOption {
    autoscaling?: pulumi.Input<inputs.WorkloadLocalOptionAutoscaling>;
    capacityAi?: pulumi.Input<boolean>;
    debug?: pulumi.Input<boolean>;
    location: pulumi.Input<string>;
    suspend?: pulumi.Input<boolean>;
    timeoutSeconds?: pulumi.Input<number>;
}

export interface WorkloadLocalOptionAutoscaling {
    maxConcurrency?: pulumi.Input<number>;
    maxScale?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
    metricPercentile?: pulumi.Input<string>;
    minScale?: pulumi.Input<number>;
    scaleToZeroDelay?: pulumi.Input<number>;
    target?: pulumi.Input<number>;
}

export interface WorkloadOptions {
    autoscaling?: pulumi.Input<inputs.WorkloadOptionsAutoscaling>;
    capacityAi?: pulumi.Input<boolean>;
    debug?: pulumi.Input<boolean>;
    suspend?: pulumi.Input<boolean>;
    timeoutSeconds?: pulumi.Input<number>;
}

export interface WorkloadOptionsAutoscaling {
    maxConcurrency?: pulumi.Input<number>;
    maxScale?: pulumi.Input<number>;
    metric?: pulumi.Input<string>;
    metricPercentile?: pulumi.Input<string>;
    minScale?: pulumi.Input<number>;
    scaleToZeroDelay?: pulumi.Input<number>;
    target?: pulumi.Input<number>;
}

export interface WorkloadRolloutOptions {
    maxSurgeReplicas?: pulumi.Input<string>;
    maxUnavailableReplicas?: pulumi.Input<string>;
    minReadySeconds?: pulumi.Input<number>;
    scalingPolicy?: pulumi.Input<string>;
}

export interface WorkloadSecurityOptions {
    fileSystemGroupId: pulumi.Input<number>;
}

export interface WorkloadSidecar {
    envoy: pulumi.Input<string>;
}

export interface WorkloadStatus {
    canonicalEndpoint?: pulumi.Input<string>;
    currentReplicaCount?: pulumi.Input<number>;
    endpoint?: pulumi.Input<string>;
    healthChecks?: pulumi.Input<pulumi.Input<inputs.WorkloadStatusHealthCheck>[]>;
    internalName?: pulumi.Input<string>;
    parentId?: pulumi.Input<string>;
    resolvedImages?: pulumi.Input<pulumi.Input<inputs.WorkloadStatusResolvedImage>[]>;
}

export interface WorkloadStatusHealthCheck {
    active: pulumi.Input<boolean>;
    code?: pulumi.Input<number>;
    failures?: pulumi.Input<number>;
    lastChecked?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    success?: pulumi.Input<boolean>;
    successes?: pulumi.Input<number>;
}

export interface WorkloadStatusResolvedImage {
    images?: pulumi.Input<pulumi.Input<inputs.WorkloadStatusResolvedImageImage>[]>;
    resolvedAt?: pulumi.Input<string>;
    resolvedForVersion?: pulumi.Input<number>;
}

export interface WorkloadStatusResolvedImageImage {
    digest?: pulumi.Input<string>;
    manifests?: pulumi.Input<pulumi.Input<inputs.WorkloadStatusResolvedImageImageManifest>[]>;
}

export interface WorkloadStatusResolvedImageImageManifest {
    digest?: pulumi.Input<string>;
    image?: pulumi.Input<string>;
    mediaType?: pulumi.Input<string>;
    platform?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
