// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ServiceAccountKey extends pulumi.CustomResource {
    /**
     * Get an existing ServiceAccountKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServiceAccountKeyState, opts?: pulumi.CustomResourceOptions): ServiceAccountKey {
        return new ServiceAccountKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cpln:index/serviceAccountKey:ServiceAccountKey';

    /**
     * Returns true if the given object is an instance of ServiceAccountKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ServiceAccountKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ServiceAccountKey.__pulumiType;
    }

    /**
     * The timestamp, in UTC, when the key was created.
     */
    declare public /*out*/ readonly created: pulumi.Output<string>;
    /**
     * Description of the Service Account Key.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * The generated key.
     */
    declare public /*out*/ readonly key: pulumi.Output<string>;
    /**
     * The generated name of the key.
     */
    declare public /*out*/ readonly name: pulumi.Output<string>;
    /**
     * The name of an existing Service Account this key will belong to.
     */
    declare public readonly serviceAccountName: pulumi.Output<string>;

    /**
     * Create a ServiceAccountKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServiceAccountKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServiceAccountKeyArgs | ServiceAccountKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ServiceAccountKeyState | undefined;
            resourceInputs["created"] = state?.created;
            resourceInputs["description"] = state?.description;
            resourceInputs["key"] = state?.key;
            resourceInputs["name"] = state?.name;
            resourceInputs["serviceAccountName"] = state?.serviceAccountName;
        } else {
            const args = argsOrState as ServiceAccountKeyArgs | undefined;
            if (args?.description === undefined && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if (args?.serviceAccountName === undefined && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountName'");
            }
            resourceInputs["description"] = args?.description;
            resourceInputs["serviceAccountName"] = args?.serviceAccountName;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["key"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["key"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ServiceAccountKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ServiceAccountKey resources.
 */
export interface ServiceAccountKeyState {
    /**
     * The timestamp, in UTC, when the key was created.
     */
    created?: pulumi.Input<string>;
    /**
     * Description of the Service Account Key.
     */
    description?: pulumi.Input<string>;
    /**
     * The generated key.
     */
    key?: pulumi.Input<string>;
    /**
     * The generated name of the key.
     */
    name?: pulumi.Input<string>;
    /**
     * The name of an existing Service Account this key will belong to.
     */
    serviceAccountName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ServiceAccountKey resource.
 */
export interface ServiceAccountKeyArgs {
    /**
     * Description of the Service Account Key.
     */
    description: pulumi.Input<string>;
    /**
     * The name of an existing Service Account this key will belong to.
     */
    serviceAccountName: pulumi.Input<string>;
}
