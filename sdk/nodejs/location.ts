// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class Location extends pulumi.CustomResource {
    /**
     * Get an existing Location resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LocationState, opts?: pulumi.CustomResourceOptions): Location {
        return new Location(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cpln:index/location:Location';

    /**
     * Returns true if the given object is an instance of Location.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Location {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Location.__pulumiType;
    }

    /**
     * Cloud Provider of the location.
     */
    public /*out*/ readonly cloudProvider!: pulumi.Output<string>;
    /**
     * The ID, in GUID format, of the location.
     */
    public /*out*/ readonly cplnId!: pulumi.Output<string>;
    /**
     * Description of the location.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    /**
     * Indication if location is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    public /*out*/ readonly geos!: pulumi.Output<outputs.LocationGeo[]>;
    /**
     * A list of IP ranges of the location.
     */
    public /*out*/ readonly ipRanges!: pulumi.Output<string[]>;
    /**
     * Name of the location.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Region of the location.
     */
    public /*out*/ readonly region!: pulumi.Output<string>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a Location resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LocationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LocationArgs | LocationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LocationState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["cplnId"] = state ? state.cplnId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["geos"] = state ? state.geos : undefined;
            resourceInputs["ipRanges"] = state ? state.ipRanges : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["region"] = state ? state.region : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as LocationArgs | undefined;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["cloudProvider"] = undefined /*out*/;
            resourceInputs["cplnId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["geos"] = undefined /*out*/;
            resourceInputs["ipRanges"] = undefined /*out*/;
            resourceInputs["region"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Location.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Location resources.
 */
export interface LocationState {
    /**
     * Cloud Provider of the location.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * The ID, in GUID format, of the location.
     */
    cplnId?: pulumi.Input<string>;
    /**
     * Description of the location.
     */
    description?: pulumi.Input<string>;
    /**
     * Indication if location is enabled.
     */
    enabled?: pulumi.Input<boolean>;
    geos?: pulumi.Input<pulumi.Input<inputs.LocationGeo>[]>;
    /**
     * A list of IP ranges of the location.
     */
    ipRanges?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Name of the location.
     */
    name?: pulumi.Input<string>;
    /**
     * Region of the location.
     */
    region?: pulumi.Input<string>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a Location resource.
 */
export interface LocationArgs {
    /**
     * Indication if location is enabled.
     */
    enabled: pulumi.Input<boolean>;
    /**
     * Name of the location.
     */
    name?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
