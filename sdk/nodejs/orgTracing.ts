// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class OrgTracing extends pulumi.CustomResource {
    /**
     * Get an existing OrgTracing resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrgTracingState, opts?: pulumi.CustomResourceOptions): OrgTracing {
        return new OrgTracing(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cpln:index/orgTracing:OrgTracing';

    /**
     * Returns true if the given object is an instance of OrgTracing.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrgTracing {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrgTracing.__pulumiType;
    }

    public readonly controlplaneTracing!: pulumi.Output<outputs.OrgTracingControlplaneTracing | undefined>;
    /**
     * The ID, in GUID format, of the Org.
     */
    public /*out*/ readonly cplnId!: pulumi.Output<string>;
    /**
     * Description of the Org.
     */
    public /*out*/ readonly description!: pulumi.Output<string>;
    public readonly lightstepTracing!: pulumi.Output<outputs.OrgTracingLightstepTracing | undefined>;
    /**
     * Name of the Org.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    public readonly otelTracing!: pulumi.Output<outputs.OrgTracingOtelTracing | undefined>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    public /*out*/ readonly selfLink!: pulumi.Output<string>;
    /**
     * Key-value map of resource tags.
     */
    public /*out*/ readonly tags!: pulumi.Output<{[key: string]: string}>;

    /**
     * Create a OrgTracing resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OrgTracingArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrgTracingArgs | OrgTracingState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrgTracingState | undefined;
            resourceInputs["controlplaneTracing"] = state ? state.controlplaneTracing : undefined;
            resourceInputs["cplnId"] = state ? state.cplnId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["lightstepTracing"] = state ? state.lightstepTracing : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["otelTracing"] = state ? state.otelTracing : undefined;
            resourceInputs["selfLink"] = state ? state.selfLink : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
        } else {
            const args = argsOrState as OrgTracingArgs | undefined;
            resourceInputs["controlplaneTracing"] = args ? args.controlplaneTracing : undefined;
            resourceInputs["lightstepTracing"] = args ? args.lightstepTracing : undefined;
            resourceInputs["otelTracing"] = args ? args.otelTracing : undefined;
            resourceInputs["cplnId"] = undefined /*out*/;
            resourceInputs["description"] = undefined /*out*/;
            resourceInputs["name"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["tags"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrgTracing.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrgTracing resources.
 */
export interface OrgTracingState {
    controlplaneTracing?: pulumi.Input<inputs.OrgTracingControlplaneTracing>;
    /**
     * The ID, in GUID format, of the Org.
     */
    cplnId?: pulumi.Input<string>;
    /**
     * Description of the Org.
     */
    description?: pulumi.Input<string>;
    lightstepTracing?: pulumi.Input<inputs.OrgTracingLightstepTracing>;
    /**
     * Name of the Org.
     */
    name?: pulumi.Input<string>;
    otelTracing?: pulumi.Input<inputs.OrgTracingOtelTracing>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

/**
 * The set of arguments for constructing a OrgTracing resource.
 */
export interface OrgTracingArgs {
    controlplaneTracing?: pulumi.Input<inputs.OrgTracingControlplaneTracing>;
    lightstepTracing?: pulumi.Input<inputs.OrgTracingLightstepTracing>;
    otelTracing?: pulumi.Input<inputs.OrgTracingOtelTracing>;
}
