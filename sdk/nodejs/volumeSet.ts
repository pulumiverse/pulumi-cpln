// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class VolumeSet extends pulumi.CustomResource {
    /**
     * Get an existing VolumeSet resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: VolumeSetState, opts?: pulumi.CustomResourceOptions): VolumeSet {
        return new VolumeSet(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'cpln:index/volumeSet:VolumeSet';

    /**
     * Returns true if the given object is an instance of VolumeSet.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is VolumeSet {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VolumeSet.__pulumiType;
    }

    /**
     * Automated adjustment of the volume set's capacity based on predefined metrics or conditions.
     */
    declare public readonly autoscaling: pulumi.Output<outputs.VolumeSetAutoscaling | undefined>;
    /**
     * The ID, in GUID format, of the volume set.
     */
    declare public /*out*/ readonly cplnId: pulumi.Output<string>;
    /**
     * Configuration for customer-managed encryption keys, keyed by region.
     */
    declare public readonly customEncryption: pulumi.Output<outputs.VolumeSetCustomEncryption | undefined>;
    /**
     * Description of the volume set.
     */
    declare public readonly description: pulumi.Output<string>;
    /**
     * Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`.
     */
    declare public readonly fileSystemType: pulumi.Output<string>;
    /**
     * Name of the associated GVC.
     */
    declare public readonly gvc: pulumi.Output<string>;
    /**
     * The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd` is `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.
     */
    declare public readonly initialCapacity: pulumi.Output<number>;
    /**
     * A list of mount options to use when mounting volumes in this set.
     */
    declare public readonly mountOptions: pulumi.Output<outputs.VolumeSetMountOptions | undefined>;
    /**
     * Name of the volume set.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or `high-throughput-ssd`.
     */
    declare public readonly performanceClass: pulumi.Output<string>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    declare public /*out*/ readonly selfLink: pulumi.Output<string>;
    /**
     * Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.
     */
    declare public readonly snapshots: pulumi.Output<outputs.VolumeSetSnapshots | undefined>;
    /**
     * Status of the Volume Set.
     */
    declare public /*out*/ readonly statuses: pulumi.Output<outputs.VolumeSetStatus[]>;
    /**
     * For self-hosted locations only. The storage class used for volumes in this set will be {performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be {performanceClass}-{fileSystemType}
     */
    declare public readonly storageClassSuffix: pulumi.Output<string | undefined>;
    /**
     * Key-value map of resource tags.
     */
    declare public readonly tags: pulumi.Output<{[key: string]: string}>;
    /**
     * Output used when linking a volume set to a workload.
     */
    declare public /*out*/ readonly volumesetLink: pulumi.Output<string>;

    /**
     * Create a VolumeSet resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: VolumeSetArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: VolumeSetArgs | VolumeSetState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as VolumeSetState | undefined;
            resourceInputs["autoscaling"] = state?.autoscaling;
            resourceInputs["cplnId"] = state?.cplnId;
            resourceInputs["customEncryption"] = state?.customEncryption;
            resourceInputs["description"] = state?.description;
            resourceInputs["fileSystemType"] = state?.fileSystemType;
            resourceInputs["gvc"] = state?.gvc;
            resourceInputs["initialCapacity"] = state?.initialCapacity;
            resourceInputs["mountOptions"] = state?.mountOptions;
            resourceInputs["name"] = state?.name;
            resourceInputs["performanceClass"] = state?.performanceClass;
            resourceInputs["selfLink"] = state?.selfLink;
            resourceInputs["snapshots"] = state?.snapshots;
            resourceInputs["statuses"] = state?.statuses;
            resourceInputs["storageClassSuffix"] = state?.storageClassSuffix;
            resourceInputs["tags"] = state?.tags;
            resourceInputs["volumesetLink"] = state?.volumesetLink;
        } else {
            const args = argsOrState as VolumeSetArgs | undefined;
            if (args?.gvc === undefined && !opts.urn) {
                throw new Error("Missing required property 'gvc'");
            }
            if (args?.initialCapacity === undefined && !opts.urn) {
                throw new Error("Missing required property 'initialCapacity'");
            }
            if (args?.performanceClass === undefined && !opts.urn) {
                throw new Error("Missing required property 'performanceClass'");
            }
            resourceInputs["autoscaling"] = args?.autoscaling;
            resourceInputs["customEncryption"] = args?.customEncryption;
            resourceInputs["description"] = args?.description;
            resourceInputs["fileSystemType"] = args?.fileSystemType;
            resourceInputs["gvc"] = args?.gvc;
            resourceInputs["initialCapacity"] = args?.initialCapacity;
            resourceInputs["mountOptions"] = args?.mountOptions;
            resourceInputs["name"] = args?.name;
            resourceInputs["performanceClass"] = args?.performanceClass;
            resourceInputs["snapshots"] = args?.snapshots;
            resourceInputs["storageClassSuffix"] = args?.storageClassSuffix;
            resourceInputs["tags"] = args?.tags;
            resourceInputs["cplnId"] = undefined /*out*/;
            resourceInputs["selfLink"] = undefined /*out*/;
            resourceInputs["statuses"] = undefined /*out*/;
            resourceInputs["volumesetLink"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(VolumeSet.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering VolumeSet resources.
 */
export interface VolumeSetState {
    /**
     * Automated adjustment of the volume set's capacity based on predefined metrics or conditions.
     */
    autoscaling?: pulumi.Input<inputs.VolumeSetAutoscaling>;
    /**
     * The ID, in GUID format, of the volume set.
     */
    cplnId?: pulumi.Input<string>;
    /**
     * Configuration for customer-managed encryption keys, keyed by region.
     */
    customEncryption?: pulumi.Input<inputs.VolumeSetCustomEncryption>;
    /**
     * Description of the volume set.
     */
    description?: pulumi.Input<string>;
    /**
     * Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`.
     */
    fileSystemType?: pulumi.Input<string>;
    /**
     * Name of the associated GVC.
     */
    gvc?: pulumi.Input<string>;
    /**
     * The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd` is `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.
     */
    initialCapacity?: pulumi.Input<number>;
    /**
     * A list of mount options to use when mounting volumes in this set.
     */
    mountOptions?: pulumi.Input<inputs.VolumeSetMountOptions>;
    /**
     * Name of the volume set.
     */
    name?: pulumi.Input<string>;
    /**
     * Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or `high-throughput-ssd`.
     */
    performanceClass?: pulumi.Input<string>;
    /**
     * Full link to this resource. Can be referenced by other resources.
     */
    selfLink?: pulumi.Input<string>;
    /**
     * Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.
     */
    snapshots?: pulumi.Input<inputs.VolumeSetSnapshots>;
    /**
     * Status of the Volume Set.
     */
    statuses?: pulumi.Input<pulumi.Input<inputs.VolumeSetStatus>[]>;
    /**
     * For self-hosted locations only. The storage class used for volumes in this set will be {performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be {performanceClass}-{fileSystemType}
     */
    storageClassSuffix?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Output used when linking a volume set to a workload.
     */
    volumesetLink?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a VolumeSet resource.
 */
export interface VolumeSetArgs {
    /**
     * Automated adjustment of the volume set's capacity based on predefined metrics or conditions.
     */
    autoscaling?: pulumi.Input<inputs.VolumeSetAutoscaling>;
    /**
     * Configuration for customer-managed encryption keys, keyed by region.
     */
    customEncryption?: pulumi.Input<inputs.VolumeSetCustomEncryption>;
    /**
     * Description of the volume set.
     */
    description?: pulumi.Input<string>;
    /**
     * Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`.
     */
    fileSystemType?: pulumi.Input<string>;
    /**
     * Name of the associated GVC.
     */
    gvc: pulumi.Input<string>;
    /**
     * The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd` is `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.
     */
    initialCapacity: pulumi.Input<number>;
    /**
     * A list of mount options to use when mounting volumes in this set.
     */
    mountOptions?: pulumi.Input<inputs.VolumeSetMountOptions>;
    /**
     * Name of the volume set.
     */
    name?: pulumi.Input<string>;
    /**
     * Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or `high-throughput-ssd`.
     */
    performanceClass: pulumi.Input<string>;
    /**
     * Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.
     */
    snapshots?: pulumi.Input<inputs.VolumeSetSnapshots>;
    /**
     * For self-hosted locations only. The storage class used for volumes in this set will be {performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be {performanceClass}-{fileSystemType}
     */
    storageClassSuffix?: pulumi.Input<string>;
    /**
     * Key-value map of resource tags.
     */
    tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
