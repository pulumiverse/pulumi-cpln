// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AgentArgs, AgentState } from "./agent";
export type Agent = import("./agent").Agent;
export const Agent: typeof import("./agent").Agent = null as any;
utilities.lazyLoad(exports, ["Agent"], () => require("./agent"));

export { AuditContextArgs, AuditContextState } from "./auditContext";
export type AuditContext = import("./auditContext").AuditContext;
export const AuditContext: typeof import("./auditContext").AuditContext = null as any;
utilities.lazyLoad(exports, ["AuditContext"], () => require("./auditContext"));

export { CloudAccountArgs, CloudAccountState } from "./cloudAccount";
export type CloudAccount = import("./cloudAccount").CloudAccount;
export const CloudAccount: typeof import("./cloudAccount").CloudAccount = null as any;
utilities.lazyLoad(exports, ["CloudAccount"], () => require("./cloudAccount"));

export { CustomLocationArgs, CustomLocationState } from "./customLocation";
export type CustomLocation = import("./customLocation").CustomLocation;
export const CustomLocation: typeof import("./customLocation").CustomLocation = null as any;
utilities.lazyLoad(exports, ["CustomLocation"], () => require("./customLocation"));

export { DomainArgs, DomainState } from "./domain";
export type Domain = import("./domain").Domain;
export const Domain: typeof import("./domain").Domain = null as any;
utilities.lazyLoad(exports, ["Domain"], () => require("./domain"));

export { DomainRouteArgs, DomainRouteState } from "./domainRoute";
export type DomainRoute = import("./domainRoute").DomainRoute;
export const DomainRoute: typeof import("./domainRoute").DomainRoute = null as any;
utilities.lazyLoad(exports, ["DomainRoute"], () => require("./domainRoute"));

export { GetCloudAccountResult } from "./getCloudAccount";
export const getCloudAccount: typeof import("./getCloudAccount").getCloudAccount = null as any;
export const getCloudAccountOutput: typeof import("./getCloudAccount").getCloudAccountOutput = null as any;
utilities.lazyLoad(exports, ["getCloudAccount","getCloudAccountOutput"], () => require("./getCloudAccount"));

export { GetGvcArgs, GetGvcResult, GetGvcOutputArgs } from "./getGvc";
export const getGvc: typeof import("./getGvc").getGvc = null as any;
export const getGvcOutput: typeof import("./getGvc").getGvcOutput = null as any;
utilities.lazyLoad(exports, ["getGvc","getGvcOutput"], () => require("./getGvc"));

export { GetImageArgs, GetImageResult, GetImageOutputArgs } from "./getImage";
export const getImage: typeof import("./getImage").getImage = null as any;
export const getImageOutput: typeof import("./getImage").getImageOutput = null as any;
utilities.lazyLoad(exports, ["getImage","getImageOutput"], () => require("./getImage"));

export { GetImagesArgs, GetImagesResult, GetImagesOutputArgs } from "./getImages";
export const getImages: typeof import("./getImages").getImages = null as any;
export const getImagesOutput: typeof import("./getImages").getImagesOutput = null as any;
utilities.lazyLoad(exports, ["getImages","getImagesOutput"], () => require("./getImages"));

export { GetLocationArgs, GetLocationResult, GetLocationOutputArgs } from "./getLocation";
export const getLocation: typeof import("./getLocation").getLocation = null as any;
export const getLocationOutput: typeof import("./getLocation").getLocationOutput = null as any;
utilities.lazyLoad(exports, ["getLocation","getLocationOutput"], () => require("./getLocation"));

export { GetLocationsResult } from "./getLocations";
export const getLocations: typeof import("./getLocations").getLocations = null as any;
export const getLocationsOutput: typeof import("./getLocations").getLocationsOutput = null as any;
utilities.lazyLoad(exports, ["getLocations","getLocationsOutput"], () => require("./getLocations"));

export { GetOrgResult } from "./getOrg";
export const getOrg: typeof import("./getOrg").getOrg = null as any;
export const getOrgOutput: typeof import("./getOrg").getOrgOutput = null as any;
utilities.lazyLoad(exports, ["getOrg","getOrgOutput"], () => require("./getOrg"));

export { GetSecretArgs, GetSecretResult, GetSecretOutputArgs } from "./getSecret";
export const getSecret: typeof import("./getSecret").getSecret = null as any;
export const getSecretOutput: typeof import("./getSecret").getSecretOutput = null as any;
utilities.lazyLoad(exports, ["getSecret","getSecretOutput"], () => require("./getSecret"));

export { GroupArgs, GroupState } from "./group";
export type Group = import("./group").Group;
export const Group: typeof import("./group").Group = null as any;
utilities.lazyLoad(exports, ["Group"], () => require("./group"));

export { GvcArgs, GvcState } from "./gvc";
export type Gvc = import("./gvc").Gvc;
export const Gvc: typeof import("./gvc").Gvc = null as any;
utilities.lazyLoad(exports, ["Gvc"], () => require("./gvc"));

export { IdentityArgs, IdentityState } from "./identity";
export type Identity = import("./identity").Identity;
export const Identity: typeof import("./identity").Identity = null as any;
utilities.lazyLoad(exports, ["Identity"], () => require("./identity"));

export { IpSetArgs, IpSetState } from "./ipSet";
export type IpSet = import("./ipSet").IpSet;
export const IpSet: typeof import("./ipSet").IpSet = null as any;
utilities.lazyLoad(exports, ["IpSet"], () => require("./ipSet"));

export { LocationArgs, LocationState } from "./location";
export type Location = import("./location").Location;
export const Location: typeof import("./location").Location = null as any;
utilities.lazyLoad(exports, ["Location"], () => require("./location"));

export { Mk8sArgs, Mk8sState } from "./mk8s";
export type Mk8s = import("./mk8s").Mk8s;
export const Mk8s: typeof import("./mk8s").Mk8s = null as any;
utilities.lazyLoad(exports, ["Mk8s"], () => require("./mk8s"));

export { OrgArgs, OrgState } from "./org";
export type Org = import("./org").Org;
export const Org: typeof import("./org").Org = null as any;
utilities.lazyLoad(exports, ["Org"], () => require("./org"));

export { OrgLoggingArgs, OrgLoggingState } from "./orgLogging";
export type OrgLogging = import("./orgLogging").OrgLogging;
export const OrgLogging: typeof import("./orgLogging").OrgLogging = null as any;
utilities.lazyLoad(exports, ["OrgLogging"], () => require("./orgLogging"));

export { OrgTracingArgs, OrgTracingState } from "./orgTracing";
export type OrgTracing = import("./orgTracing").OrgTracing;
export const OrgTracing: typeof import("./orgTracing").OrgTracing = null as any;
utilities.lazyLoad(exports, ["OrgTracing"], () => require("./orgTracing"));

export { PolicyArgs, PolicyState } from "./policy";
export type Policy = import("./policy").Policy;
export const Policy: typeof import("./policy").Policy = null as any;
utilities.lazyLoad(exports, ["Policy"], () => require("./policy"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { SecretArgs, SecretState } from "./secret";
export type Secret = import("./secret").Secret;
export const Secret: typeof import("./secret").Secret = null as any;
utilities.lazyLoad(exports, ["Secret"], () => require("./secret"));

export { ServiceAccountArgs, ServiceAccountState } from "./serviceAccount";
export type ServiceAccount = import("./serviceAccount").ServiceAccount;
export const ServiceAccount: typeof import("./serviceAccount").ServiceAccount = null as any;
utilities.lazyLoad(exports, ["ServiceAccount"], () => require("./serviceAccount"));

export { ServiceAccountKeyArgs, ServiceAccountKeyState } from "./serviceAccountKey";
export type ServiceAccountKey = import("./serviceAccountKey").ServiceAccountKey;
export const ServiceAccountKey: typeof import("./serviceAccountKey").ServiceAccountKey = null as any;
utilities.lazyLoad(exports, ["ServiceAccountKey"], () => require("./serviceAccountKey"));

export { VolumeSetArgs, VolumeSetState } from "./volumeSet";
export type VolumeSet = import("./volumeSet").VolumeSet;
export const VolumeSet: typeof import("./volumeSet").VolumeSet = null as any;
utilities.lazyLoad(exports, ["VolumeSet"], () => require("./volumeSet"));

export { WorkloadArgs, WorkloadState } from "./workload";
export type Workload = import("./workload").Workload;
export const Workload: typeof import("./workload").Workload = null as any;
utilities.lazyLoad(exports, ["Workload"], () => require("./workload"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "cpln:index/agent:Agent":
                return new Agent(name, <any>undefined, { urn })
            case "cpln:index/auditContext:AuditContext":
                return new AuditContext(name, <any>undefined, { urn })
            case "cpln:index/cloudAccount:CloudAccount":
                return new CloudAccount(name, <any>undefined, { urn })
            case "cpln:index/customLocation:CustomLocation":
                return new CustomLocation(name, <any>undefined, { urn })
            case "cpln:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "cpln:index/domainRoute:DomainRoute":
                return new DomainRoute(name, <any>undefined, { urn })
            case "cpln:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "cpln:index/gvc:Gvc":
                return new Gvc(name, <any>undefined, { urn })
            case "cpln:index/identity:Identity":
                return new Identity(name, <any>undefined, { urn })
            case "cpln:index/ipSet:IpSet":
                return new IpSet(name, <any>undefined, { urn })
            case "cpln:index/location:Location":
                return new Location(name, <any>undefined, { urn })
            case "cpln:index/mk8s:Mk8s":
                return new Mk8s(name, <any>undefined, { urn })
            case "cpln:index/org:Org":
                return new Org(name, <any>undefined, { urn })
            case "cpln:index/orgLogging:OrgLogging":
                return new OrgLogging(name, <any>undefined, { urn })
            case "cpln:index/orgTracing:OrgTracing":
                return new OrgTracing(name, <any>undefined, { urn })
            case "cpln:index/policy:Policy":
                return new Policy(name, <any>undefined, { urn })
            case "cpln:index/secret:Secret":
                return new Secret(name, <any>undefined, { urn })
            case "cpln:index/serviceAccount:ServiceAccount":
                return new ServiceAccount(name, <any>undefined, { urn })
            case "cpln:index/serviceAccountKey:ServiceAccountKey":
                return new ServiceAccountKey(name, <any>undefined, { urn })
            case "cpln:index/volumeSet:VolumeSet":
                return new VolumeSet(name, <any>undefined, { urn })
            case "cpln:index/workload:Workload":
                return new Workload(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("cpln", "index/agent", _module)
pulumi.runtime.registerResourceModule("cpln", "index/auditContext", _module)
pulumi.runtime.registerResourceModule("cpln", "index/cloudAccount", _module)
pulumi.runtime.registerResourceModule("cpln", "index/customLocation", _module)
pulumi.runtime.registerResourceModule("cpln", "index/domain", _module)
pulumi.runtime.registerResourceModule("cpln", "index/domainRoute", _module)
pulumi.runtime.registerResourceModule("cpln", "index/group", _module)
pulumi.runtime.registerResourceModule("cpln", "index/gvc", _module)
pulumi.runtime.registerResourceModule("cpln", "index/identity", _module)
pulumi.runtime.registerResourceModule("cpln", "index/ipSet", _module)
pulumi.runtime.registerResourceModule("cpln", "index/location", _module)
pulumi.runtime.registerResourceModule("cpln", "index/mk8s", _module)
pulumi.runtime.registerResourceModule("cpln", "index/org", _module)
pulumi.runtime.registerResourceModule("cpln", "index/orgLogging", _module)
pulumi.runtime.registerResourceModule("cpln", "index/orgTracing", _module)
pulumi.runtime.registerResourceModule("cpln", "index/policy", _module)
pulumi.runtime.registerResourceModule("cpln", "index/secret", _module)
pulumi.runtime.registerResourceModule("cpln", "index/serviceAccount", _module)
pulumi.runtime.registerResourceModule("cpln", "index/serviceAccountKey", _module)
pulumi.runtime.registerResourceModule("cpln", "index/volumeSet", _module)
pulumi.runtime.registerResourceModule("cpln", "index/workload", _module)
pulumi.runtime.registerResourcePackage("cpln", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:cpln") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
