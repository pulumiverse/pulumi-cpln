// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"fmt"

	"github.com/blang/semver"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type module struct {
	version semver.Version
}

func (m *module) Version() semver.Version {
	return m.version
}

func (m *module) Construct(ctx *pulumi.Context, name, typ, urn string) (r pulumi.Resource, err error) {
	switch typ {
	case "cpln:index/agent:Agent":
		r = &Agent{}
	case "cpln:index/auditContext:AuditContext":
		r = &AuditContext{}
	case "cpln:index/cloudAccount:CloudAccount":
		r = &CloudAccount{}
	case "cpln:index/customLocation:CustomLocation":
		r = &CustomLocation{}
	case "cpln:index/domain:Domain":
		r = &Domain{}
	case "cpln:index/domainRoute:DomainRoute":
		r = &DomainRoute{}
	case "cpln:index/group:Group":
		r = &Group{}
	case "cpln:index/gvc:Gvc":
		r = &Gvc{}
	case "cpln:index/identity:Identity":
		r = &Identity{}
	case "cpln:index/location:Location":
		r = &Location{}
	case "cpln:index/mk8s:Mk8s":
		r = &Mk8s{}
	case "cpln:index/org:Org":
		r = &Org{}
	case "cpln:index/orgLogging:OrgLogging":
		r = &OrgLogging{}
	case "cpln:index/orgTracing:OrgTracing":
		r = &OrgTracing{}
	case "cpln:index/policy:Policy":
		r = &Policy{}
	case "cpln:index/secret:Secret":
		r = &Secret{}
	case "cpln:index/serviceAccount:ServiceAccount":
		r = &ServiceAccount{}
	case "cpln:index/serviceAccountKey:ServiceAccountKey":
		r = &ServiceAccountKey{}
	case "cpln:index/volumeSet:VolumeSet":
		r = &VolumeSet{}
	case "cpln:index/workload:Workload":
		r = &Workload{}
	default:
		return nil, fmt.Errorf("unknown resource type: %s", typ)
	}

	err = ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return
}

type pkg struct {
	version semver.Version
}

func (p *pkg) Version() semver.Version {
	return p.version
}

func (p *pkg) ConstructProvider(ctx *pulumi.Context, name, typ, urn string) (pulumi.ProviderResource, error) {
	if typ != "pulumi:providers:cpln" {
		return nil, fmt.Errorf("unknown provider type: %s", typ)
	}

	r := &Provider{}
	err := ctx.RegisterResource(typ, name, nil, r, pulumi.URN_(urn))
	return r, err
}

func init() {
	version, err := internal.PkgVersion()
	if err != nil {
		version = semver.Version{Major: 1}
	}
	pulumi.RegisterResourceModule(
		"cpln",
		"index/agent",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/auditContext",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/cloudAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/customLocation",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/domain",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/domainRoute",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/group",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/gvc",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/identity",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/location",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/mk8s",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/org",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/orgLogging",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/orgTracing",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/policy",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/secret",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/serviceAccount",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/serviceAccountKey",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/volumeSet",
		&module{version},
	)
	pulumi.RegisterResourceModule(
		"cpln",
		"index/workload",
		&module{version},
	)
	pulumi.RegisterResourcePackage(
		"cpln",
		&pkg{version},
	)
}
