// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

// Obtain the Clusterâ€™s Kubeconfig.
//
// ## Declaration
//
// ### Required
//
// - **name** (String) Name of the Mk8s.
//
// > **Note** Only one of the below can be included in the resource.
//
// - **profile** (String) The name of the cpln profile used to generate the kubeconfig file for authenticating with your Kubernetes cluster.
// - **service_account** (String) The name of an existing service account for which a key will be generated, enabling kubeconfig-based authentication with your Kubernetes cluster.
//
// ## Outputs
//
// The following attributes are exported:
//
// - **kubeconfig** (String) The Kubeconfig in YAML format.
//
// ## Example Usage
//
// ### Profile
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			new, err := cpln.NewMk8sKubeconfig(ctx, "new", &cpln.Mk8sKubeconfigArgs{
//				Profile: pulumi.String("default"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("generic-cluster-kubeconfig", new.Kubeconfig)
//			return nil
//		})
//	}
//
// ```
//
// ### Service Account
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			new, err := cpln.NewMk8sKubeconfig(ctx, "new", &cpln.Mk8sKubeconfigArgs{
//				ServiceAccount: pulumi.String("devops-sa"),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("generic-cluster-kubeconfig", new.Kubeconfig)
//			return nil
//		})
//	}
//
// ```
type Mk8sKubeconfig struct {
	pulumi.CustomResourceState

	// The Kubeconfig of your MK8s cluster in YAML format.
	Kubeconfig pulumi.StringOutput `pulumi:"kubeconfig"`
	// Name of the MK8s to create the Kubeconfig for.
	Name pulumi.StringOutput `pulumi:"name"`
	// Profile name to extract the token from.
	Profile pulumi.StringPtrOutput `pulumi:"profile"`
	// A service account to add a key to.
	ServiceAccount pulumi.StringPtrOutput `pulumi:"serviceAccount"`
}

// NewMk8sKubeconfig registers a new resource with the given unique name, arguments, and options.
func NewMk8sKubeconfig(ctx *pulumi.Context,
	name string, args *Mk8sKubeconfigArgs, opts ...pulumi.ResourceOption) (*Mk8sKubeconfig, error) {
	if args == nil {
		args = &Mk8sKubeconfigArgs{}
	}

	secrets := pulumi.AdditionalSecretOutputs([]string{
		"kubeconfig",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mk8sKubeconfig
	err := ctx.RegisterResource("cpln:index/mk8sKubeconfig:Mk8sKubeconfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMk8sKubeconfig gets an existing Mk8sKubeconfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMk8sKubeconfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Mk8sKubeconfigState, opts ...pulumi.ResourceOption) (*Mk8sKubeconfig, error) {
	var resource Mk8sKubeconfig
	err := ctx.ReadResource("cpln:index/mk8sKubeconfig:Mk8sKubeconfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mk8sKubeconfig resources.
type mk8sKubeconfigState struct {
	// The Kubeconfig of your MK8s cluster in YAML format.
	Kubeconfig *string `pulumi:"kubeconfig"`
	// Name of the MK8s to create the Kubeconfig for.
	Name *string `pulumi:"name"`
	// Profile name to extract the token from.
	Profile *string `pulumi:"profile"`
	// A service account to add a key to.
	ServiceAccount *string `pulumi:"serviceAccount"`
}

type Mk8sKubeconfigState struct {
	// The Kubeconfig of your MK8s cluster in YAML format.
	Kubeconfig pulumi.StringPtrInput
	// Name of the MK8s to create the Kubeconfig for.
	Name pulumi.StringPtrInput
	// Profile name to extract the token from.
	Profile pulumi.StringPtrInput
	// A service account to add a key to.
	ServiceAccount pulumi.StringPtrInput
}

func (Mk8sKubeconfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*mk8sKubeconfigState)(nil)).Elem()
}

type mk8sKubeconfigArgs struct {
	// Name of the MK8s to create the Kubeconfig for.
	Name *string `pulumi:"name"`
	// Profile name to extract the token from.
	Profile *string `pulumi:"profile"`
	// A service account to add a key to.
	ServiceAccount *string `pulumi:"serviceAccount"`
}

// The set of arguments for constructing a Mk8sKubeconfig resource.
type Mk8sKubeconfigArgs struct {
	// Name of the MK8s to create the Kubeconfig for.
	Name pulumi.StringPtrInput
	// Profile name to extract the token from.
	Profile pulumi.StringPtrInput
	// A service account to add a key to.
	ServiceAccount pulumi.StringPtrInput
}

func (Mk8sKubeconfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mk8sKubeconfigArgs)(nil)).Elem()
}

type Mk8sKubeconfigInput interface {
	pulumi.Input

	ToMk8sKubeconfigOutput() Mk8sKubeconfigOutput
	ToMk8sKubeconfigOutputWithContext(ctx context.Context) Mk8sKubeconfigOutput
}

func (*Mk8sKubeconfig) ElementType() reflect.Type {
	return reflect.TypeOf((**Mk8sKubeconfig)(nil)).Elem()
}

func (i *Mk8sKubeconfig) ToMk8sKubeconfigOutput() Mk8sKubeconfigOutput {
	return i.ToMk8sKubeconfigOutputWithContext(context.Background())
}

func (i *Mk8sKubeconfig) ToMk8sKubeconfigOutputWithContext(ctx context.Context) Mk8sKubeconfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Mk8sKubeconfigOutput)
}

// Mk8sKubeconfigArrayInput is an input type that accepts Mk8sKubeconfigArray and Mk8sKubeconfigArrayOutput values.
// You can construct a concrete instance of `Mk8sKubeconfigArrayInput` via:
//
//	Mk8sKubeconfigArray{ Mk8sKubeconfigArgs{...} }
type Mk8sKubeconfigArrayInput interface {
	pulumi.Input

	ToMk8sKubeconfigArrayOutput() Mk8sKubeconfigArrayOutput
	ToMk8sKubeconfigArrayOutputWithContext(context.Context) Mk8sKubeconfigArrayOutput
}

type Mk8sKubeconfigArray []Mk8sKubeconfigInput

func (Mk8sKubeconfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mk8sKubeconfig)(nil)).Elem()
}

func (i Mk8sKubeconfigArray) ToMk8sKubeconfigArrayOutput() Mk8sKubeconfigArrayOutput {
	return i.ToMk8sKubeconfigArrayOutputWithContext(context.Background())
}

func (i Mk8sKubeconfigArray) ToMk8sKubeconfigArrayOutputWithContext(ctx context.Context) Mk8sKubeconfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Mk8sKubeconfigArrayOutput)
}

// Mk8sKubeconfigMapInput is an input type that accepts Mk8sKubeconfigMap and Mk8sKubeconfigMapOutput values.
// You can construct a concrete instance of `Mk8sKubeconfigMapInput` via:
//
//	Mk8sKubeconfigMap{ "key": Mk8sKubeconfigArgs{...} }
type Mk8sKubeconfigMapInput interface {
	pulumi.Input

	ToMk8sKubeconfigMapOutput() Mk8sKubeconfigMapOutput
	ToMk8sKubeconfigMapOutputWithContext(context.Context) Mk8sKubeconfigMapOutput
}

type Mk8sKubeconfigMap map[string]Mk8sKubeconfigInput

func (Mk8sKubeconfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mk8sKubeconfig)(nil)).Elem()
}

func (i Mk8sKubeconfigMap) ToMk8sKubeconfigMapOutput() Mk8sKubeconfigMapOutput {
	return i.ToMk8sKubeconfigMapOutputWithContext(context.Background())
}

func (i Mk8sKubeconfigMap) ToMk8sKubeconfigMapOutputWithContext(ctx context.Context) Mk8sKubeconfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Mk8sKubeconfigMapOutput)
}

type Mk8sKubeconfigOutput struct{ *pulumi.OutputState }

func (Mk8sKubeconfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mk8sKubeconfig)(nil)).Elem()
}

func (o Mk8sKubeconfigOutput) ToMk8sKubeconfigOutput() Mk8sKubeconfigOutput {
	return o
}

func (o Mk8sKubeconfigOutput) ToMk8sKubeconfigOutputWithContext(ctx context.Context) Mk8sKubeconfigOutput {
	return o
}

// The Kubeconfig of your MK8s cluster in YAML format.
func (o Mk8sKubeconfigOutput) Kubeconfig() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8sKubeconfig) pulumi.StringOutput { return v.Kubeconfig }).(pulumi.StringOutput)
}

// Name of the MK8s to create the Kubeconfig for.
func (o Mk8sKubeconfigOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8sKubeconfig) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Profile name to extract the token from.
func (o Mk8sKubeconfigOutput) Profile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mk8sKubeconfig) pulumi.StringPtrOutput { return v.Profile }).(pulumi.StringPtrOutput)
}

// A service account to add a key to.
func (o Mk8sKubeconfigOutput) ServiceAccount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mk8sKubeconfig) pulumi.StringPtrOutput { return v.ServiceAccount }).(pulumi.StringPtrOutput)
}

type Mk8sKubeconfigArrayOutput struct{ *pulumi.OutputState }

func (Mk8sKubeconfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mk8sKubeconfig)(nil)).Elem()
}

func (o Mk8sKubeconfigArrayOutput) ToMk8sKubeconfigArrayOutput() Mk8sKubeconfigArrayOutput {
	return o
}

func (o Mk8sKubeconfigArrayOutput) ToMk8sKubeconfigArrayOutputWithContext(ctx context.Context) Mk8sKubeconfigArrayOutput {
	return o
}

func (o Mk8sKubeconfigArrayOutput) Index(i pulumi.IntInput) Mk8sKubeconfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mk8sKubeconfig {
		return vs[0].([]*Mk8sKubeconfig)[vs[1].(int)]
	}).(Mk8sKubeconfigOutput)
}

type Mk8sKubeconfigMapOutput struct{ *pulumi.OutputState }

func (Mk8sKubeconfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mk8sKubeconfig)(nil)).Elem()
}

func (o Mk8sKubeconfigMapOutput) ToMk8sKubeconfigMapOutput() Mk8sKubeconfigMapOutput {
	return o
}

func (o Mk8sKubeconfigMapOutput) ToMk8sKubeconfigMapOutputWithContext(ctx context.Context) Mk8sKubeconfigMapOutput {
	return o
}

func (o Mk8sKubeconfigMapOutput) MapIndex(k pulumi.StringInput) Mk8sKubeconfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mk8sKubeconfig {
		return vs[0].(map[string]*Mk8sKubeconfig)[vs[1].(string)]
	}).(Mk8sKubeconfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Mk8sKubeconfigInput)(nil)).Elem(), &Mk8sKubeconfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*Mk8sKubeconfigArrayInput)(nil)).Elem(), Mk8sKubeconfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Mk8sKubeconfigMapInput)(nil)).Elem(), Mk8sKubeconfigMap{})
	pulumi.RegisterOutputType(Mk8sKubeconfigOutput{})
	pulumi.RegisterOutputType(Mk8sKubeconfigArrayOutput{})
	pulumi.RegisterOutputType(Mk8sKubeconfigMapOutput{})
}
