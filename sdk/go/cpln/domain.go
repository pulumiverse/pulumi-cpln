// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type Domain struct {
	pulumi.CustomResourceState

	// The ID, in GUID format, of the Domain.
	CplnId pulumi.StringOutput `pulumi:"cplnId"`
	// Description of the domain name.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with
	// DNS. Create and Update will fail if the required DNS entries cannot be validated.
	Name pulumi.StringOutput `pulumi:"name"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Domain specificiation.
	Spec     DomainSpecOutput        `pulumi:"spec"`
	Statuses DomainStatusArrayOutput `pulumi:"statuses"`
	// Key-value map of resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewDomain registers a new resource with the given unique name, arguments, and options.
func NewDomain(ctx *pulumi.Context,
	name string, args *DomainArgs, opts ...pulumi.ResourceOption) (*Domain, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Spec == nil {
		return nil, errors.New("invalid value for required argument 'Spec'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Domain
	err := ctx.RegisterResource("cpln:index/domain:Domain", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomain gets an existing Domain resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomain(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainState, opts ...pulumi.ResourceOption) (*Domain, error) {
	var resource Domain
	err := ctx.ReadResource("cpln:index/domain:Domain", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Domain resources.
type domainState struct {
	// The ID, in GUID format, of the Domain.
	CplnId *string `pulumi:"cplnId"`
	// Description of the domain name.
	Description *string `pulumi:"description"`
	// Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with
	// DNS. Create and Update will fail if the required DNS entries cannot be validated.
	Name *string `pulumi:"name"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink *string `pulumi:"selfLink"`
	// Domain specificiation.
	Spec     *DomainSpec    `pulumi:"spec"`
	Statuses []DomainStatus `pulumi:"statuses"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

type DomainState struct {
	// The ID, in GUID format, of the Domain.
	CplnId pulumi.StringPtrInput
	// Description of the domain name.
	Description pulumi.StringPtrInput
	// Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with
	// DNS. Create and Update will fail if the required DNS entries cannot be validated.
	Name pulumi.StringPtrInput
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringPtrInput
	// Domain specificiation.
	Spec     DomainSpecPtrInput
	Statuses DomainStatusArrayInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
}

func (DomainState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainState)(nil)).Elem()
}

type domainArgs struct {
	// Description of the domain name.
	Description *string `pulumi:"description"`
	// Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with
	// DNS. Create and Update will fail if the required DNS entries cannot be validated.
	Name *string `pulumi:"name"`
	// Domain specificiation.
	Spec DomainSpec `pulumi:"spec"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Domain resource.
type DomainArgs struct {
	// Description of the domain name.
	Description pulumi.StringPtrInput
	// Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with
	// DNS. Create and Update will fail if the required DNS entries cannot be validated.
	Name pulumi.StringPtrInput
	// Domain specificiation.
	Spec DomainSpecInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
}

func (DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainArgs)(nil)).Elem()
}

type DomainInput interface {
	pulumi.Input

	ToDomainOutput() DomainOutput
	ToDomainOutputWithContext(ctx context.Context) DomainOutput
}

func (*Domain) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (i *Domain) ToDomainOutput() DomainOutput {
	return i.ToDomainOutputWithContext(context.Background())
}

func (i *Domain) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainOutput)
}

func (i *Domain) ToOutput(ctx context.Context) pulumix.Output[*Domain] {
	return pulumix.Output[*Domain]{
		OutputState: i.ToDomainOutputWithContext(ctx).OutputState,
	}
}

// DomainArrayInput is an input type that accepts DomainArray and DomainArrayOutput values.
// You can construct a concrete instance of `DomainArrayInput` via:
//
//	DomainArray{ DomainArgs{...} }
type DomainArrayInput interface {
	pulumi.Input

	ToDomainArrayOutput() DomainArrayOutput
	ToDomainArrayOutputWithContext(context.Context) DomainArrayOutput
}

type DomainArray []DomainInput

func (DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (i DomainArray) ToDomainArrayOutput() DomainArrayOutput {
	return i.ToDomainArrayOutputWithContext(context.Background())
}

func (i DomainArray) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainArrayOutput)
}

func (i DomainArray) ToOutput(ctx context.Context) pulumix.Output[[]*Domain] {
	return pulumix.Output[[]*Domain]{
		OutputState: i.ToDomainArrayOutputWithContext(ctx).OutputState,
	}
}

// DomainMapInput is an input type that accepts DomainMap and DomainMapOutput values.
// You can construct a concrete instance of `DomainMapInput` via:
//
//	DomainMap{ "key": DomainArgs{...} }
type DomainMapInput interface {
	pulumi.Input

	ToDomainMapOutput() DomainMapOutput
	ToDomainMapOutputWithContext(context.Context) DomainMapOutput
}

type DomainMap map[string]DomainInput

func (DomainMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (i DomainMap) ToDomainMapOutput() DomainMapOutput {
	return i.ToDomainMapOutputWithContext(context.Background())
}

func (i DomainMap) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainMapOutput)
}

func (i DomainMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Domain] {
	return pulumix.Output[map[string]*Domain]{
		OutputState: i.ToDomainMapOutputWithContext(ctx).OutputState,
	}
}

type DomainOutput struct{ *pulumi.OutputState }

func (DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Domain)(nil)).Elem()
}

func (o DomainOutput) ToDomainOutput() DomainOutput {
	return o
}

func (o DomainOutput) ToDomainOutputWithContext(ctx context.Context) DomainOutput {
	return o
}

func (o DomainOutput) ToOutput(ctx context.Context) pulumix.Output[*Domain] {
	return pulumix.Output[*Domain]{
		OutputState: o.OutputState,
	}
}

// The ID, in GUID format, of the Domain.
func (o DomainOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

// Description of the domain name.
func (o DomainOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Domain name. (e.g., `example.com` / `test.example.com`). Control Plane will validate the existence of the domain with
// DNS. Create and Update will fail if the required DNS entries cannot be validated.
func (o DomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Full link to this resource. Can be referenced by other resources.
func (o DomainOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Domain specificiation.
func (o DomainOutput) Spec() DomainSpecOutput {
	return o.ApplyT(func(v *Domain) DomainSpecOutput { return v.Spec }).(DomainSpecOutput)
}

func (o DomainOutput) Statuses() DomainStatusArrayOutput {
	return o.ApplyT(func(v *Domain) DomainStatusArrayOutput { return v.Statuses }).(DomainStatusArrayOutput)
}

// Key-value map of resource tags.
func (o DomainOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Domain) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type DomainArrayOutput struct{ *pulumi.OutputState }

func (DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Domain)(nil)).Elem()
}

func (o DomainArrayOutput) ToDomainArrayOutput() DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) ToDomainArrayOutputWithContext(ctx context.Context) DomainArrayOutput {
	return o
}

func (o DomainArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Domain] {
	return pulumix.Output[[]*Domain]{
		OutputState: o.OutputState,
	}
}

func (o DomainArrayOutput) Index(i pulumi.IntInput) DomainOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].([]*Domain)[vs[1].(int)]
	}).(DomainOutput)
}

type DomainMapOutput struct{ *pulumi.OutputState }

func (DomainMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Domain)(nil)).Elem()
}

func (o DomainMapOutput) ToDomainMapOutput() DomainMapOutput {
	return o
}

func (o DomainMapOutput) ToDomainMapOutputWithContext(ctx context.Context) DomainMapOutput {
	return o
}

func (o DomainMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Domain] {
	return pulumix.Output[map[string]*Domain]{
		OutputState: o.OutputState,
	}
}

func (o DomainMapOutput) MapIndex(k pulumi.StringInput) DomainOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Domain {
		return vs[0].(map[string]*Domain)[vs[1].(string)]
	}).(DomainOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainInput)(nil)).Elem(), &Domain{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainArrayInput)(nil)).Elem(), DomainArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainMapInput)(nil)).Elem(), DomainMap{})
	pulumi.RegisterOutputType(DomainOutput{})
	pulumi.RegisterOutputType(DomainArrayOutput{})
	pulumi.RegisterOutputType(DomainMapOutput{})
}
