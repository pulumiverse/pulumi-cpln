// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type Policy struct {
	pulumi.CustomResourceState

	// The association between a target kind and the bound permissions to service principals.
	Bindings PolicyBindingArrayOutput `pulumi:"bindings"`
	// The ID, in GUID format, of the Policy.
	CplnId pulumi.StringOutput `pulumi:"cplnId"`
	// Description of the Policy.
	Description pulumi.StringOutput `pulumi:"description"`
	// The GVC for `identity`, `workload` and `volumeset` target kinds only.
	Gvc pulumi.StringPtrOutput `pulumi:"gvc"`
	// Name of the Policy.
	Name pulumi.StringOutput `pulumi:"name"`
	// Origin of the Policy. Either `builtin` or `default`.
	Origin pulumi.StringOutput `pulumi:"origin"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Key-value map of resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,
	// do not include the attribute.
	Target pulumi.StringPtrOutput `pulumi:"target"`
	// The kind of resource to target (e.g., gvc, serviceaccount, etc.).
	TargetKind pulumi.StringOutput `pulumi:"targetKind"`
	// List of the targets this policy will be applied to. Not used if `target` is set to `all`.
	TargetLinks pulumi.StringArrayOutput `pulumi:"targetLinks"`
	// A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.
	TargetQuery PolicyTargetQueryPtrOutput `pulumi:"targetQuery"`
}

// NewPolicy registers a new resource with the given unique name, arguments, and options.
func NewPolicy(ctx *pulumi.Context,
	name string, args *PolicyArgs, opts ...pulumi.ResourceOption) (*Policy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TargetKind == nil {
		return nil, errors.New("invalid value for required argument 'TargetKind'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Policy
	err := ctx.RegisterResource("cpln:index/policy:Policy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPolicy gets an existing Policy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PolicyState, opts ...pulumi.ResourceOption) (*Policy, error) {
	var resource Policy
	err := ctx.ReadResource("cpln:index/policy:Policy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Policy resources.
type policyState struct {
	// The association between a target kind and the bound permissions to service principals.
	Bindings []PolicyBinding `pulumi:"bindings"`
	// The ID, in GUID format, of the Policy.
	CplnId *string `pulumi:"cplnId"`
	// Description of the Policy.
	Description *string `pulumi:"description"`
	// The GVC for `identity`, `workload` and `volumeset` target kinds only.
	Gvc *string `pulumi:"gvc"`
	// Name of the Policy.
	Name *string `pulumi:"name"`
	// Origin of the Policy. Either `builtin` or `default`.
	Origin *string `pulumi:"origin"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink *string `pulumi:"selfLink"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,
	// do not include the attribute.
	Target *string `pulumi:"target"`
	// The kind of resource to target (e.g., gvc, serviceaccount, etc.).
	TargetKind *string `pulumi:"targetKind"`
	// List of the targets this policy will be applied to. Not used if `target` is set to `all`.
	TargetLinks []string `pulumi:"targetLinks"`
	// A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.
	TargetQuery *PolicyTargetQuery `pulumi:"targetQuery"`
}

type PolicyState struct {
	// The association between a target kind and the bound permissions to service principals.
	Bindings PolicyBindingArrayInput
	// The ID, in GUID format, of the Policy.
	CplnId pulumi.StringPtrInput
	// Description of the Policy.
	Description pulumi.StringPtrInput
	// The GVC for `identity`, `workload` and `volumeset` target kinds only.
	Gvc pulumi.StringPtrInput
	// Name of the Policy.
	Name pulumi.StringPtrInput
	// Origin of the Policy. Either `builtin` or `default`.
	Origin pulumi.StringPtrInput
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringPtrInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
	// Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,
	// do not include the attribute.
	Target pulumi.StringPtrInput
	// The kind of resource to target (e.g., gvc, serviceaccount, etc.).
	TargetKind pulumi.StringPtrInput
	// List of the targets this policy will be applied to. Not used if `target` is set to `all`.
	TargetLinks pulumi.StringArrayInput
	// A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.
	TargetQuery PolicyTargetQueryPtrInput
}

func (PolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*policyState)(nil)).Elem()
}

type policyArgs struct {
	// The association between a target kind and the bound permissions to service principals.
	Bindings []PolicyBinding `pulumi:"bindings"`
	// Description of the Policy.
	Description *string `pulumi:"description"`
	// The GVC for `identity`, `workload` and `volumeset` target kinds only.
	Gvc *string `pulumi:"gvc"`
	// Name of the Policy.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,
	// do not include the attribute.
	Target *string `pulumi:"target"`
	// The kind of resource to target (e.g., gvc, serviceaccount, etc.).
	TargetKind string `pulumi:"targetKind"`
	// List of the targets this policy will be applied to. Not used if `target` is set to `all`.
	TargetLinks []string `pulumi:"targetLinks"`
	// A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.
	TargetQuery *PolicyTargetQuery `pulumi:"targetQuery"`
}

// The set of arguments for constructing a Policy resource.
type PolicyArgs struct {
	// The association between a target kind and the bound permissions to service principals.
	Bindings PolicyBindingArrayInput
	// Description of the Policy.
	Description pulumi.StringPtrInput
	// The GVC for `identity`, `workload` and `volumeset` target kinds only.
	Gvc pulumi.StringPtrInput
	// Name of the Policy.
	Name pulumi.StringPtrInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
	// Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,
	// do not include the attribute.
	Target pulumi.StringPtrInput
	// The kind of resource to target (e.g., gvc, serviceaccount, etc.).
	TargetKind pulumi.StringInput
	// List of the targets this policy will be applied to. Not used if `target` is set to `all`.
	TargetLinks pulumi.StringArrayInput
	// A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.
	TargetQuery PolicyTargetQueryPtrInput
}

func (PolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*policyArgs)(nil)).Elem()
}

type PolicyInput interface {
	pulumi.Input

	ToPolicyOutput() PolicyOutput
	ToPolicyOutputWithContext(ctx context.Context) PolicyOutput
}

func (*Policy) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (i *Policy) ToPolicyOutput() PolicyOutput {
	return i.ToPolicyOutputWithContext(context.Background())
}

func (i *Policy) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyOutput)
}

// PolicyArrayInput is an input type that accepts PolicyArray and PolicyArrayOutput values.
// You can construct a concrete instance of `PolicyArrayInput` via:
//
//	PolicyArray{ PolicyArgs{...} }
type PolicyArrayInput interface {
	pulumi.Input

	ToPolicyArrayOutput() PolicyArrayOutput
	ToPolicyArrayOutputWithContext(context.Context) PolicyArrayOutput
}

type PolicyArray []PolicyInput

func (PolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (i PolicyArray) ToPolicyArrayOutput() PolicyArrayOutput {
	return i.ToPolicyArrayOutputWithContext(context.Background())
}

func (i PolicyArray) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyArrayOutput)
}

// PolicyMapInput is an input type that accepts PolicyMap and PolicyMapOutput values.
// You can construct a concrete instance of `PolicyMapInput` via:
//
//	PolicyMap{ "key": PolicyArgs{...} }
type PolicyMapInput interface {
	pulumi.Input

	ToPolicyMapOutput() PolicyMapOutput
	ToPolicyMapOutputWithContext(context.Context) PolicyMapOutput
}

type PolicyMap map[string]PolicyInput

func (PolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (i PolicyMap) ToPolicyMapOutput() PolicyMapOutput {
	return i.ToPolicyMapOutputWithContext(context.Background())
}

func (i PolicyMap) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PolicyMapOutput)
}

type PolicyOutput struct{ *pulumi.OutputState }

func (PolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Policy)(nil)).Elem()
}

func (o PolicyOutput) ToPolicyOutput() PolicyOutput {
	return o
}

func (o PolicyOutput) ToPolicyOutputWithContext(ctx context.Context) PolicyOutput {
	return o
}

// The association between a target kind and the bound permissions to service principals.
func (o PolicyOutput) Bindings() PolicyBindingArrayOutput {
	return o.ApplyT(func(v *Policy) PolicyBindingArrayOutput { return v.Bindings }).(PolicyBindingArrayOutput)
}

// The ID, in GUID format, of the Policy.
func (o PolicyOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

// Description of the Policy.
func (o PolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The GVC for `identity`, `workload` and `volumeset` target kinds only.
func (o PolicyOutput) Gvc() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.Gvc }).(pulumi.StringPtrOutput)
}

// Name of the Policy.
func (o PolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Origin of the Policy. Either `builtin` or `default`.
func (o PolicyOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

// Full link to this resource. Can be referenced by other resources.
func (o PolicyOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Key-value map of resource tags.
func (o PolicyOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Set this value of this attribute to `all` if this policy should target all objects of the given target_kind. Otherwise,
// do not include the attribute.
func (o PolicyOutput) Target() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringPtrOutput { return v.Target }).(pulumi.StringPtrOutput)
}

// The kind of resource to target (e.g., gvc, serviceaccount, etc.).
func (o PolicyOutput) TargetKind() pulumi.StringOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringOutput { return v.TargetKind }).(pulumi.StringOutput)
}

// List of the targets this policy will be applied to. Not used if `target` is set to `all`.
func (o PolicyOutput) TargetLinks() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Policy) pulumi.StringArrayOutput { return v.TargetLinks }).(pulumi.StringArrayOutput)
}

// A defined set of criteria or conditions used to identify the target entities or resources to which the policy applies.
func (o PolicyOutput) TargetQuery() PolicyTargetQueryPtrOutput {
	return o.ApplyT(func(v *Policy) PolicyTargetQueryPtrOutput { return v.TargetQuery }).(PolicyTargetQueryPtrOutput)
}

type PolicyArrayOutput struct{ *pulumi.OutputState }

func (PolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Policy)(nil)).Elem()
}

func (o PolicyArrayOutput) ToPolicyArrayOutput() PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) ToPolicyArrayOutputWithContext(ctx context.Context) PolicyArrayOutput {
	return o
}

func (o PolicyArrayOutput) Index(i pulumi.IntInput) PolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].([]*Policy)[vs[1].(int)]
	}).(PolicyOutput)
}

type PolicyMapOutput struct{ *pulumi.OutputState }

func (PolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Policy)(nil)).Elem()
}

func (o PolicyMapOutput) ToPolicyMapOutput() PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) ToPolicyMapOutputWithContext(ctx context.Context) PolicyMapOutput {
	return o
}

func (o PolicyMapOutput) MapIndex(k pulumi.StringInput) PolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Policy {
		return vs[0].(map[string]*Policy)[vs[1].(string)]
	}).(PolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyInput)(nil)).Elem(), &Policy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyArrayInput)(nil)).Elem(), PolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PolicyMapInput)(nil)).Elem(), PolicyMap{})
	pulumi.RegisterOutputType(PolicyOutput{})
	pulumi.RegisterOutputType(PolicyArrayOutput{})
	pulumi.RegisterOutputType(PolicyMapOutput{})
}
