// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type Group struct {
	pulumi.CustomResourceState

	// The ID, in GUID format, of the Group.
	CplnId pulumi.StringOutput `pulumi:"cplnId"`
	// Description of Group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful
	// for managing the grouping of users logged-in with SAML providers.
	IdentityMatcher GroupIdentityMatcherPtrOutput `pulumi:"identityMatcher"`
	// A predefined set of criteria or conditions used to query and retrieve members within the group.
	MemberQuery GroupMemberQueryPtrOutput `pulumi:"memberQuery"`
	// Name of the Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Origin of the service account. Either `builtin` or `default`.
	Origin pulumi.StringOutput `pulumi:"origin"`
	// Fully qualified link to the this group.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// List of service accounts that exists within the configured org. Group membership will fail if the service account does
	// not exits within the org.
	ServiceAccounts pulumi.StringArrayOutput `pulumi:"serviceAccounts"`
	// Key-value map of resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// List of either the user ID or email address for a user that exists within the configured org. Group membership will fail
	// if the user ID / email does not exist within the org.
	UserIdsAndEmails pulumi.StringArrayOutput `pulumi:"userIdsAndEmails"`
}

// NewGroup registers a new resource with the given unique name, arguments, and options.
func NewGroup(ctx *pulumi.Context,
	name string, args *GroupArgs, opts ...pulumi.ResourceOption) (*Group, error) {
	if args == nil {
		args = &GroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Group
	err := ctx.RegisterResource("cpln:index/group:Group", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroup gets an existing Group resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupState, opts ...pulumi.ResourceOption) (*Group, error) {
	var resource Group
	err := ctx.ReadResource("cpln:index/group:Group", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Group resources.
type groupState struct {
	// The ID, in GUID format, of the Group.
	CplnId *string `pulumi:"cplnId"`
	// Description of Group.
	Description *string `pulumi:"description"`
	// Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful
	// for managing the grouping of users logged-in with SAML providers.
	IdentityMatcher *GroupIdentityMatcher `pulumi:"identityMatcher"`
	// A predefined set of criteria or conditions used to query and retrieve members within the group.
	MemberQuery *GroupMemberQuery `pulumi:"memberQuery"`
	// Name of the Group.
	Name *string `pulumi:"name"`
	// Origin of the service account. Either `builtin` or `default`.
	Origin *string `pulumi:"origin"`
	// Fully qualified link to the this group.
	SelfLink *string `pulumi:"selfLink"`
	// List of service accounts that exists within the configured org. Group membership will fail if the service account does
	// not exits within the org.
	ServiceAccounts []string `pulumi:"serviceAccounts"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// List of either the user ID or email address for a user that exists within the configured org. Group membership will fail
	// if the user ID / email does not exist within the org.
	UserIdsAndEmails []string `pulumi:"userIdsAndEmails"`
}

type GroupState struct {
	// The ID, in GUID format, of the Group.
	CplnId pulumi.StringPtrInput
	// Description of Group.
	Description pulumi.StringPtrInput
	// Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful
	// for managing the grouping of users logged-in with SAML providers.
	IdentityMatcher GroupIdentityMatcherPtrInput
	// A predefined set of criteria or conditions used to query and retrieve members within the group.
	MemberQuery GroupMemberQueryPtrInput
	// Name of the Group.
	Name pulumi.StringPtrInput
	// Origin of the service account. Either `builtin` or `default`.
	Origin pulumi.StringPtrInput
	// Fully qualified link to the this group.
	SelfLink pulumi.StringPtrInput
	// List of service accounts that exists within the configured org. Group membership will fail if the service account does
	// not exits within the org.
	ServiceAccounts pulumi.StringArrayInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
	// List of either the user ID or email address for a user that exists within the configured org. Group membership will fail
	// if the user ID / email does not exist within the org.
	UserIdsAndEmails pulumi.StringArrayInput
}

func (GroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupState)(nil)).Elem()
}

type groupArgs struct {
	// Description of Group.
	Description *string `pulumi:"description"`
	// Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful
	// for managing the grouping of users logged-in with SAML providers.
	IdentityMatcher *GroupIdentityMatcher `pulumi:"identityMatcher"`
	// A predefined set of criteria or conditions used to query and retrieve members within the group.
	MemberQuery *GroupMemberQuery `pulumi:"memberQuery"`
	// Name of the Group.
	Name *string `pulumi:"name"`
	// List of service accounts that exists within the configured org. Group membership will fail if the service account does
	// not exits within the org.
	ServiceAccounts []string `pulumi:"serviceAccounts"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// List of either the user ID or email address for a user that exists within the configured org. Group membership will fail
	// if the user ID / email does not exist within the org.
	UserIdsAndEmails []string `pulumi:"userIdsAndEmails"`
}

// The set of arguments for constructing a Group resource.
type GroupArgs struct {
	// Description of Group.
	Description pulumi.StringPtrInput
	// Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful
	// for managing the grouping of users logged-in with SAML providers.
	IdentityMatcher GroupIdentityMatcherPtrInput
	// A predefined set of criteria or conditions used to query and retrieve members within the group.
	MemberQuery GroupMemberQueryPtrInput
	// Name of the Group.
	Name pulumi.StringPtrInput
	// List of service accounts that exists within the configured org. Group membership will fail if the service account does
	// not exits within the org.
	ServiceAccounts pulumi.StringArrayInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
	// List of either the user ID or email address for a user that exists within the configured org. Group membership will fail
	// if the user ID / email does not exist within the org.
	UserIdsAndEmails pulumi.StringArrayInput
}

func (GroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupArgs)(nil)).Elem()
}

type GroupInput interface {
	pulumi.Input

	ToGroupOutput() GroupOutput
	ToGroupOutputWithContext(ctx context.Context) GroupOutput
}

func (*Group) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (i *Group) ToGroupOutput() GroupOutput {
	return i.ToGroupOutputWithContext(context.Background())
}

func (i *Group) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupOutput)
}

// GroupArrayInput is an input type that accepts GroupArray and GroupArrayOutput values.
// You can construct a concrete instance of `GroupArrayInput` via:
//
//	GroupArray{ GroupArgs{...} }
type GroupArrayInput interface {
	pulumi.Input

	ToGroupArrayOutput() GroupArrayOutput
	ToGroupArrayOutputWithContext(context.Context) GroupArrayOutput
}

type GroupArray []GroupInput

func (GroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (i GroupArray) ToGroupArrayOutput() GroupArrayOutput {
	return i.ToGroupArrayOutputWithContext(context.Background())
}

func (i GroupArray) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupArrayOutput)
}

// GroupMapInput is an input type that accepts GroupMap and GroupMapOutput values.
// You can construct a concrete instance of `GroupMapInput` via:
//
//	GroupMap{ "key": GroupArgs{...} }
type GroupMapInput interface {
	pulumi.Input

	ToGroupMapOutput() GroupMapOutput
	ToGroupMapOutputWithContext(context.Context) GroupMapOutput
}

type GroupMap map[string]GroupInput

func (GroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (i GroupMap) ToGroupMapOutput() GroupMapOutput {
	return i.ToGroupMapOutputWithContext(context.Background())
}

func (i GroupMap) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMapOutput)
}

type GroupOutput struct{ *pulumi.OutputState }

func (GroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Group)(nil)).Elem()
}

func (o GroupOutput) ToGroupOutput() GroupOutput {
	return o
}

func (o GroupOutput) ToGroupOutputWithContext(ctx context.Context) GroupOutput {
	return o
}

// The ID, in GUID format, of the Group.
func (o GroupOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

// Description of Group.
func (o GroupOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Group) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Executes the expression against the users' claims to decide whether a user belongs to this group. This method is useful
// for managing the grouping of users logged-in with SAML providers.
func (o GroupOutput) IdentityMatcher() GroupIdentityMatcherPtrOutput {
	return o.ApplyT(func(v *Group) GroupIdentityMatcherPtrOutput { return v.IdentityMatcher }).(GroupIdentityMatcherPtrOutput)
}

// A predefined set of criteria or conditions used to query and retrieve members within the group.
func (o GroupOutput) MemberQuery() GroupMemberQueryPtrOutput {
	return o.ApplyT(func(v *Group) GroupMemberQueryPtrOutput { return v.MemberQuery }).(GroupMemberQueryPtrOutput)
}

// Name of the Group.
func (o GroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Origin of the service account. Either `builtin` or `default`.
func (o GroupOutput) Origin() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.Origin }).(pulumi.StringOutput)
}

// Fully qualified link to the this group.
func (o GroupOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Group) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// List of service accounts that exists within the configured org. Group membership will fail if the service account does
// not exits within the org.
func (o GroupOutput) ServiceAccounts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.ServiceAccounts }).(pulumi.StringArrayOutput)
}

// Key-value map of resource tags.
func (o GroupOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Group) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// List of either the user ID or email address for a user that exists within the configured org. Group membership will fail
// if the user ID / email does not exist within the org.
func (o GroupOutput) UserIdsAndEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Group) pulumi.StringArrayOutput { return v.UserIdsAndEmails }).(pulumi.StringArrayOutput)
}

type GroupArrayOutput struct{ *pulumi.OutputState }

func (GroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Group)(nil)).Elem()
}

func (o GroupArrayOutput) ToGroupArrayOutput() GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) ToGroupArrayOutputWithContext(ctx context.Context) GroupArrayOutput {
	return o
}

func (o GroupArrayOutput) Index(i pulumi.IntInput) GroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Group {
		return vs[0].([]*Group)[vs[1].(int)]
	}).(GroupOutput)
}

type GroupMapOutput struct{ *pulumi.OutputState }

func (GroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Group)(nil)).Elem()
}

func (o GroupMapOutput) ToGroupMapOutput() GroupMapOutput {
	return o
}

func (o GroupMapOutput) ToGroupMapOutputWithContext(ctx context.Context) GroupMapOutput {
	return o
}

func (o GroupMapOutput) MapIndex(k pulumi.StringInput) GroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Group {
		return vs[0].(map[string]*Group)[vs[1].(string)]
	}).(GroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupInput)(nil)).Elem(), &Group{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupArrayInput)(nil)).Elem(), GroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMapInput)(nil)).Elem(), GroupMap{})
	pulumi.RegisterOutputType(GroupOutput{})
	pulumi.RegisterOutputType(GroupArrayOutput{})
	pulumi.RegisterOutputType(GroupMapOutput{})
}
