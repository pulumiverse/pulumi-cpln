// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

// Manages an org's [Location](https://docs.controlplane.com/reference/location).
//
// ## Declaration
//
// ### Required
//
// - **name** (String) Name of the Location.
// - **tags** (Map of String) Key-value map of resource tags.
// - **enabled** (Boolean) Indication if location is enabled.
//
// > **Note** You need to associate the same tags that are defined in a location; otherwise, the pulumi preview will not be empty. It is common practice to reference the tags from a location data source.
//
// ## Outputs
//
// - **cpln_id** (String) The ID, in GUID format, of the location.
// - **description** (String) Description of the location.
// - **cloud_provider** (String) Cloud Provider of the location.
// - **region** (String) Region of the location.
// - **geo** (Block List, Max: 1) (see below)
// - **ip_ranges** (List of String) A list of IP ranges of the location.
// - **self_link** (String) Full link to this resource. Can be referenced by other resources.
//
// <a id="nestedblock--geo"></a>
//
// ### `geo`
//
// # Location geographical details
//
// - **lat** (Number) Latitude.
// - **lon** (Number) Longitude.
// - **country** (String) Country.
// - **state** (String) State.
// - **city** (String) City.
// - **continent** (String) Continent.
//
// ## Example Usage
// ### Reference Tags from Data Source
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			main_location, err := cpln.LookupLocation(ctx, &cpln.LookupLocationArgs{
//				Name: "aws-eu-central-1",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = cpln.NewLocation(ctx, "reference-tags-example", &cpln.LocationArgs{
//				Enabled: pulumi.Bool(true),
//				Tags:    interface{}(main_location.Tags),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Hard Code Location Tags
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := cpln.NewLocation(ctx, "example", &cpln.LocationArgs{
//				Enabled: pulumi.Bool(true),
//				Tags: pulumi.StringMap{
//					"cpln/city":      pulumi.String("Frankfurt"),
//					"cpln/continent": pulumi.String("Europe"),
//					"cpln/country":   pulumi.String("Germany"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type Location struct {
	pulumi.CustomResourceState

	// Cloud Provider of the location.
	CloudProvider pulumi.StringOutput `pulumi:"cloudProvider"`
	// The ID, in GUID format, of the location.
	CplnId pulumi.StringOutput `pulumi:"cplnId"`
	// Description of the location.
	Description pulumi.StringOutput `pulumi:"description"`
	// Indication if location is enabled.
	Enabled pulumi.BoolOutput      `pulumi:"enabled"`
	Geos    LocationGeoArrayOutput `pulumi:"geos"`
	// A list of IP ranges of the location.
	IpRanges pulumi.StringArrayOutput `pulumi:"ipRanges"`
	// Name of the Location.
	Name pulumi.StringOutput `pulumi:"name"`
	// Region of the location.
	Region pulumi.StringOutput `pulumi:"region"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Key-value map of resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewLocation registers a new resource with the given unique name, arguments, and options.
func NewLocation(ctx *pulumi.Context,
	name string, args *LocationArgs, opts ...pulumi.ResourceOption) (*Location, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	if args.Tags == nil {
		return nil, errors.New("invalid value for required argument 'Tags'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Location
	err := ctx.RegisterResource("cpln:index/location:Location", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocation gets an existing Location resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationState, opts ...pulumi.ResourceOption) (*Location, error) {
	var resource Location
	err := ctx.ReadResource("cpln:index/location:Location", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Location resources.
type locationState struct {
	// Cloud Provider of the location.
	CloudProvider *string `pulumi:"cloudProvider"`
	// The ID, in GUID format, of the location.
	CplnId *string `pulumi:"cplnId"`
	// Description of the location.
	Description *string `pulumi:"description"`
	// Indication if location is enabled.
	Enabled *bool         `pulumi:"enabled"`
	Geos    []LocationGeo `pulumi:"geos"`
	// A list of IP ranges of the location.
	IpRanges []string `pulumi:"ipRanges"`
	// Name of the Location.
	Name *string `pulumi:"name"`
	// Region of the location.
	Region *string `pulumi:"region"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink *string `pulumi:"selfLink"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

type LocationState struct {
	// Cloud Provider of the location.
	CloudProvider pulumi.StringPtrInput
	// The ID, in GUID format, of the location.
	CplnId pulumi.StringPtrInput
	// Description of the location.
	Description pulumi.StringPtrInput
	// Indication if location is enabled.
	Enabled pulumi.BoolPtrInput
	Geos    LocationGeoArrayInput
	// A list of IP ranges of the location.
	IpRanges pulumi.StringArrayInput
	// Name of the Location.
	Name pulumi.StringPtrInput
	// Region of the location.
	Region pulumi.StringPtrInput
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringPtrInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
}

func (LocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationState)(nil)).Elem()
}

type locationArgs struct {
	// Indication if location is enabled.
	Enabled bool `pulumi:"enabled"`
	// Name of the Location.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Location resource.
type LocationArgs struct {
	// Indication if location is enabled.
	Enabled pulumi.BoolInput
	// Name of the Location.
	Name pulumi.StringPtrInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationArgs)(nil)).Elem()
}

type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(ctx context.Context) LocationOutput
}

func (*Location) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (i *Location) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i *Location) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

func (i *Location) ToOutput(ctx context.Context) pulumix.Output[*Location] {
	return pulumix.Output[*Location]{
		OutputState: i.ToLocationOutputWithContext(ctx).OutputState,
	}
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//	LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

func (i LocationArray) ToOutput(ctx context.Context) pulumix.Output[[]*Location] {
	return pulumix.Output[[]*Location]{
		OutputState: i.ToLocationArrayOutputWithContext(ctx).OutputState,
	}
}

// LocationMapInput is an input type that accepts LocationMap and LocationMapOutput values.
// You can construct a concrete instance of `LocationMapInput` via:
//
//	LocationMap{ "key": LocationArgs{...} }
type LocationMapInput interface {
	pulumi.Input

	ToLocationMapOutput() LocationMapOutput
	ToLocationMapOutputWithContext(context.Context) LocationMapOutput
}

type LocationMap map[string]LocationInput

func (LocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Location)(nil)).Elem()
}

func (i LocationMap) ToLocationMapOutput() LocationMapOutput {
	return i.ToLocationMapOutputWithContext(context.Background())
}

func (i LocationMap) ToLocationMapOutputWithContext(ctx context.Context) LocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationMapOutput)
}

func (i LocationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Location] {
	return pulumix.Output[map[string]*Location]{
		OutputState: i.ToLocationMapOutputWithContext(ctx).OutputState,
	}
}

type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

func (o LocationOutput) ToOutput(ctx context.Context) pulumix.Output[*Location] {
	return pulumix.Output[*Location]{
		OutputState: o.OutputState,
	}
}

// Cloud Provider of the location.
func (o LocationOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.CloudProvider }).(pulumi.StringOutput)
}

// The ID, in GUID format, of the location.
func (o LocationOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

// Description of the location.
func (o LocationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Indication if location is enabled.
func (o LocationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Location) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o LocationOutput) Geos() LocationGeoArrayOutput {
	return o.ApplyT(func(v *Location) LocationGeoArrayOutput { return v.Geos }).(LocationGeoArrayOutput)
}

// A list of IP ranges of the location.
func (o LocationOutput) IpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Location) pulumi.StringArrayOutput { return v.IpRanges }).(pulumi.StringArrayOutput)
}

// Name of the Location.
func (o LocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region of the location.
func (o LocationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Full link to this resource. Can be referenced by other resources.
func (o LocationOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Key-value map of resource tags.
func (o LocationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Location) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Location] {
	return pulumix.Output[[]*Location]{
		OutputState: o.OutputState,
	}
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Location {
		return vs[0].([]*Location)[vs[1].(int)]
	}).(LocationOutput)
}

type LocationMapOutput struct{ *pulumi.OutputState }

func (LocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Location)(nil)).Elem()
}

func (o LocationMapOutput) ToLocationMapOutput() LocationMapOutput {
	return o
}

func (o LocationMapOutput) ToLocationMapOutputWithContext(ctx context.Context) LocationMapOutput {
	return o
}

func (o LocationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Location] {
	return pulumix.Output[map[string]*Location]{
		OutputState: o.OutputState,
	}
}

func (o LocationMapOutput) MapIndex(k pulumi.StringInput) LocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Location {
		return vs[0].(map[string]*Location)[vs[1].(string)]
	}).(LocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationInput)(nil)).Elem(), &Location{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationArrayInput)(nil)).Elem(), LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationMapInput)(nil)).Elem(), LocationMap{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(LocationMapOutput{})
}
