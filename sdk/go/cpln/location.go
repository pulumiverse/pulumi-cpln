// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type Location struct {
	pulumi.CustomResourceState

	// Cloud Provider of the location.
	CloudProvider pulumi.StringOutput `pulumi:"cloudProvider"`
	// The ID, in GUID format, of the location.
	CplnId pulumi.StringOutput `pulumi:"cplnId"`
	// Description of the location.
	Description pulumi.StringOutput `pulumi:"description"`
	// Indication if location is enabled.
	Enabled pulumi.BoolOutput      `pulumi:"enabled"`
	Geos    LocationGeoArrayOutput `pulumi:"geos"`
	// A list of IP ranges of the location.
	IpRanges pulumi.StringArrayOutput `pulumi:"ipRanges"`
	// Name of the Location.
	Name pulumi.StringOutput `pulumi:"name"`
	// Region of the location.
	Region pulumi.StringOutput `pulumi:"region"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Key-value map of resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewLocation registers a new resource with the given unique name, arguments, and options.
func NewLocation(ctx *pulumi.Context,
	name string, args *LocationArgs, opts ...pulumi.ResourceOption) (*Location, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Enabled == nil {
		return nil, errors.New("invalid value for required argument 'Enabled'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Location
	err := ctx.RegisterResource("cpln:index/location:Location", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLocation gets an existing Location resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLocation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LocationState, opts ...pulumi.ResourceOption) (*Location, error) {
	var resource Location
	err := ctx.ReadResource("cpln:index/location:Location", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Location resources.
type locationState struct {
	// Cloud Provider of the location.
	CloudProvider *string `pulumi:"cloudProvider"`
	// The ID, in GUID format, of the location.
	CplnId *string `pulumi:"cplnId"`
	// Description of the location.
	Description *string `pulumi:"description"`
	// Indication if location is enabled.
	Enabled *bool         `pulumi:"enabled"`
	Geos    []LocationGeo `pulumi:"geos"`
	// A list of IP ranges of the location.
	IpRanges []string `pulumi:"ipRanges"`
	// Name of the Location.
	Name *string `pulumi:"name"`
	// Region of the location.
	Region *string `pulumi:"region"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink *string `pulumi:"selfLink"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

type LocationState struct {
	// Cloud Provider of the location.
	CloudProvider pulumi.StringPtrInput
	// The ID, in GUID format, of the location.
	CplnId pulumi.StringPtrInput
	// Description of the location.
	Description pulumi.StringPtrInput
	// Indication if location is enabled.
	Enabled pulumi.BoolPtrInput
	Geos    LocationGeoArrayInput
	// A list of IP ranges of the location.
	IpRanges pulumi.StringArrayInput
	// Name of the Location.
	Name pulumi.StringPtrInput
	// Region of the location.
	Region pulumi.StringPtrInput
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringPtrInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
}

func (LocationState) ElementType() reflect.Type {
	return reflect.TypeOf((*locationState)(nil)).Elem()
}

type locationArgs struct {
	// Indication if location is enabled.
	Enabled bool `pulumi:"enabled"`
	// Name of the Location.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Location resource.
type LocationArgs struct {
	// Indication if location is enabled.
	Enabled pulumi.BoolInput
	// Name of the Location.
	Name pulumi.StringPtrInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
}

func (LocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*locationArgs)(nil)).Elem()
}

type LocationInput interface {
	pulumi.Input

	ToLocationOutput() LocationOutput
	ToLocationOutputWithContext(ctx context.Context) LocationOutput
}

func (*Location) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (i *Location) ToLocationOutput() LocationOutput {
	return i.ToLocationOutputWithContext(context.Background())
}

func (i *Location) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationOutput)
}

// LocationArrayInput is an input type that accepts LocationArray and LocationArrayOutput values.
// You can construct a concrete instance of `LocationArrayInput` via:
//
//	LocationArray{ LocationArgs{...} }
type LocationArrayInput interface {
	pulumi.Input

	ToLocationArrayOutput() LocationArrayOutput
	ToLocationArrayOutputWithContext(context.Context) LocationArrayOutput
}

type LocationArray []LocationInput

func (LocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Location)(nil)).Elem()
}

func (i LocationArray) ToLocationArrayOutput() LocationArrayOutput {
	return i.ToLocationArrayOutputWithContext(context.Background())
}

func (i LocationArray) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationArrayOutput)
}

// LocationMapInput is an input type that accepts LocationMap and LocationMapOutput values.
// You can construct a concrete instance of `LocationMapInput` via:
//
//	LocationMap{ "key": LocationArgs{...} }
type LocationMapInput interface {
	pulumi.Input

	ToLocationMapOutput() LocationMapOutput
	ToLocationMapOutputWithContext(context.Context) LocationMapOutput
}

type LocationMap map[string]LocationInput

func (LocationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Location)(nil)).Elem()
}

func (i LocationMap) ToLocationMapOutput() LocationMapOutput {
	return i.ToLocationMapOutputWithContext(context.Background())
}

func (i LocationMap) ToLocationMapOutputWithContext(ctx context.Context) LocationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LocationMapOutput)
}

type LocationOutput struct{ *pulumi.OutputState }

func (LocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Location)(nil)).Elem()
}

func (o LocationOutput) ToLocationOutput() LocationOutput {
	return o
}

func (o LocationOutput) ToLocationOutputWithContext(ctx context.Context) LocationOutput {
	return o
}

// Cloud Provider of the location.
func (o LocationOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.CloudProvider }).(pulumi.StringOutput)
}

// The ID, in GUID format, of the location.
func (o LocationOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

// Description of the location.
func (o LocationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Indication if location is enabled.
func (o LocationOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *Location) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

func (o LocationOutput) Geos() LocationGeoArrayOutput {
	return o.ApplyT(func(v *Location) LocationGeoArrayOutput { return v.Geos }).(LocationGeoArrayOutput)
}

// A list of IP ranges of the location.
func (o LocationOutput) IpRanges() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Location) pulumi.StringArrayOutput { return v.IpRanges }).(pulumi.StringArrayOutput)
}

// Name of the Location.
func (o LocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Region of the location.
func (o LocationOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.Region }).(pulumi.StringOutput)
}

// Full link to this resource. Can be referenced by other resources.
func (o LocationOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Location) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Key-value map of resource tags.
func (o LocationOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Location) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type LocationArrayOutput struct{ *pulumi.OutputState }

func (LocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Location)(nil)).Elem()
}

func (o LocationArrayOutput) ToLocationArrayOutput() LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) ToLocationArrayOutputWithContext(ctx context.Context) LocationArrayOutput {
	return o
}

func (o LocationArrayOutput) Index(i pulumi.IntInput) LocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Location {
		return vs[0].([]*Location)[vs[1].(int)]
	}).(LocationOutput)
}

type LocationMapOutput struct{ *pulumi.OutputState }

func (LocationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Location)(nil)).Elem()
}

func (o LocationMapOutput) ToLocationMapOutput() LocationMapOutput {
	return o
}

func (o LocationMapOutput) ToLocationMapOutputWithContext(ctx context.Context) LocationMapOutput {
	return o
}

func (o LocationMapOutput) MapIndex(k pulumi.StringInput) LocationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Location {
		return vs[0].(map[string]*Location)[vs[1].(string)]
	}).(LocationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LocationInput)(nil)).Elem(), &Location{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationArrayInput)(nil)).Elem(), LocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LocationMapInput)(nil)).Elem(), LocationMap{})
	pulumi.RegisterOutputType(LocationOutput{})
	pulumi.RegisterOutputType(LocationArrayOutput{})
	pulumi.RegisterOutputType(LocationMapOutput{})
}
