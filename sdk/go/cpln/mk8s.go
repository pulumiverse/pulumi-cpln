// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

// Manages a Mk8s's [Mk8s](https://docs.controlplane.com/mk8s/overview).
//
// ## Declaration
//
// ### Required
//
// - **name** (String) Name of the Mk8s.
// - **version** (String)
//
// > **Note** Only one of the providers listed below can be included in a resource.
//
// - **generic_provider** (Block List, Max: 1) (see below)
// - **hetzner_provider** (Block List, Max: 1) (see below)
// - **aws_provider** (Block List, Max: 1) (see below)
// - **ephemeral_provider** (Block List, Max: 1) (see below)
//
// ### Optional
//
// - **description** (String) Description of the Mk8s.
// - **tags** (Map of String) Key-value map of resource tags.
// - **firewall** (Block List, Max: 1) (see below)
// - **add_ons** (Block List, Max: 1) (see below)
//
// <a id="nestedblock--generic_provider"></a>
//
// ### `genericProvider`
//
// Required:
//
// - **location** (String) Control Plane location that will host the K8S components. Prefer one that is closest to where the nodes are running.
// - **networking** (Block List, Max: 1) (see below)
//
// Optional:
//
// - **node_pool** (Block List) (see below)
//
// <a id="nestedblock--generic_provider--networking"></a>
//
// ### `generic_provider.networking`
//
// Networking declaration is required even if networking is not utilized. Example usage: `networking {}`.
//
// Optional:
//
// - **service_network** (String) The CIDR of the service network.
// - **pod_network** (String) The CIDR of the pod network.
//
// <a id="nestedblock--generic_provider--node_pool"></a>
//
// ### `generic_provider.node_pool`
//
// List of node pools.
//
// Required:
//
// - **name** (String)
//
// Optional:
//
// - **labels** (Map of String) Labels to attach to nodes of a node pool.
// - **taint** (Block List) (see below)
//
// <a id="nestedblock--generic_provider--node_pool--taint"></a>
//
// ### `generic_provider.node_pool.taint`
//
// Taint for the nodes of a pool.
//
// Optional:
//
// - **key** (String)
// - **value** (String)
// - **effect** (String)
//
// <a id="nestedblock--hetzner_provider"></a>
//
// ### `hetznerProvider`
//
// Required:
//
// - **region** (String) Hetzner region to deploy nodes to.
// - **token_secret_link** (String) Link to a secret holding Hetzner access key.
// - **network_id** (String) ID of the Hetzner network to deploy nodes to.
// - **networking** (Block List, Max: 1) (see below)
//
// Optional:
//
// - **hetzner_labels** (Map of String) Extra labels to attach to servers.
// - **pre_install_script** (String) Optional shell script that will be run before K8S is installed.
// - **firewall_id** (String) Optional firewall rule to attach to all nodes.
// - **node_pool** (Block List) (see below)
// - **dedicated_server_node_pool** (Block List) (see below)
// - **image** (String) Default image for all nodes.
// - **ssh_key** (String) SSH key name for accessing deployed nodes.
// - **autoscaler** (Block List, Max: 1) (see below)
// - **floating_ip_selector** (Map of String) If supplied, nodes will get assigned a random floating ip matching the selector.
//
// <a id="nestedblock--hetzner_provider--node_pool"></a>
//
// ### `hetzner_provider.node_pool`
//
// List of node pools.
//
// Required:
//
// - **name** (String)
// - **server_type** (String)
//
// Optional:
//
// - **labels** (Map of String) Labels to attach to nodes of a node pool.
// - **taint** (Block List) (see below)
// - **override_image** (String)
// - **min_size** (Number)
// - **max_size** (Number)
//
// <a id="nestedblock--hetzner_provider--dedicated_server_node_pool"></a>
//
// ### `hetzner_provider.dedicated_server_node_pool`
//
// Node pool that can configure dedicated Hetzner servers.
//
// Required:
//
// - **name** (String)
//
// Optional:
//
// - **labels** (Map of String) Labels to attach to nodes of a node pool.
// - **taint** (Block List) (see below)
//
// <a id="nestedblock--aws_provider"></a>
//
// ### `awsProvider`
//
// Required:
//
// - **region** (String) Region where the cluster nodes will live.
// - **skip_create_roles** (Boolean) If true, Control Plane will not create any roles.
// - **image** (Block List, Max: 1) (see below)
// - **deploy_role_arn** (String) Control Plane will set up the cluster by assuming this role.
// - **vpc_id** (String) The vpc where nodes will be deployed. Supports SSM.
// - **networking** (Block List, Max: 1) (see below)
//
// Optional:
//
// - **aws_tags** (Map of String) Extra tags to attach to all created objects.
// - **pre_install_script** (String) Optional shell script that will be run before K8S is installed. Supports SSM.
// - **key_pair** (String) Name of keyPair. Supports SSM
// - **disk_encryption_key_arn** (String) KMS key used to encrypt volumes. Supports SSM.
// - **security_group_ids** (List of String) Security groups to deploy nodes to. Security groups control if the cluster is multi-zone or single-zon.
// - **node_pool** (Block List) (see below)
// - **autoscaler** (Block List, Max: 1) (see below)
//
// <a id="nestedblock--aws_provider--node_pool"></a>
//
// ### `aws_provider.node_pool`
//
// List of node pools.
//
// Required:
//
// - **name** (String)
// - **instance_types** (List of String)
// - **override_image** (Block List, Max: 1) (see below)
// - **subnet_ids** (List of String)
//
// Optional:
//
// - **labels** (Map of String) Labels to attach to nodes of a node pool.
// - **taint** (Block List) (see below)
// - **boot_disk_size** (Number) Size in GB.
// - **min_size** (Number)
// - **max_size** (Number)
// - **on_demand_base_capacity** (Number)
// - **on_demand_percentage_above_base_capacity** (Number)
// - **spot_allocation_strategy** (String)
// - **extra_security_group_ids** (List of String)
//
// <a id="nestedblock--aws_provider--ami"></a>
//
// ### `ami`
//
// Default image for all nodes.
//
// Required:
//
// > **Note** Only one of the following listed below can be included.
//
// - **recommended** (String)
// - **exact** (String) Support SSM.
//
// <a id="nestedblock--ephemeral_provider"></a>
//
// ### `ephemeralProvider`
//
// Required:
//
// - **location** (String) Control Plane location that will host the K8S components. Prefer one that is closest to where the nodes are running.
//
// Optional:
//
// - **node_pool** (Block List) (see below)
//
// <a id="nestedblock--ephemeral_provider--node_pool"></a>
//
// ### `ephemeral_provider.node_pool`
//
// List of node pools.
//
// Required:
//
// - **name** (String)
// - **count** (Int) Number of nodes to deploy.
// - **arch** (String) CPU architecture of the nodes.
// - **flavor** (String) Linux distro to use for ephemeral nodes.
// - **cpu** (String) Allocated CPU.
// - **memory** (String) Allocated memory.
//
// Optional:
//
// - **labels** (Map of String) Labels to attach to nodes of a node pool.
// - **taint** (Block List) (see below)
//
// <a id="nestedblock--autoscaler"></a>
//
// ### `autoscaler`
//
// Optional:
//
// - **expander** (List of String)
// - **unneeded_time** (String)
// - **unready_time** (String)
// - **utilization_threshold** (Float64)
//
// <a id="nestedblock--firewall"></a>
//
// ### `firewall`
//
// Allow-list.
//
// Required:
//
// - **source_cidr** (String)
//
// Optional:
//
// - **description** (String)
//
// <a id="nestedblock--add_ons"></a>
//
// ### `addOns`
//
// Optional:
//
// - **dashboard** (Boolean)
// - **azure_workload_identity** (Block List, Max: 1) (see below)
// - **aws_workload_identity** (Boolean)
// - **local_path_storage** (Boolean)
// - **metrics** (Block List, Max: 1) (see below)
// - **logs** (Block List, Max: 1) (see below)
// - **nvidia** (Block List, Max: 1) (see below)
// - **aws_efs** (Block List, Max: 1) (see below)
// - **aws_ecr** (Block List, Max: 1) (see below)
// - **aws_elb** (Block List, Max: 1) (see below)
// - **azure_acr** (Block List, Max: 1) (see below)
// - **sysbox** (Boolean)
//
// <a id="nestedblock--add_ons--azure_workload_identity"></a>
//
// ### `add_ons.azure_workload_identity`
//
// Required:
//
// - **tenant_id** (String) Tenant ID to use for workload identity.
//
// <a id="nestedblock--add_ons--metrics"></a>
//
// ### `add_ons.metrics`
//
// Optional:
//
// - **kube_state** (Boolean) Enable kube-state metrics.
// - **core_dns** (Boolean) Enable scraping of core-dns service.
// - **kubelet** (Boolean) Enable scraping kubelet stats.
// - **api_server** (Boolean) Enable scraping apiserver stats.
// - **node_exporter** (Boolean) Enable collecting node-level stats (disk, network, filesystem, etc).
// - **cadvisor** (Boolean) Enable CNI-level container stats.
// - **scrape_annotated** (Block List, Max: 1) (see below)
//
// <a id="nestedblock--add_ons--metrics--scrape-annotated"></a>
//
// ### `add_ons.metrics.scrape-annotated`
//
// Scrape pods annotated with prometheus.io/scrape=true.
//
// Optional:
//
// - **interval_seconds** (Number)
// - **include_namespaces** (String)
// - **exclude_namespaces** (String)
// - **retain_labels** (String)
//
// <a id="nestedblock--add_ons--logs"></a>
//
// ### `add_ons.logs`
//
// Optional:
//
// - **audit_enabled** (Boolean) Collect k8s audit log as log events.
// - **include_namespaces** (String)
// - **exclude_namespaces** (String)
//
// <a id="nestedblock--add_ons--nvidia"></a>
//
// ### `add_ons.nvidia`
//
// Required:
//
// - **taint_gpu_nodes** (Boolean)
//
// <a id="nestedblock--add_ons--aws--efs"></a>
//
// ### `add_ons.aws_efs`
//
// Required:
//
// - **role_arn** (String) Use this role for EFS interaction.
//
// <a id="nestedblock--add_ons--aws--ecr"></a>
//
// ### `add_ons.aws_ecr`
//
// Required:
//
// - **role_arn** (String) Role to use when authorizing ECR pulls. Optional on AWS, in which case it will use the instance role to pull.
//
// <a id="nestedblock--add_ons--aws--elb"></a>
//
// ### `add_ons.aws_elb`
//
// Required:
//
// - **role_arn** (String) Role to use when authorizing calls to EC2 ELB. Optional on AWS, when not provided it will create the recommended role.
//
// <a id="nestedblock--add_ons--azure_acr"></a>
//
// ### `add_ons.azure_acr`
//
// Required:
//
// - **client_id** (String)
//
// ## Outputs
//
// The following attributes are exported:
//
// - **cpln_id** (String) The ID, in GUID format, of the Mk8s.
// - **alias** (String) The alias name of the Mk8s.
// - **self_link** (String) Full link to this resource. Can be referenced by other resources.
// - **status** (Block List, Max: 1) (see below).
//
// <a id="nestedblock--status"></a>
//
// ### `status`
//
// Status of the mk8s.
//
// Read-Only:
//
// - **oidc_provider_url** (String)
// - **server_url** (String)
// - **home_location** (String)
// - **add_ons** (Block List, Max: 1) (see below)
//
// <a id="nestedblock--status--add_ons"></a>
//
// ### `status.add_ons`
//
// Read-Only:
//
// - **dashboard** (Block List, Max: 1) (see below)
// - **aws_workload_identity** (Block List, Max: 1) (see below)
// - **metrics** (Block List, Max: 1) (see below)
// - **logs** (Block List, Max: 1) (see below)
// - **aws_ecr** (Block List, Max: 1) (see below)
// - **aws_efs** (Block List, Max: 1) (see below)
// - **aws_elb** (Block List, Max: 1) (see below)
//
// <a id="nestedblock--status--add_ons--dashobard"></a>
//
// ### `status.add_ons.dashboard`
//
// Read-Only:
//
// - **url** (String) Access to dashboard.
//
// <a id="nestedblock--status--add_ons--aws_workload_identity"></a>
//
// ### `status.add_ons.aws_workload_identity`
//
// Read-Only:
//
// - **oidc_provider_config** (Block List, Max: 1) (see below)
// - **trust_policy** (String)
//
// <a id="nestedblock--status--add_ons--aws_workload_identity--oidc_provider_config"></a>
//
// ### `status.add_ons.aws_workload_identity.oidc_provider_config`
//
// Read-Only:
//
// - **provider_url** (String)
// - **audience** (String)
//
// <a id="nestedblock--status--add_ons--metrics"></a>
//
// ### `status.add_ons.metrics`
//
// Read-Only:
//
// - **prometheus_endpoint** (String)
// - **remote_write_config** (String)
//
// <a id="nestedblock--status--add_ons--logs"></a>
//
// ### `status.add_ons.logs`
//
// Read-Only:
//
// - **loki_address** (String) Loki endpoint to query logs from.
//
// <a id="nestedblock--status--add_ons--aws"></a>
//
// ### `status.add_ons.aws`
//
// Read-Only:
//
// - **trust_policy** (String)
//
// ## Example Usage
type Mk8s struct {
	pulumi.CustomResourceState

	AddOns Mk8sAddOnsPtrOutput `pulumi:"addOns"`
	// The alias name of the Mk8s.
	Alias       pulumi.StringOutput      `pulumi:"alias"`
	AwsProvider Mk8sAwsProviderPtrOutput `pulumi:"awsProvider"`
	// The ID, in GUID format, of the Mk8s.
	CplnId pulumi.StringOutput `pulumi:"cplnId"`
	// Description of the Mk8s.
	Description       pulumi.StringPtrOutput         `pulumi:"description"`
	EphemeralProvider Mk8sEphemeralProviderPtrOutput `pulumi:"ephemeralProvider"`
	// Allow-list.
	Firewalls       Mk8sFirewallArrayOutput      `pulumi:"firewalls"`
	GenericProvider Mk8sGenericProviderPtrOutput `pulumi:"genericProvider"`
	HetznerProvider Mk8sHetznerProviderPtrOutput `pulumi:"hetznerProvider"`
	// Name of the Mk8s.
	Name pulumi.StringOutput `pulumi:"name"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Status of the mk8s.
	Statuses Mk8sStatusArrayOutput `pulumi:"statuses"`
	// Key-value map of resource tags.
	Tags    pulumi.StringMapOutput `pulumi:"tags"`
	Version pulumi.StringOutput    `pulumi:"version"`
}

// NewMk8s registers a new resource with the given unique name, arguments, and options.
func NewMk8s(ctx *pulumi.Context,
	name string, args *Mk8sArgs, opts ...pulumi.ResourceOption) (*Mk8s, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mk8s
	err := ctx.RegisterResource("cpln:index/mk8s:Mk8s", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMk8s gets an existing Mk8s resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMk8s(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Mk8sState, opts ...pulumi.ResourceOption) (*Mk8s, error) {
	var resource Mk8s
	err := ctx.ReadResource("cpln:index/mk8s:Mk8s", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mk8s resources.
type mk8sState struct {
	AddOns *Mk8sAddOns `pulumi:"addOns"`
	// The alias name of the Mk8s.
	Alias       *string          `pulumi:"alias"`
	AwsProvider *Mk8sAwsProvider `pulumi:"awsProvider"`
	// The ID, in GUID format, of the Mk8s.
	CplnId *string `pulumi:"cplnId"`
	// Description of the Mk8s.
	Description       *string                `pulumi:"description"`
	EphemeralProvider *Mk8sEphemeralProvider `pulumi:"ephemeralProvider"`
	// Allow-list.
	Firewalls       []Mk8sFirewall       `pulumi:"firewalls"`
	GenericProvider *Mk8sGenericProvider `pulumi:"genericProvider"`
	HetznerProvider *Mk8sHetznerProvider `pulumi:"hetznerProvider"`
	// Name of the Mk8s.
	Name *string `pulumi:"name"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink *string `pulumi:"selfLink"`
	// Status of the mk8s.
	Statuses []Mk8sStatus `pulumi:"statuses"`
	// Key-value map of resource tags.
	Tags    map[string]string `pulumi:"tags"`
	Version *string           `pulumi:"version"`
}

type Mk8sState struct {
	AddOns Mk8sAddOnsPtrInput
	// The alias name of the Mk8s.
	Alias       pulumi.StringPtrInput
	AwsProvider Mk8sAwsProviderPtrInput
	// The ID, in GUID format, of the Mk8s.
	CplnId pulumi.StringPtrInput
	// Description of the Mk8s.
	Description       pulumi.StringPtrInput
	EphemeralProvider Mk8sEphemeralProviderPtrInput
	// Allow-list.
	Firewalls       Mk8sFirewallArrayInput
	GenericProvider Mk8sGenericProviderPtrInput
	HetznerProvider Mk8sHetznerProviderPtrInput
	// Name of the Mk8s.
	Name pulumi.StringPtrInput
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringPtrInput
	// Status of the mk8s.
	Statuses Mk8sStatusArrayInput
	// Key-value map of resource tags.
	Tags    pulumi.StringMapInput
	Version pulumi.StringPtrInput
}

func (Mk8sState) ElementType() reflect.Type {
	return reflect.TypeOf((*mk8sState)(nil)).Elem()
}

type mk8sArgs struct {
	AddOns      *Mk8sAddOns      `pulumi:"addOns"`
	AwsProvider *Mk8sAwsProvider `pulumi:"awsProvider"`
	// Description of the Mk8s.
	Description       *string                `pulumi:"description"`
	EphemeralProvider *Mk8sEphemeralProvider `pulumi:"ephemeralProvider"`
	// Allow-list.
	Firewalls       []Mk8sFirewall       `pulumi:"firewalls"`
	GenericProvider *Mk8sGenericProvider `pulumi:"genericProvider"`
	HetznerProvider *Mk8sHetznerProvider `pulumi:"hetznerProvider"`
	// Name of the Mk8s.
	Name *string `pulumi:"name"`
	// Key-value map of resource tags.
	Tags    map[string]string `pulumi:"tags"`
	Version string            `pulumi:"version"`
}

// The set of arguments for constructing a Mk8s resource.
type Mk8sArgs struct {
	AddOns      Mk8sAddOnsPtrInput
	AwsProvider Mk8sAwsProviderPtrInput
	// Description of the Mk8s.
	Description       pulumi.StringPtrInput
	EphemeralProvider Mk8sEphemeralProviderPtrInput
	// Allow-list.
	Firewalls       Mk8sFirewallArrayInput
	GenericProvider Mk8sGenericProviderPtrInput
	HetznerProvider Mk8sHetznerProviderPtrInput
	// Name of the Mk8s.
	Name pulumi.StringPtrInput
	// Key-value map of resource tags.
	Tags    pulumi.StringMapInput
	Version pulumi.StringInput
}

func (Mk8sArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mk8sArgs)(nil)).Elem()
}

type Mk8sInput interface {
	pulumi.Input

	ToMk8sOutput() Mk8sOutput
	ToMk8sOutputWithContext(ctx context.Context) Mk8sOutput
}

func (*Mk8s) ElementType() reflect.Type {
	return reflect.TypeOf((**Mk8s)(nil)).Elem()
}

func (i *Mk8s) ToMk8sOutput() Mk8sOutput {
	return i.ToMk8sOutputWithContext(context.Background())
}

func (i *Mk8s) ToMk8sOutputWithContext(ctx context.Context) Mk8sOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Mk8sOutput)
}

func (i *Mk8s) ToOutput(ctx context.Context) pulumix.Output[*Mk8s] {
	return pulumix.Output[*Mk8s]{
		OutputState: i.ToMk8sOutputWithContext(ctx).OutputState,
	}
}

// Mk8sArrayInput is an input type that accepts Mk8sArray and Mk8sArrayOutput values.
// You can construct a concrete instance of `Mk8sArrayInput` via:
//
//	Mk8sArray{ Mk8sArgs{...} }
type Mk8sArrayInput interface {
	pulumi.Input

	ToMk8sArrayOutput() Mk8sArrayOutput
	ToMk8sArrayOutputWithContext(context.Context) Mk8sArrayOutput
}

type Mk8sArray []Mk8sInput

func (Mk8sArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mk8s)(nil)).Elem()
}

func (i Mk8sArray) ToMk8sArrayOutput() Mk8sArrayOutput {
	return i.ToMk8sArrayOutputWithContext(context.Background())
}

func (i Mk8sArray) ToMk8sArrayOutputWithContext(ctx context.Context) Mk8sArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Mk8sArrayOutput)
}

func (i Mk8sArray) ToOutput(ctx context.Context) pulumix.Output[[]*Mk8s] {
	return pulumix.Output[[]*Mk8s]{
		OutputState: i.ToMk8sArrayOutputWithContext(ctx).OutputState,
	}
}

// Mk8sMapInput is an input type that accepts Mk8sMap and Mk8sMapOutput values.
// You can construct a concrete instance of `Mk8sMapInput` via:
//
//	Mk8sMap{ "key": Mk8sArgs{...} }
type Mk8sMapInput interface {
	pulumi.Input

	ToMk8sMapOutput() Mk8sMapOutput
	ToMk8sMapOutputWithContext(context.Context) Mk8sMapOutput
}

type Mk8sMap map[string]Mk8sInput

func (Mk8sMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mk8s)(nil)).Elem()
}

func (i Mk8sMap) ToMk8sMapOutput() Mk8sMapOutput {
	return i.ToMk8sMapOutputWithContext(context.Background())
}

func (i Mk8sMap) ToMk8sMapOutputWithContext(ctx context.Context) Mk8sMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Mk8sMapOutput)
}

func (i Mk8sMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*Mk8s] {
	return pulumix.Output[map[string]*Mk8s]{
		OutputState: i.ToMk8sMapOutputWithContext(ctx).OutputState,
	}
}

type Mk8sOutput struct{ *pulumi.OutputState }

func (Mk8sOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mk8s)(nil)).Elem()
}

func (o Mk8sOutput) ToMk8sOutput() Mk8sOutput {
	return o
}

func (o Mk8sOutput) ToMk8sOutputWithContext(ctx context.Context) Mk8sOutput {
	return o
}

func (o Mk8sOutput) ToOutput(ctx context.Context) pulumix.Output[*Mk8s] {
	return pulumix.Output[*Mk8s]{
		OutputState: o.OutputState,
	}
}

func (o Mk8sOutput) AddOns() Mk8sAddOnsPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sAddOnsPtrOutput { return v.AddOns }).(Mk8sAddOnsPtrOutput)
}

// The alias name of the Mk8s.
func (o Mk8sOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

func (o Mk8sOutput) AwsProvider() Mk8sAwsProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sAwsProviderPtrOutput { return v.AwsProvider }).(Mk8sAwsProviderPtrOutput)
}

// The ID, in GUID format, of the Mk8s.
func (o Mk8sOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

// Description of the Mk8s.
func (o Mk8sOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

func (o Mk8sOutput) EphemeralProvider() Mk8sEphemeralProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sEphemeralProviderPtrOutput { return v.EphemeralProvider }).(Mk8sEphemeralProviderPtrOutput)
}

// Allow-list.
func (o Mk8sOutput) Firewalls() Mk8sFirewallArrayOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sFirewallArrayOutput { return v.Firewalls }).(Mk8sFirewallArrayOutput)
}

func (o Mk8sOutput) GenericProvider() Mk8sGenericProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sGenericProviderPtrOutput { return v.GenericProvider }).(Mk8sGenericProviderPtrOutput)
}

func (o Mk8sOutput) HetznerProvider() Mk8sHetznerProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sHetznerProviderPtrOutput { return v.HetznerProvider }).(Mk8sHetznerProviderPtrOutput)
}

// Name of the Mk8s.
func (o Mk8sOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Full link to this resource. Can be referenced by other resources.
func (o Mk8sOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Status of the mk8s.
func (o Mk8sOutput) Statuses() Mk8sStatusArrayOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sStatusArrayOutput { return v.Statuses }).(Mk8sStatusArrayOutput)
}

// Key-value map of resource tags.
func (o Mk8sOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o Mk8sOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type Mk8sArrayOutput struct{ *pulumi.OutputState }

func (Mk8sArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mk8s)(nil)).Elem()
}

func (o Mk8sArrayOutput) ToMk8sArrayOutput() Mk8sArrayOutput {
	return o
}

func (o Mk8sArrayOutput) ToMk8sArrayOutputWithContext(ctx context.Context) Mk8sArrayOutput {
	return o
}

func (o Mk8sArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*Mk8s] {
	return pulumix.Output[[]*Mk8s]{
		OutputState: o.OutputState,
	}
}

func (o Mk8sArrayOutput) Index(i pulumi.IntInput) Mk8sOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mk8s {
		return vs[0].([]*Mk8s)[vs[1].(int)]
	}).(Mk8sOutput)
}

type Mk8sMapOutput struct{ *pulumi.OutputState }

func (Mk8sMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mk8s)(nil)).Elem()
}

func (o Mk8sMapOutput) ToMk8sMapOutput() Mk8sMapOutput {
	return o
}

func (o Mk8sMapOutput) ToMk8sMapOutputWithContext(ctx context.Context) Mk8sMapOutput {
	return o
}

func (o Mk8sMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*Mk8s] {
	return pulumix.Output[map[string]*Mk8s]{
		OutputState: o.OutputState,
	}
}

func (o Mk8sMapOutput) MapIndex(k pulumi.StringInput) Mk8sOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mk8s {
		return vs[0].(map[string]*Mk8s)[vs[1].(string)]
	}).(Mk8sOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Mk8sInput)(nil)).Elem(), &Mk8s{})
	pulumi.RegisterInputType(reflect.TypeOf((*Mk8sArrayInput)(nil)).Elem(), Mk8sArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Mk8sMapInput)(nil)).Elem(), Mk8sMap{})
	pulumi.RegisterOutputType(Mk8sOutput{})
	pulumi.RegisterOutputType(Mk8sArrayOutput{})
	pulumi.RegisterOutputType(Mk8sMapOutput{})
}
