// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type Mk8s struct {
	pulumi.CustomResourceState

	AddOns Mk8sAddOnsPtrOutput `pulumi:"addOns"`
	// The alias name of the Mk8s.
	Alias         pulumi.StringOutput        `pulumi:"alias"`
	AwsProvider   Mk8sAwsProviderPtrOutput   `pulumi:"awsProvider"`
	AzureProvider Mk8sAzureProviderPtrOutput `pulumi:"azureProvider"`
	// The ID, in GUID format, of the mk8s.
	CplnId pulumi.StringOutput `pulumi:"cplnId"`
	// Description of the mk8s.
	Description          pulumi.StringOutput               `pulumi:"description"`
	DigitalOceanProvider Mk8sDigitalOceanProviderPtrOutput `pulumi:"digitalOceanProvider"`
	EphemeralProvider    Mk8sEphemeralProviderPtrOutput    `pulumi:"ephemeralProvider"`
	// Allow-list.
	Firewalls          Mk8sFirewallArrayOutput         `pulumi:"firewalls"`
	GcpProvider        Mk8sGcpProviderPtrOutput        `pulumi:"gcpProvider"`
	GenericProvider    Mk8sGenericProviderPtrOutput    `pulumi:"genericProvider"`
	HetznerProvider    Mk8sHetznerProviderPtrOutput    `pulumi:"hetznerProvider"`
	LambdalabsProvider Mk8sLambdalabsProviderPtrOutput `pulumi:"lambdalabsProvider"`
	LinodeProvider     Mk8sLinodeProviderPtrOutput     `pulumi:"linodeProvider"`
	// Name of the mk8s.
	Name               pulumi.StringOutput             `pulumi:"name"`
	OblivusProvider    Mk8sOblivusProviderPtrOutput    `pulumi:"oblivusProvider"`
	PaperspaceProvider Mk8sPaperspaceProviderPtrOutput `pulumi:"paperspaceProvider"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Status of the mk8s.
	Statuses Mk8sStatusArrayOutput `pulumi:"statuses"`
	// Key-value map of resource tags.
	Tags           pulumi.StringMapOutput      `pulumi:"tags"`
	TritonProvider Mk8sTritonProviderPtrOutput `pulumi:"tritonProvider"`
	Version        pulumi.StringOutput         `pulumi:"version"`
}

// NewMk8s registers a new resource with the given unique name, arguments, and options.
func NewMk8s(ctx *pulumi.Context,
	name string, args *Mk8sArgs, opts ...pulumi.ResourceOption) (*Mk8s, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Mk8s
	err := ctx.RegisterResource("cpln:index/mk8s:Mk8s", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMk8s gets an existing Mk8s resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMk8s(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *Mk8sState, opts ...pulumi.ResourceOption) (*Mk8s, error) {
	var resource Mk8s
	err := ctx.ReadResource("cpln:index/mk8s:Mk8s", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Mk8s resources.
type mk8sState struct {
	AddOns *Mk8sAddOns `pulumi:"addOns"`
	// The alias name of the Mk8s.
	Alias         *string            `pulumi:"alias"`
	AwsProvider   *Mk8sAwsProvider   `pulumi:"awsProvider"`
	AzureProvider *Mk8sAzureProvider `pulumi:"azureProvider"`
	// The ID, in GUID format, of the mk8s.
	CplnId *string `pulumi:"cplnId"`
	// Description of the mk8s.
	Description          *string                   `pulumi:"description"`
	DigitalOceanProvider *Mk8sDigitalOceanProvider `pulumi:"digitalOceanProvider"`
	EphemeralProvider    *Mk8sEphemeralProvider    `pulumi:"ephemeralProvider"`
	// Allow-list.
	Firewalls          []Mk8sFirewall          `pulumi:"firewalls"`
	GcpProvider        *Mk8sGcpProvider        `pulumi:"gcpProvider"`
	GenericProvider    *Mk8sGenericProvider    `pulumi:"genericProvider"`
	HetznerProvider    *Mk8sHetznerProvider    `pulumi:"hetznerProvider"`
	LambdalabsProvider *Mk8sLambdalabsProvider `pulumi:"lambdalabsProvider"`
	LinodeProvider     *Mk8sLinodeProvider     `pulumi:"linodeProvider"`
	// Name of the mk8s.
	Name               *string                 `pulumi:"name"`
	OblivusProvider    *Mk8sOblivusProvider    `pulumi:"oblivusProvider"`
	PaperspaceProvider *Mk8sPaperspaceProvider `pulumi:"paperspaceProvider"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink *string `pulumi:"selfLink"`
	// Status of the mk8s.
	Statuses []Mk8sStatus `pulumi:"statuses"`
	// Key-value map of resource tags.
	Tags           map[string]string   `pulumi:"tags"`
	TritonProvider *Mk8sTritonProvider `pulumi:"tritonProvider"`
	Version        *string             `pulumi:"version"`
}

type Mk8sState struct {
	AddOns Mk8sAddOnsPtrInput
	// The alias name of the Mk8s.
	Alias         pulumi.StringPtrInput
	AwsProvider   Mk8sAwsProviderPtrInput
	AzureProvider Mk8sAzureProviderPtrInput
	// The ID, in GUID format, of the mk8s.
	CplnId pulumi.StringPtrInput
	// Description of the mk8s.
	Description          pulumi.StringPtrInput
	DigitalOceanProvider Mk8sDigitalOceanProviderPtrInput
	EphemeralProvider    Mk8sEphemeralProviderPtrInput
	// Allow-list.
	Firewalls          Mk8sFirewallArrayInput
	GcpProvider        Mk8sGcpProviderPtrInput
	GenericProvider    Mk8sGenericProviderPtrInput
	HetznerProvider    Mk8sHetznerProviderPtrInput
	LambdalabsProvider Mk8sLambdalabsProviderPtrInput
	LinodeProvider     Mk8sLinodeProviderPtrInput
	// Name of the mk8s.
	Name               pulumi.StringPtrInput
	OblivusProvider    Mk8sOblivusProviderPtrInput
	PaperspaceProvider Mk8sPaperspaceProviderPtrInput
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringPtrInput
	// Status of the mk8s.
	Statuses Mk8sStatusArrayInput
	// Key-value map of resource tags.
	Tags           pulumi.StringMapInput
	TritonProvider Mk8sTritonProviderPtrInput
	Version        pulumi.StringPtrInput
}

func (Mk8sState) ElementType() reflect.Type {
	return reflect.TypeOf((*mk8sState)(nil)).Elem()
}

type mk8sArgs struct {
	AddOns        *Mk8sAddOns        `pulumi:"addOns"`
	AwsProvider   *Mk8sAwsProvider   `pulumi:"awsProvider"`
	AzureProvider *Mk8sAzureProvider `pulumi:"azureProvider"`
	// Description of the mk8s.
	Description          *string                   `pulumi:"description"`
	DigitalOceanProvider *Mk8sDigitalOceanProvider `pulumi:"digitalOceanProvider"`
	EphemeralProvider    *Mk8sEphemeralProvider    `pulumi:"ephemeralProvider"`
	// Allow-list.
	Firewalls          []Mk8sFirewall          `pulumi:"firewalls"`
	GcpProvider        *Mk8sGcpProvider        `pulumi:"gcpProvider"`
	GenericProvider    *Mk8sGenericProvider    `pulumi:"genericProvider"`
	HetznerProvider    *Mk8sHetznerProvider    `pulumi:"hetznerProvider"`
	LambdalabsProvider *Mk8sLambdalabsProvider `pulumi:"lambdalabsProvider"`
	LinodeProvider     *Mk8sLinodeProvider     `pulumi:"linodeProvider"`
	// Name of the mk8s.
	Name               *string                 `pulumi:"name"`
	OblivusProvider    *Mk8sOblivusProvider    `pulumi:"oblivusProvider"`
	PaperspaceProvider *Mk8sPaperspaceProvider `pulumi:"paperspaceProvider"`
	// Key-value map of resource tags.
	Tags           map[string]string   `pulumi:"tags"`
	TritonProvider *Mk8sTritonProvider `pulumi:"tritonProvider"`
	Version        string              `pulumi:"version"`
}

// The set of arguments for constructing a Mk8s resource.
type Mk8sArgs struct {
	AddOns        Mk8sAddOnsPtrInput
	AwsProvider   Mk8sAwsProviderPtrInput
	AzureProvider Mk8sAzureProviderPtrInput
	// Description of the mk8s.
	Description          pulumi.StringPtrInput
	DigitalOceanProvider Mk8sDigitalOceanProviderPtrInput
	EphemeralProvider    Mk8sEphemeralProviderPtrInput
	// Allow-list.
	Firewalls          Mk8sFirewallArrayInput
	GcpProvider        Mk8sGcpProviderPtrInput
	GenericProvider    Mk8sGenericProviderPtrInput
	HetznerProvider    Mk8sHetznerProviderPtrInput
	LambdalabsProvider Mk8sLambdalabsProviderPtrInput
	LinodeProvider     Mk8sLinodeProviderPtrInput
	// Name of the mk8s.
	Name               pulumi.StringPtrInput
	OblivusProvider    Mk8sOblivusProviderPtrInput
	PaperspaceProvider Mk8sPaperspaceProviderPtrInput
	// Key-value map of resource tags.
	Tags           pulumi.StringMapInput
	TritonProvider Mk8sTritonProviderPtrInput
	Version        pulumi.StringInput
}

func (Mk8sArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mk8sArgs)(nil)).Elem()
}

type Mk8sInput interface {
	pulumi.Input

	ToMk8sOutput() Mk8sOutput
	ToMk8sOutputWithContext(ctx context.Context) Mk8sOutput
}

func (*Mk8s) ElementType() reflect.Type {
	return reflect.TypeOf((**Mk8s)(nil)).Elem()
}

func (i *Mk8s) ToMk8sOutput() Mk8sOutput {
	return i.ToMk8sOutputWithContext(context.Background())
}

func (i *Mk8s) ToMk8sOutputWithContext(ctx context.Context) Mk8sOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Mk8sOutput)
}

// Mk8sArrayInput is an input type that accepts Mk8sArray and Mk8sArrayOutput values.
// You can construct a concrete instance of `Mk8sArrayInput` via:
//
//	Mk8sArray{ Mk8sArgs{...} }
type Mk8sArrayInput interface {
	pulumi.Input

	ToMk8sArrayOutput() Mk8sArrayOutput
	ToMk8sArrayOutputWithContext(context.Context) Mk8sArrayOutput
}

type Mk8sArray []Mk8sInput

func (Mk8sArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mk8s)(nil)).Elem()
}

func (i Mk8sArray) ToMk8sArrayOutput() Mk8sArrayOutput {
	return i.ToMk8sArrayOutputWithContext(context.Background())
}

func (i Mk8sArray) ToMk8sArrayOutputWithContext(ctx context.Context) Mk8sArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Mk8sArrayOutput)
}

// Mk8sMapInput is an input type that accepts Mk8sMap and Mk8sMapOutput values.
// You can construct a concrete instance of `Mk8sMapInput` via:
//
//	Mk8sMap{ "key": Mk8sArgs{...} }
type Mk8sMapInput interface {
	pulumi.Input

	ToMk8sMapOutput() Mk8sMapOutput
	ToMk8sMapOutputWithContext(context.Context) Mk8sMapOutput
}

type Mk8sMap map[string]Mk8sInput

func (Mk8sMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mk8s)(nil)).Elem()
}

func (i Mk8sMap) ToMk8sMapOutput() Mk8sMapOutput {
	return i.ToMk8sMapOutputWithContext(context.Background())
}

func (i Mk8sMap) ToMk8sMapOutputWithContext(ctx context.Context) Mk8sMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Mk8sMapOutput)
}

type Mk8sOutput struct{ *pulumi.OutputState }

func (Mk8sOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Mk8s)(nil)).Elem()
}

func (o Mk8sOutput) ToMk8sOutput() Mk8sOutput {
	return o
}

func (o Mk8sOutput) ToMk8sOutputWithContext(ctx context.Context) Mk8sOutput {
	return o
}

func (o Mk8sOutput) AddOns() Mk8sAddOnsPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sAddOnsPtrOutput { return v.AddOns }).(Mk8sAddOnsPtrOutput)
}

// The alias name of the Mk8s.
func (o Mk8sOutput) Alias() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.Alias }).(pulumi.StringOutput)
}

func (o Mk8sOutput) AwsProvider() Mk8sAwsProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sAwsProviderPtrOutput { return v.AwsProvider }).(Mk8sAwsProviderPtrOutput)
}

func (o Mk8sOutput) AzureProvider() Mk8sAzureProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sAzureProviderPtrOutput { return v.AzureProvider }).(Mk8sAzureProviderPtrOutput)
}

// The ID, in GUID format, of the mk8s.
func (o Mk8sOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

// Description of the mk8s.
func (o Mk8sOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o Mk8sOutput) DigitalOceanProvider() Mk8sDigitalOceanProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sDigitalOceanProviderPtrOutput { return v.DigitalOceanProvider }).(Mk8sDigitalOceanProviderPtrOutput)
}

func (o Mk8sOutput) EphemeralProvider() Mk8sEphemeralProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sEphemeralProviderPtrOutput { return v.EphemeralProvider }).(Mk8sEphemeralProviderPtrOutput)
}

// Allow-list.
func (o Mk8sOutput) Firewalls() Mk8sFirewallArrayOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sFirewallArrayOutput { return v.Firewalls }).(Mk8sFirewallArrayOutput)
}

func (o Mk8sOutput) GcpProvider() Mk8sGcpProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sGcpProviderPtrOutput { return v.GcpProvider }).(Mk8sGcpProviderPtrOutput)
}

func (o Mk8sOutput) GenericProvider() Mk8sGenericProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sGenericProviderPtrOutput { return v.GenericProvider }).(Mk8sGenericProviderPtrOutput)
}

func (o Mk8sOutput) HetznerProvider() Mk8sHetznerProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sHetznerProviderPtrOutput { return v.HetznerProvider }).(Mk8sHetznerProviderPtrOutput)
}

func (o Mk8sOutput) LambdalabsProvider() Mk8sLambdalabsProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sLambdalabsProviderPtrOutput { return v.LambdalabsProvider }).(Mk8sLambdalabsProviderPtrOutput)
}

func (o Mk8sOutput) LinodeProvider() Mk8sLinodeProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sLinodeProviderPtrOutput { return v.LinodeProvider }).(Mk8sLinodeProviderPtrOutput)
}

// Name of the mk8s.
func (o Mk8sOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o Mk8sOutput) OblivusProvider() Mk8sOblivusProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sOblivusProviderPtrOutput { return v.OblivusProvider }).(Mk8sOblivusProviderPtrOutput)
}

func (o Mk8sOutput) PaperspaceProvider() Mk8sPaperspaceProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sPaperspaceProviderPtrOutput { return v.PaperspaceProvider }).(Mk8sPaperspaceProviderPtrOutput)
}

// Full link to this resource. Can be referenced by other resources.
func (o Mk8sOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Status of the mk8s.
func (o Mk8sOutput) Statuses() Mk8sStatusArrayOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sStatusArrayOutput { return v.Statuses }).(Mk8sStatusArrayOutput)
}

// Key-value map of resource tags.
func (o Mk8sOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

func (o Mk8sOutput) TritonProvider() Mk8sTritonProviderPtrOutput {
	return o.ApplyT(func(v *Mk8s) Mk8sTritonProviderPtrOutput { return v.TritonProvider }).(Mk8sTritonProviderPtrOutput)
}

func (o Mk8sOutput) Version() pulumi.StringOutput {
	return o.ApplyT(func(v *Mk8s) pulumi.StringOutput { return v.Version }).(pulumi.StringOutput)
}

type Mk8sArrayOutput struct{ *pulumi.OutputState }

func (Mk8sArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Mk8s)(nil)).Elem()
}

func (o Mk8sArrayOutput) ToMk8sArrayOutput() Mk8sArrayOutput {
	return o
}

func (o Mk8sArrayOutput) ToMk8sArrayOutputWithContext(ctx context.Context) Mk8sArrayOutput {
	return o
}

func (o Mk8sArrayOutput) Index(i pulumi.IntInput) Mk8sOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Mk8s {
		return vs[0].([]*Mk8s)[vs[1].(int)]
	}).(Mk8sOutput)
}

type Mk8sMapOutput struct{ *pulumi.OutputState }

func (Mk8sMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Mk8s)(nil)).Elem()
}

func (o Mk8sMapOutput) ToMk8sMapOutput() Mk8sMapOutput {
	return o
}

func (o Mk8sMapOutput) ToMk8sMapOutputWithContext(ctx context.Context) Mk8sMapOutput {
	return o
}

func (o Mk8sMapOutput) MapIndex(k pulumi.StringInput) Mk8sOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Mk8s {
		return vs[0].(map[string]*Mk8s)[vs[1].(string)]
	}).(Mk8sOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*Mk8sInput)(nil)).Elem(), &Mk8s{})
	pulumi.RegisterInputType(reflect.TypeOf((*Mk8sArrayInput)(nil)).Elem(), Mk8sArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*Mk8sMapInput)(nil)).Elem(), Mk8sMap{})
	pulumi.RegisterOutputType(Mk8sOutput{})
	pulumi.RegisterOutputType(Mk8sArrayOutput{})
	pulumi.RegisterOutputType(Mk8sMapOutput{})
}
