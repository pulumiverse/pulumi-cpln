// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type VolumeSet struct {
	pulumi.CustomResourceState

	// Automated adjustment of the volume set's capacity based on predefined metrics or conditions.
	Autoscaling VolumeSetAutoscalingPtrOutput `pulumi:"autoscaling"`
	// The ID, in GUID format, of the volume set.
	CplnId pulumi.StringOutput `pulumi:"cplnId"`
	// Configuration for customer-managed encryption keys, keyed by region.
	CustomEncryption VolumeSetCustomEncryptionPtrOutput `pulumi:"customEncryption"`
	// Description of the volume set.
	Description pulumi.StringOutput `pulumi:"description"`
	// Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`.
	FileSystemType pulumi.StringOutput `pulumi:"fileSystemType"`
	// Name of the associated GVC.
	Gvc pulumi.StringOutput `pulumi:"gvc"`
	// The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd` is `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.
	InitialCapacity pulumi.IntOutput `pulumi:"initialCapacity"`
	// A list of mount options to use when mounting volumes in this set.
	MountOptions VolumeSetMountOptionsPtrOutput `pulumi:"mountOptions"`
	// Name of the volume set.
	Name pulumi.StringOutput `pulumi:"name"`
	// Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or `high-throughput-ssd`.
	PerformanceClass pulumi.StringOutput `pulumi:"performanceClass"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringOutput `pulumi:"selfLink"`
	// Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.
	Snapshots VolumeSetSnapshotsPtrOutput `pulumi:"snapshots"`
	// Status of the Volume Set.
	Statuses VolumeSetStatusArrayOutput `pulumi:"statuses"`
	// For self-hosted locations only. The storage class used for volumes in this set will be {performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be {performanceClass}-{fileSystemType}
	StorageClassSuffix pulumi.StringPtrOutput `pulumi:"storageClassSuffix"`
	// Key-value map of resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Output used when linking a volume set to a workload.
	VolumesetLink pulumi.StringOutput `pulumi:"volumesetLink"`
}

// NewVolumeSet registers a new resource with the given unique name, arguments, and options.
func NewVolumeSet(ctx *pulumi.Context,
	name string, args *VolumeSetArgs, opts ...pulumi.ResourceOption) (*VolumeSet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Gvc == nil {
		return nil, errors.New("invalid value for required argument 'Gvc'")
	}
	if args.InitialCapacity == nil {
		return nil, errors.New("invalid value for required argument 'InitialCapacity'")
	}
	if args.PerformanceClass == nil {
		return nil, errors.New("invalid value for required argument 'PerformanceClass'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource VolumeSet
	err := ctx.RegisterResource("cpln:index/volumeSet:VolumeSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVolumeSet gets an existing VolumeSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolumeSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VolumeSetState, opts ...pulumi.ResourceOption) (*VolumeSet, error) {
	var resource VolumeSet
	err := ctx.ReadResource("cpln:index/volumeSet:VolumeSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VolumeSet resources.
type volumeSetState struct {
	// Automated adjustment of the volume set's capacity based on predefined metrics or conditions.
	Autoscaling *VolumeSetAutoscaling `pulumi:"autoscaling"`
	// The ID, in GUID format, of the volume set.
	CplnId *string `pulumi:"cplnId"`
	// Configuration for customer-managed encryption keys, keyed by region.
	CustomEncryption *VolumeSetCustomEncryption `pulumi:"customEncryption"`
	// Description of the volume set.
	Description *string `pulumi:"description"`
	// Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`.
	FileSystemType *string `pulumi:"fileSystemType"`
	// Name of the associated GVC.
	Gvc *string `pulumi:"gvc"`
	// The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd` is `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.
	InitialCapacity *int `pulumi:"initialCapacity"`
	// A list of mount options to use when mounting volumes in this set.
	MountOptions *VolumeSetMountOptions `pulumi:"mountOptions"`
	// Name of the volume set.
	Name *string `pulumi:"name"`
	// Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or `high-throughput-ssd`.
	PerformanceClass *string `pulumi:"performanceClass"`
	// Full link to this resource. Can be referenced by other resources.
	SelfLink *string `pulumi:"selfLink"`
	// Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.
	Snapshots *VolumeSetSnapshots `pulumi:"snapshots"`
	// Status of the Volume Set.
	Statuses []VolumeSetStatus `pulumi:"statuses"`
	// For self-hosted locations only. The storage class used for volumes in this set will be {performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be {performanceClass}-{fileSystemType}
	StorageClassSuffix *string `pulumi:"storageClassSuffix"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Output used when linking a volume set to a workload.
	VolumesetLink *string `pulumi:"volumesetLink"`
}

type VolumeSetState struct {
	// Automated adjustment of the volume set's capacity based on predefined metrics or conditions.
	Autoscaling VolumeSetAutoscalingPtrInput
	// The ID, in GUID format, of the volume set.
	CplnId pulumi.StringPtrInput
	// Configuration for customer-managed encryption keys, keyed by region.
	CustomEncryption VolumeSetCustomEncryptionPtrInput
	// Description of the volume set.
	Description pulumi.StringPtrInput
	// Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`.
	FileSystemType pulumi.StringPtrInput
	// Name of the associated GVC.
	Gvc pulumi.StringPtrInput
	// The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd` is `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.
	InitialCapacity pulumi.IntPtrInput
	// A list of mount options to use when mounting volumes in this set.
	MountOptions VolumeSetMountOptionsPtrInput
	// Name of the volume set.
	Name pulumi.StringPtrInput
	// Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or `high-throughput-ssd`.
	PerformanceClass pulumi.StringPtrInput
	// Full link to this resource. Can be referenced by other resources.
	SelfLink pulumi.StringPtrInput
	// Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.
	Snapshots VolumeSetSnapshotsPtrInput
	// Status of the Volume Set.
	Statuses VolumeSetStatusArrayInput
	// For self-hosted locations only. The storage class used for volumes in this set will be {performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be {performanceClass}-{fileSystemType}
	StorageClassSuffix pulumi.StringPtrInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
	// Output used when linking a volume set to a workload.
	VolumesetLink pulumi.StringPtrInput
}

func (VolumeSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeSetState)(nil)).Elem()
}

type volumeSetArgs struct {
	// Automated adjustment of the volume set's capacity based on predefined metrics or conditions.
	Autoscaling *VolumeSetAutoscaling `pulumi:"autoscaling"`
	// Configuration for customer-managed encryption keys, keyed by region.
	CustomEncryption *VolumeSetCustomEncryption `pulumi:"customEncryption"`
	// Description of the volume set.
	Description *string `pulumi:"description"`
	// Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`.
	FileSystemType *string `pulumi:"fileSystemType"`
	// Name of the associated GVC.
	Gvc string `pulumi:"gvc"`
	// The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd` is `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.
	InitialCapacity int `pulumi:"initialCapacity"`
	// A list of mount options to use when mounting volumes in this set.
	MountOptions *VolumeSetMountOptions `pulumi:"mountOptions"`
	// Name of the volume set.
	Name *string `pulumi:"name"`
	// Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or `high-throughput-ssd`.
	PerformanceClass string `pulumi:"performanceClass"`
	// Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.
	Snapshots *VolumeSetSnapshots `pulumi:"snapshots"`
	// For self-hosted locations only. The storage class used for volumes in this set will be {performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be {performanceClass}-{fileSystemType}
	StorageClassSuffix *string `pulumi:"storageClassSuffix"`
	// Key-value map of resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a VolumeSet resource.
type VolumeSetArgs struct {
	// Automated adjustment of the volume set's capacity based on predefined metrics or conditions.
	Autoscaling VolumeSetAutoscalingPtrInput
	// Configuration for customer-managed encryption keys, keyed by region.
	CustomEncryption VolumeSetCustomEncryptionPtrInput
	// Description of the volume set.
	Description pulumi.StringPtrInput
	// Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`.
	FileSystemType pulumi.StringPtrInput
	// Name of the associated GVC.
	Gvc pulumi.StringInput
	// The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd` is `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.
	InitialCapacity pulumi.IntInput
	// A list of mount options to use when mounting volumes in this set.
	MountOptions VolumeSetMountOptionsPtrInput
	// Name of the volume set.
	Name pulumi.StringPtrInput
	// Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or `high-throughput-ssd`.
	PerformanceClass pulumi.StringInput
	// Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.
	Snapshots VolumeSetSnapshotsPtrInput
	// For self-hosted locations only. The storage class used for volumes in this set will be {performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be {performanceClass}-{fileSystemType}
	StorageClassSuffix pulumi.StringPtrInput
	// Key-value map of resource tags.
	Tags pulumi.StringMapInput
}

func (VolumeSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*volumeSetArgs)(nil)).Elem()
}

type VolumeSetInput interface {
	pulumi.Input

	ToVolumeSetOutput() VolumeSetOutput
	ToVolumeSetOutputWithContext(ctx context.Context) VolumeSetOutput
}

func (*VolumeSet) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSet)(nil)).Elem()
}

func (i *VolumeSet) ToVolumeSetOutput() VolumeSetOutput {
	return i.ToVolumeSetOutputWithContext(context.Background())
}

func (i *VolumeSet) ToVolumeSetOutputWithContext(ctx context.Context) VolumeSetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSetOutput)
}

// VolumeSetArrayInput is an input type that accepts VolumeSetArray and VolumeSetArrayOutput values.
// You can construct a concrete instance of `VolumeSetArrayInput` via:
//
//	VolumeSetArray{ VolumeSetArgs{...} }
type VolumeSetArrayInput interface {
	pulumi.Input

	ToVolumeSetArrayOutput() VolumeSetArrayOutput
	ToVolumeSetArrayOutputWithContext(context.Context) VolumeSetArrayOutput
}

type VolumeSetArray []VolumeSetInput

func (VolumeSetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeSet)(nil)).Elem()
}

func (i VolumeSetArray) ToVolumeSetArrayOutput() VolumeSetArrayOutput {
	return i.ToVolumeSetArrayOutputWithContext(context.Background())
}

func (i VolumeSetArray) ToVolumeSetArrayOutputWithContext(ctx context.Context) VolumeSetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSetArrayOutput)
}

// VolumeSetMapInput is an input type that accepts VolumeSetMap and VolumeSetMapOutput values.
// You can construct a concrete instance of `VolumeSetMapInput` via:
//
//	VolumeSetMap{ "key": VolumeSetArgs{...} }
type VolumeSetMapInput interface {
	pulumi.Input

	ToVolumeSetMapOutput() VolumeSetMapOutput
	ToVolumeSetMapOutputWithContext(context.Context) VolumeSetMapOutput
}

type VolumeSetMap map[string]VolumeSetInput

func (VolumeSetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeSet)(nil)).Elem()
}

func (i VolumeSetMap) ToVolumeSetMapOutput() VolumeSetMapOutput {
	return i.ToVolumeSetMapOutputWithContext(context.Background())
}

func (i VolumeSetMap) ToVolumeSetMapOutputWithContext(ctx context.Context) VolumeSetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VolumeSetMapOutput)
}

type VolumeSetOutput struct{ *pulumi.OutputState }

func (VolumeSetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VolumeSet)(nil)).Elem()
}

func (o VolumeSetOutput) ToVolumeSetOutput() VolumeSetOutput {
	return o
}

func (o VolumeSetOutput) ToVolumeSetOutputWithContext(ctx context.Context) VolumeSetOutput {
	return o
}

// Automated adjustment of the volume set's capacity based on predefined metrics or conditions.
func (o VolumeSetOutput) Autoscaling() VolumeSetAutoscalingPtrOutput {
	return o.ApplyT(func(v *VolumeSet) VolumeSetAutoscalingPtrOutput { return v.Autoscaling }).(VolumeSetAutoscalingPtrOutput)
}

// The ID, in GUID format, of the volume set.
func (o VolumeSetOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.StringOutput { return v.CplnId }).(pulumi.StringOutput)
}

// Configuration for customer-managed encryption keys, keyed by region.
func (o VolumeSetOutput) CustomEncryption() VolumeSetCustomEncryptionPtrOutput {
	return o.ApplyT(func(v *VolumeSet) VolumeSetCustomEncryptionPtrOutput { return v.CustomEncryption }).(VolumeSetCustomEncryptionPtrOutput)
}

// Description of the volume set.
func (o VolumeSetOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Each volume set has a single, immutable file system. Valid types: `xfs` or `ext4`.
func (o VolumeSetOutput) FileSystemType() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.StringOutput { return v.FileSystemType }).(pulumi.StringOutput)
}

// Name of the associated GVC.
func (o VolumeSetOutput) Gvc() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.StringOutput { return v.Gvc }).(pulumi.StringOutput)
}

// The initial volume size in this set, specified in GB. The minimum size for the performance class `general-purpose-ssd` is `10 GB`, while `high-throughput-ssd` requires at least `200 GB`.
func (o VolumeSetOutput) InitialCapacity() pulumi.IntOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.IntOutput { return v.InitialCapacity }).(pulumi.IntOutput)
}

// A list of mount options to use when mounting volumes in this set.
func (o VolumeSetOutput) MountOptions() VolumeSetMountOptionsPtrOutput {
	return o.ApplyT(func(v *VolumeSet) VolumeSetMountOptionsPtrOutput { return v.MountOptions }).(VolumeSetMountOptionsPtrOutput)
}

// Name of the volume set.
func (o VolumeSetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Each volume set has a single, immutable, performance class. Valid classes: `general-purpose-ssd` or `high-throughput-ssd`.
func (o VolumeSetOutput) PerformanceClass() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.StringOutput { return v.PerformanceClass }).(pulumi.StringOutput)
}

// Full link to this resource. Can be referenced by other resources.
func (o VolumeSetOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.StringOutput { return v.SelfLink }).(pulumi.StringOutput)
}

// Point-in-time copies of data stored within the volume set, capturing the state of the data at a specific moment.
func (o VolumeSetOutput) Snapshots() VolumeSetSnapshotsPtrOutput {
	return o.ApplyT(func(v *VolumeSet) VolumeSetSnapshotsPtrOutput { return v.Snapshots }).(VolumeSetSnapshotsPtrOutput)
}

// Status of the Volume Set.
func (o VolumeSetOutput) Statuses() VolumeSetStatusArrayOutput {
	return o.ApplyT(func(v *VolumeSet) VolumeSetStatusArrayOutput { return v.Statuses }).(VolumeSetStatusArrayOutput)
}

// For self-hosted locations only. The storage class used for volumes in this set will be {performanceClass}-{fileSystemType}-{storageClassSuffix} if it exists, otherwise it will be {performanceClass}-{fileSystemType}
func (o VolumeSetOutput) StorageClassSuffix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.StringPtrOutput { return v.StorageClassSuffix }).(pulumi.StringPtrOutput)
}

// Key-value map of resource tags.
func (o VolumeSetOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Output used when linking a volume set to a workload.
func (o VolumeSetOutput) VolumesetLink() pulumi.StringOutput {
	return o.ApplyT(func(v *VolumeSet) pulumi.StringOutput { return v.VolumesetLink }).(pulumi.StringOutput)
}

type VolumeSetArrayOutput struct{ *pulumi.OutputState }

func (VolumeSetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VolumeSet)(nil)).Elem()
}

func (o VolumeSetArrayOutput) ToVolumeSetArrayOutput() VolumeSetArrayOutput {
	return o
}

func (o VolumeSetArrayOutput) ToVolumeSetArrayOutputWithContext(ctx context.Context) VolumeSetArrayOutput {
	return o
}

func (o VolumeSetArrayOutput) Index(i pulumi.IntInput) VolumeSetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VolumeSet {
		return vs[0].([]*VolumeSet)[vs[1].(int)]
	}).(VolumeSetOutput)
}

type VolumeSetMapOutput struct{ *pulumi.OutputState }

func (VolumeSetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VolumeSet)(nil)).Elem()
}

func (o VolumeSetMapOutput) ToVolumeSetMapOutput() VolumeSetMapOutput {
	return o
}

func (o VolumeSetMapOutput) ToVolumeSetMapOutputWithContext(ctx context.Context) VolumeSetMapOutput {
	return o
}

func (o VolumeSetMapOutput) MapIndex(k pulumi.StringInput) VolumeSetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VolumeSet {
		return vs[0].(map[string]*VolumeSet)[vs[1].(string)]
	}).(VolumeSetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSetInput)(nil)).Elem(), &VolumeSet{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSetArrayInput)(nil)).Elem(), VolumeSetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VolumeSetMapInput)(nil)).Elem(), VolumeSetMap{})
	pulumi.RegisterOutputType(VolumeSetOutput{})
	pulumi.RegisterOutputType(VolumeSetArrayOutput{})
	pulumi.RegisterOutputType(VolumeSetMapOutput{})
}
