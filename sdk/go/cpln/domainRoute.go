// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

type DomainRoute struct {
	pulumi.CustomResourceState

	// The self link of the domain to add the route to.
	DomainLink pulumi.StringOutput `pulumi:"domainLink"`
	// The port the route corresponds to. Default: 443
	DomainPort pulumi.IntPtrOutput `pulumi:"domainPort"`
	// Modify the headers for all http requests for this route.
	Headers DomainRouteHeadersPtrOutput `pulumi:"headers"`
	// This option allows forwarding traffic for different host headers to different workloads. This will only be used when the
	// target GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on
	// Slack or at support@controlplane.com for additional details.
	HostPrefix pulumi.StringPtrOutput `pulumi:"hostPrefix"`
	// For the linked workload, the port to route traffic to.
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The path will match any unmatched path prefixes for the subdomain.
	Prefix pulumi.StringPtrOutput `pulumi:"prefix"`
	// Used to match URI paths. Uses the google re2 regex syntax.
	Regex pulumi.StringPtrOutput `pulumi:"regex"`
	// A path prefix can be configured to be replaced when forwarding the request to the Workload.
	ReplacePrefix pulumi.StringPtrOutput `pulumi:"replacePrefix"`
	// The link of the workload to map the prefix to.
	WorkloadLink pulumi.StringOutput `pulumi:"workloadLink"`
}

// NewDomainRoute registers a new resource with the given unique name, arguments, and options.
func NewDomainRoute(ctx *pulumi.Context,
	name string, args *DomainRouteArgs, opts ...pulumi.ResourceOption) (*DomainRoute, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainLink == nil {
		return nil, errors.New("invalid value for required argument 'DomainLink'")
	}
	if args.WorkloadLink == nil {
		return nil, errors.New("invalid value for required argument 'WorkloadLink'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DomainRoute
	err := ctx.RegisterResource("cpln:index/domainRoute:DomainRoute", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDomainRoute gets an existing DomainRoute resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDomainRoute(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DomainRouteState, opts ...pulumi.ResourceOption) (*DomainRoute, error) {
	var resource DomainRoute
	err := ctx.ReadResource("cpln:index/domainRoute:DomainRoute", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DomainRoute resources.
type domainRouteState struct {
	// The self link of the domain to add the route to.
	DomainLink *string `pulumi:"domainLink"`
	// The port the route corresponds to. Default: 443
	DomainPort *int `pulumi:"domainPort"`
	// Modify the headers for all http requests for this route.
	Headers *DomainRouteHeaders `pulumi:"headers"`
	// This option allows forwarding traffic for different host headers to different workloads. This will only be used when the
	// target GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on
	// Slack or at support@controlplane.com for additional details.
	HostPrefix *string `pulumi:"hostPrefix"`
	// For the linked workload, the port to route traffic to.
	Port *int `pulumi:"port"`
	// The path will match any unmatched path prefixes for the subdomain.
	Prefix *string `pulumi:"prefix"`
	// Used to match URI paths. Uses the google re2 regex syntax.
	Regex *string `pulumi:"regex"`
	// A path prefix can be configured to be replaced when forwarding the request to the Workload.
	ReplacePrefix *string `pulumi:"replacePrefix"`
	// The link of the workload to map the prefix to.
	WorkloadLink *string `pulumi:"workloadLink"`
}

type DomainRouteState struct {
	// The self link of the domain to add the route to.
	DomainLink pulumi.StringPtrInput
	// The port the route corresponds to. Default: 443
	DomainPort pulumi.IntPtrInput
	// Modify the headers for all http requests for this route.
	Headers DomainRouteHeadersPtrInput
	// This option allows forwarding traffic for different host headers to different workloads. This will only be used when the
	// target GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on
	// Slack or at support@controlplane.com for additional details.
	HostPrefix pulumi.StringPtrInput
	// For the linked workload, the port to route traffic to.
	Port pulumi.IntPtrInput
	// The path will match any unmatched path prefixes for the subdomain.
	Prefix pulumi.StringPtrInput
	// Used to match URI paths. Uses the google re2 regex syntax.
	Regex pulumi.StringPtrInput
	// A path prefix can be configured to be replaced when forwarding the request to the Workload.
	ReplacePrefix pulumi.StringPtrInput
	// The link of the workload to map the prefix to.
	WorkloadLink pulumi.StringPtrInput
}

func (DomainRouteState) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRouteState)(nil)).Elem()
}

type domainRouteArgs struct {
	// The self link of the domain to add the route to.
	DomainLink string `pulumi:"domainLink"`
	// The port the route corresponds to. Default: 443
	DomainPort *int `pulumi:"domainPort"`
	// Modify the headers for all http requests for this route.
	Headers *DomainRouteHeaders `pulumi:"headers"`
	// This option allows forwarding traffic for different host headers to different workloads. This will only be used when the
	// target GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on
	// Slack or at support@controlplane.com for additional details.
	HostPrefix *string `pulumi:"hostPrefix"`
	// For the linked workload, the port to route traffic to.
	Port *int `pulumi:"port"`
	// The path will match any unmatched path prefixes for the subdomain.
	Prefix *string `pulumi:"prefix"`
	// Used to match URI paths. Uses the google re2 regex syntax.
	Regex *string `pulumi:"regex"`
	// A path prefix can be configured to be replaced when forwarding the request to the Workload.
	ReplacePrefix *string `pulumi:"replacePrefix"`
	// The link of the workload to map the prefix to.
	WorkloadLink string `pulumi:"workloadLink"`
}

// The set of arguments for constructing a DomainRoute resource.
type DomainRouteArgs struct {
	// The self link of the domain to add the route to.
	DomainLink pulumi.StringInput
	// The port the route corresponds to. Default: 443
	DomainPort pulumi.IntPtrInput
	// Modify the headers for all http requests for this route.
	Headers DomainRouteHeadersPtrInput
	// This option allows forwarding traffic for different host headers to different workloads. This will only be used when the
	// target GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on
	// Slack or at support@controlplane.com for additional details.
	HostPrefix pulumi.StringPtrInput
	// For the linked workload, the port to route traffic to.
	Port pulumi.IntPtrInput
	// The path will match any unmatched path prefixes for the subdomain.
	Prefix pulumi.StringPtrInput
	// Used to match URI paths. Uses the google re2 regex syntax.
	Regex pulumi.StringPtrInput
	// A path prefix can be configured to be replaced when forwarding the request to the Workload.
	ReplacePrefix pulumi.StringPtrInput
	// The link of the workload to map the prefix to.
	WorkloadLink pulumi.StringInput
}

func (DomainRouteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*domainRouteArgs)(nil)).Elem()
}

type DomainRouteInput interface {
	pulumi.Input

	ToDomainRouteOutput() DomainRouteOutput
	ToDomainRouteOutputWithContext(ctx context.Context) DomainRouteOutput
}

func (*DomainRoute) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRoute)(nil)).Elem()
}

func (i *DomainRoute) ToDomainRouteOutput() DomainRouteOutput {
	return i.ToDomainRouteOutputWithContext(context.Background())
}

func (i *DomainRoute) ToDomainRouteOutputWithContext(ctx context.Context) DomainRouteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRouteOutput)
}

// DomainRouteArrayInput is an input type that accepts DomainRouteArray and DomainRouteArrayOutput values.
// You can construct a concrete instance of `DomainRouteArrayInput` via:
//
//	DomainRouteArray{ DomainRouteArgs{...} }
type DomainRouteArrayInput interface {
	pulumi.Input

	ToDomainRouteArrayOutput() DomainRouteArrayOutput
	ToDomainRouteArrayOutputWithContext(context.Context) DomainRouteArrayOutput
}

type DomainRouteArray []DomainRouteInput

func (DomainRouteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainRoute)(nil)).Elem()
}

func (i DomainRouteArray) ToDomainRouteArrayOutput() DomainRouteArrayOutput {
	return i.ToDomainRouteArrayOutputWithContext(context.Background())
}

func (i DomainRouteArray) ToDomainRouteArrayOutputWithContext(ctx context.Context) DomainRouteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRouteArrayOutput)
}

// DomainRouteMapInput is an input type that accepts DomainRouteMap and DomainRouteMapOutput values.
// You can construct a concrete instance of `DomainRouteMapInput` via:
//
//	DomainRouteMap{ "key": DomainRouteArgs{...} }
type DomainRouteMapInput interface {
	pulumi.Input

	ToDomainRouteMapOutput() DomainRouteMapOutput
	ToDomainRouteMapOutputWithContext(context.Context) DomainRouteMapOutput
}

type DomainRouteMap map[string]DomainRouteInput

func (DomainRouteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainRoute)(nil)).Elem()
}

func (i DomainRouteMap) ToDomainRouteMapOutput() DomainRouteMapOutput {
	return i.ToDomainRouteMapOutputWithContext(context.Background())
}

func (i DomainRouteMap) ToDomainRouteMapOutputWithContext(ctx context.Context) DomainRouteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DomainRouteMapOutput)
}

type DomainRouteOutput struct{ *pulumi.OutputState }

func (DomainRouteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DomainRoute)(nil)).Elem()
}

func (o DomainRouteOutput) ToDomainRouteOutput() DomainRouteOutput {
	return o
}

func (o DomainRouteOutput) ToDomainRouteOutputWithContext(ctx context.Context) DomainRouteOutput {
	return o
}

// The self link of the domain to add the route to.
func (o DomainRouteOutput) DomainLink() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRoute) pulumi.StringOutput { return v.DomainLink }).(pulumi.StringOutput)
}

// The port the route corresponds to. Default: 443
func (o DomainRouteOutput) DomainPort() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRoute) pulumi.IntPtrOutput { return v.DomainPort }).(pulumi.IntPtrOutput)
}

// Modify the headers for all http requests for this route.
func (o DomainRouteOutput) Headers() DomainRouteHeadersPtrOutput {
	return o.ApplyT(func(v *DomainRoute) DomainRouteHeadersPtrOutput { return v.Headers }).(DomainRouteHeadersPtrOutput)
}

// This option allows forwarding traffic for different host headers to different workloads. This will only be used when the
// target GVC has dedicated load balancing enabled and the Domain is configured for wildcard support. Please contact us on
// Slack or at support@controlplane.com for additional details.
func (o DomainRouteOutput) HostPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRoute) pulumi.StringPtrOutput { return v.HostPrefix }).(pulumi.StringPtrOutput)
}

// For the linked workload, the port to route traffic to.
func (o DomainRouteOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DomainRoute) pulumi.IntPtrOutput { return v.Port }).(pulumi.IntPtrOutput)
}

// The path will match any unmatched path prefixes for the subdomain.
func (o DomainRouteOutput) Prefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRoute) pulumi.StringPtrOutput { return v.Prefix }).(pulumi.StringPtrOutput)
}

// Used to match URI paths. Uses the google re2 regex syntax.
func (o DomainRouteOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRoute) pulumi.StringPtrOutput { return v.Regex }).(pulumi.StringPtrOutput)
}

// A path prefix can be configured to be replaced when forwarding the request to the Workload.
func (o DomainRouteOutput) ReplacePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *DomainRoute) pulumi.StringPtrOutput { return v.ReplacePrefix }).(pulumi.StringPtrOutput)
}

// The link of the workload to map the prefix to.
func (o DomainRouteOutput) WorkloadLink() pulumi.StringOutput {
	return o.ApplyT(func(v *DomainRoute) pulumi.StringOutput { return v.WorkloadLink }).(pulumi.StringOutput)
}

type DomainRouteArrayOutput struct{ *pulumi.OutputState }

func (DomainRouteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DomainRoute)(nil)).Elem()
}

func (o DomainRouteArrayOutput) ToDomainRouteArrayOutput() DomainRouteArrayOutput {
	return o
}

func (o DomainRouteArrayOutput) ToDomainRouteArrayOutputWithContext(ctx context.Context) DomainRouteArrayOutput {
	return o
}

func (o DomainRouteArrayOutput) Index(i pulumi.IntInput) DomainRouteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DomainRoute {
		return vs[0].([]*DomainRoute)[vs[1].(int)]
	}).(DomainRouteOutput)
}

type DomainRouteMapOutput struct{ *pulumi.OutputState }

func (DomainRouteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DomainRoute)(nil)).Elem()
}

func (o DomainRouteMapOutput) ToDomainRouteMapOutput() DomainRouteMapOutput {
	return o
}

func (o DomainRouteMapOutput) ToDomainRouteMapOutputWithContext(ctx context.Context) DomainRouteMapOutput {
	return o
}

func (o DomainRouteMapOutput) MapIndex(k pulumi.StringInput) DomainRouteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DomainRoute {
		return vs[0].(map[string]*DomainRoute)[vs[1].(string)]
	}).(DomainRouteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRouteInput)(nil)).Elem(), &DomainRoute{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRouteArrayInput)(nil)).Elem(), DomainRouteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DomainRouteMapInput)(nil)).Elem(), DomainRouteMap{})
	pulumi.RegisterOutputType(DomainRouteOutput{})
	pulumi.RegisterOutputType(DomainRouteArrayOutput{})
	pulumi.RegisterOutputType(DomainRouteMapOutput{})
}
