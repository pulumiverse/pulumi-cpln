// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package cpln

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln/internal"
)

// Use this data source to access information about an [Image](https://docs.controlplane.com/reference/image) within Control Plane.
//
// ## Required
//
// - **name** (String) Name of the image. If the tag of the image is not specified, the latest image will be fetched for this data source.
//
// ## Outputs
//
// The following attributes are exported:
//
// - **cpln_id** (String) The ID, in GUID format, of the Image.
// - **name** (String) Name of the Image.
// - **tags** (Map of String) Key-value map of resource tags.
// - **self_link** (String) Full link to this resource. Can be referenced by other resources.
// - **tag** (String) Tag of the image.
// - **repository** (String) Respository name of the image.
// - **digest** (String) A unique SHA256 hash used to identify a specific image version within the image registry.
// - **manifest** (Block List, Max: 1) (see below)
//
// <a id="nestedblock--manifest"></a>
//
// ### `manifest`
//
//	The manifest provides configuration and layers information about the image. It plays a crucial role in the Docker image distribution system, enabling image creation, verification, and replication in a consistent and secure manner.
//
// - **config** (Block List, Max: 1) (see below).
// - **layers** (Block List) (see below).
// - **media_type** (String) Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
// - **schema_version** (Number) The version of the Docker Image Manifest format.
//
// <a id="nestedblock--config--layers"></a>
//
// ### `config` and `layers`
//
// The config is a JSON blob that contains the image configuration data which includes environment variables, default command to run, and other settings necessary to run the container based on this image.
//
// Layers lists the digests of the image's layers. These layers are filesystem changes or additions made in each step of the Docker image's creation process. The layers are stored separately and pulled as needed, which allows for efficient storage and transfer of images. Each layer is represented by a SHA256 digest, ensuring the integrity and authenticity of the image.
//
// - **size** (Number) The size of the image or layer in bytes. This helps in estimating the space required and the download time.
// - **digest** (String) A unique SHA256 hash used to identify a specific image version within the image registry.
// - **media_type** (String) Specifies the type of the content represented in the manifest, allowing Docker clients and registries to understand how to handle the document correctly.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/pulumiverse/pulumi-cpln/sdk/go/cpln"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			image_name_only, err := cpln.GetImage(ctx, &cpln.GetImageArgs{
//				Name: "IMAGE_NAME",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			image_name_with_tag, err := cpln.GetImage(ctx, &cpln.GetImageArgs{
//				Name: "IMAGE_NAME:TAG",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("latestImage", image_name_only)
//			ctx.Export("specificImage", image_name_with_tag)
//			return nil
//		})
//	}
//
// ```
func GetImage(ctx *pulumi.Context, args *GetImageArgs, opts ...pulumi.InvokeOption) (*GetImageResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv GetImageResult
	err := ctx.Invoke("cpln:index/getImage:getImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getImage.
type GetImageArgs struct {
	Name string `pulumi:"name"`
}

// A collection of values returned by getImage.
type GetImageResult struct {
	CplnId string `pulumi:"cplnId"`
	Digest string `pulumi:"digest"`
	// The provider-assigned unique ID for this managed resource.
	Id         string             `pulumi:"id"`
	Manifests  []GetImageManifest `pulumi:"manifests"`
	Name       string             `pulumi:"name"`
	Repository string             `pulumi:"repository"`
	SelfLink   string             `pulumi:"selfLink"`
	Tag        string             `pulumi:"tag"`
	Tags       map[string]string  `pulumi:"tags"`
}

func GetImageOutput(ctx *pulumi.Context, args GetImageOutputArgs, opts ...pulumi.InvokeOption) GetImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetImageResultOutput, error) {
			args := v.(GetImageArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv GetImageResult
			secret, err := ctx.InvokePackageRaw("cpln:index/getImage:getImage", args, &rv, "", opts...)
			if err != nil {
				return GetImageResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(GetImageResultOutput)
			if secret {
				return pulumi.ToSecret(output).(GetImageResultOutput), nil
			}
			return output, nil
		}).(GetImageResultOutput)
}

// A collection of arguments for invoking getImage.
type GetImageOutputArgs struct {
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageArgs)(nil)).Elem()
}

// A collection of values returned by getImage.
type GetImageResultOutput struct{ *pulumi.OutputState }

func (GetImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetImageResult)(nil)).Elem()
}

func (o GetImageResultOutput) ToGetImageResultOutput() GetImageResultOutput {
	return o
}

func (o GetImageResultOutput) ToGetImageResultOutputWithContext(ctx context.Context) GetImageResultOutput {
	return o
}

func (o GetImageResultOutput) CplnId() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.CplnId }).(pulumi.StringOutput)
}

func (o GetImageResultOutput) Digest() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Digest }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetImageResultOutput) Manifests() GetImageManifestArrayOutput {
	return o.ApplyT(func(v GetImageResult) []GetImageManifest { return v.Manifests }).(GetImageManifestArrayOutput)
}

func (o GetImageResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetImageResultOutput) Repository() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Repository }).(pulumi.StringOutput)
}

func (o GetImageResultOutput) SelfLink() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.SelfLink }).(pulumi.StringOutput)
}

func (o GetImageResultOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v GetImageResult) string { return v.Tag }).(pulumi.StringOutput)
}

func (o GetImageResultOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetImageResult) map[string]string { return v.Tags }).(pulumi.StringMapOutput)
}

func init() {
	pulumi.RegisterOutputType(GetImageResultOutput{})
}
